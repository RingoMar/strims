import { PassThrough, Readable as ReadableStream, Writable } from "stream";
import * as pb from "../../service/pb";
import { RPCHost } from "../../service/rpc_host";
import { Readable } from "../../service/stream";
import "../../service/types";

class NegotiatorService {
  private pc: RTCPeerConnection;

  constructor(pc: RTCPeerConnection) {
    this.pc = pc;
  }

  public negotiateWRTC(v: pb.NegotiateWRTCRequest): Readable<pb.NegotiateWRTCResponse> {
    const out = new PassThrough({objectMode: true});

    if (v.getType() === pb.WRTCSDPType.OFFER) {
      const pc = new RTCPeerConnection({

      });

      this.pc.setRemoteDescription(JSON.parse(v.getSessionDescription()))
        .then(() => this.pc.createAnswer());
        // .then((answer) => )
    }

    this.pc.onicecandidate = (e) => {
      if (e.candidate === null) {
        out.push(null);
        return;
      }

      const res = new pb.NegotiateWRTCResponse();
      res.setCandidate(JSON.stringify(e.candidate));
      out.push(res);
    };

    return out as any;
  }
}

export default class Negotiator extends RPCHost {
  public negotiateWRTC(v: pb.NegotiateWRTCRequest): Readable<pb.NegotiateWRTCResponse> {
    return this.expectMany(this.call("negotiateWRTC", v));
  }
}
