apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: strims
  name: svc-leader
  labels:
    strims.gg/svc: leader
spec:
  replicas: 1
  selector:
    matchLabels:
      strims.gg/svc: leader
  template:
    metadata:
      labels:
        strims.gg/svc: leader
    spec:
      serviceAccountName: node-reader
      nodeSelector:
        strims.gg/svc: leader
      initContainers:
      - name: init
        image: bitnami/kubectl:latest
        command: ["sh", "-c"]
        args:
        - kubectl get node $NODE_NAME -o jsonpath='{.metadata.labels.strims\.gg/public-ip}' > /node-labels/public-ip
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: node-labels-vol
          mountPath: /node-labels
      containers:
      - name: strims
        image: ghcr.io/memelabs/strims/svc:latest
        imagePullPolicy: Always
        command: ["sh", "-c"]
        args:
        - /ko-app/svc run -config /etc/strims/config.yaml -host-ip "$(cat /node-labels/public-ip)";
        ports:
        - name: metrics
          containerPort: 1971
        - name: debug
          containerPort: 6060
        - name: webrtc-tcp
          containerPort: 5000
          hostPort: 5000
        - name: webrtc-udp
          containerPort: 5000
          hostPort: 5000
          protocol: UDP
        - name: rtmp
          containerPort: 1935
          hostPort: 1935
        - name: http
          containerPort: 10080
        volumeMounts:
        - name: config-vol
          mountPath: /etc/strims
        - name: node-labels-vol
          mountPath: /node-labels
      volumes:
      - name: config-vol
        configMap:
          name: svc-leader-config
      - name: node-labels-vol
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: svc-leader
  namespace: strims
spec:
  type: NodePort
  selector:
    strims.gg/svc: leader
  ports:
    - protocol: TCP
      nodePort: 31314
      port: 80
      targetPort: http
