// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WireguardIPLease is an object representing the database table.
type WireguardIPLease struct {
	LesseeType string `boil:"lessee_type" json:"lesseeType" toml:"lesseeType" yaml:"lesseeType"`
	LesseeID   int64  `boil:"lessee_id" json:"lesseeID" toml:"lesseeID" yaml:"lesseeID"`
	IP         string `boil:"ip" json:"ip" toml:"ip" yaml:"ip"`

	R *wireguardIPLeaseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L wireguardIPLeaseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WireguardIPLeaseColumns = struct {
	LesseeType string
	LesseeID   string
	IP         string
}{
	LesseeType: "lessee_type",
	LesseeID:   "lessee_id",
	IP:         "ip",
}

var WireguardIPLeaseTableColumns = struct {
	LesseeType string
	LesseeID   string
	IP         string
}{
	LesseeType: "wireguard_ip_leases.lessee_type",
	LesseeID:   "wireguard_ip_leases.lessee_id",
	IP:         "wireguard_ip_leases.ip",
}

// Generated where

var WireguardIPLeaseWhere = struct {
	LesseeType whereHelperstring
	LesseeID   whereHelperint64
	IP         whereHelperstring
}{
	LesseeType: whereHelperstring{field: "\"wireguard_ip_leases\".\"lessee_type\""},
	LesseeID:   whereHelperint64{field: "\"wireguard_ip_leases\".\"lessee_id\""},
	IP:         whereHelperstring{field: "\"wireguard_ip_leases\".\"ip\""},
}

// WireguardIPLeaseRels is where relationship names are stored.
var WireguardIPLeaseRels = struct {
}{}

// wireguardIPLeaseR is where relationships are stored.
type wireguardIPLeaseR struct {
}

// NewStruct creates a new relationship struct
func (*wireguardIPLeaseR) NewStruct() *wireguardIPLeaseR {
	return &wireguardIPLeaseR{}
}

// wireguardIPLeaseL is where Load methods for each relationship are stored.
type wireguardIPLeaseL struct{}

var (
	wireguardIPLeaseAllColumns            = []string{"lessee_type", "lessee_id", "ip"}
	wireguardIPLeaseColumnsWithoutDefault = []string{"lessee_type", "lessee_id", "ip"}
	wireguardIPLeaseColumnsWithDefault    = []string{}
	wireguardIPLeasePrimaryKeyColumns     = []string{"lessee_type", "lessee_id"}
	wireguardIPLeaseGeneratedColumns      = []string{}
)

type (
	// WireguardIPLeaseSlice is an alias for a slice of pointers to WireguardIPLease.
	// This should almost always be used instead of []WireguardIPLease.
	WireguardIPLeaseSlice []*WireguardIPLease

	wireguardIPLeaseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	wireguardIPLeaseType                 = reflect.TypeOf(&WireguardIPLease{})
	wireguardIPLeaseMapping              = queries.MakeStructMapping(wireguardIPLeaseType)
	wireguardIPLeasePrimaryKeyMapping, _ = queries.BindMapping(wireguardIPLeaseType, wireguardIPLeaseMapping, wireguardIPLeasePrimaryKeyColumns)
	wireguardIPLeaseInsertCacheMut       sync.RWMutex
	wireguardIPLeaseInsertCache          = make(map[string]insertCache)
	wireguardIPLeaseUpdateCacheMut       sync.RWMutex
	wireguardIPLeaseUpdateCache          = make(map[string]updateCache)
	wireguardIPLeaseUpsertCacheMut       sync.RWMutex
	wireguardIPLeaseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single wireguardIPLease record from the query using the global executor.
func (q wireguardIPLeaseQuery) OneG(ctx context.Context) (*WireguardIPLease, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single wireguardIPLease record from the query.
func (q wireguardIPLeaseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WireguardIPLease, error) {
	o := &WireguardIPLease{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for wireguard_ip_leases")
	}

	return o, nil
}

// AllG returns all WireguardIPLease records from the query using the global executor.
func (q wireguardIPLeaseQuery) AllG(ctx context.Context) (WireguardIPLeaseSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all WireguardIPLease records from the query.
func (q wireguardIPLeaseQuery) All(ctx context.Context, exec boil.ContextExecutor) (WireguardIPLeaseSlice, error) {
	var o []*WireguardIPLease

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WireguardIPLease slice")
	}

	return o, nil
}

// CountG returns the count of all WireguardIPLease records in the query using the global executor
func (q wireguardIPLeaseQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all WireguardIPLease records in the query.
func (q wireguardIPLeaseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count wireguard_ip_leases rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q wireguardIPLeaseQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q wireguardIPLeaseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if wireguard_ip_leases exists")
	}

	return count > 0, nil
}

// WireguardIPLeases retrieves all the records using an executor.
func WireguardIPLeases(mods ...qm.QueryMod) wireguardIPLeaseQuery {
	mods = append(mods, qm.From("\"wireguard_ip_leases\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"wireguard_ip_leases\".*"})
	}

	return wireguardIPLeaseQuery{q}
}

// FindWireguardIPLeaseG retrieves a single record by ID.
func FindWireguardIPLeaseG(ctx context.Context, lesseeType string, lesseeID int64, selectCols ...string) (*WireguardIPLease, error) {
	return FindWireguardIPLease(ctx, boil.GetContextDB(), lesseeType, lesseeID, selectCols...)
}

// FindWireguardIPLease retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWireguardIPLease(ctx context.Context, exec boil.ContextExecutor, lesseeType string, lesseeID int64, selectCols ...string) (*WireguardIPLease, error) {
	wireguardIPLeaseObj := &WireguardIPLease{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"wireguard_ip_leases\" where \"lessee_type\"=$1 AND \"lessee_id\"=$2", sel,
	)

	q := queries.Raw(query, lesseeType, lesseeID)

	err := q.Bind(ctx, exec, wireguardIPLeaseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from wireguard_ip_leases")
	}

	return wireguardIPLeaseObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *WireguardIPLease) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WireguardIPLease) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wireguard_ip_leases provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(wireguardIPLeaseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	wireguardIPLeaseInsertCacheMut.RLock()
	cache, cached := wireguardIPLeaseInsertCache[key]
	wireguardIPLeaseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			wireguardIPLeaseAllColumns,
			wireguardIPLeaseColumnsWithDefault,
			wireguardIPLeaseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(wireguardIPLeaseType, wireguardIPLeaseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(wireguardIPLeaseType, wireguardIPLeaseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"wireguard_ip_leases\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"wireguard_ip_leases\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into wireguard_ip_leases")
	}

	if !cached {
		wireguardIPLeaseInsertCacheMut.Lock()
		wireguardIPLeaseInsertCache[key] = cache
		wireguardIPLeaseInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single WireguardIPLease record using the global executor.
// See Update for more documentation.
func (o *WireguardIPLease) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the WireguardIPLease.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WireguardIPLease) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	wireguardIPLeaseUpdateCacheMut.RLock()
	cache, cached := wireguardIPLeaseUpdateCache[key]
	wireguardIPLeaseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			wireguardIPLeaseAllColumns,
			wireguardIPLeasePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update wireguard_ip_leases, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"wireguard_ip_leases\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, wireguardIPLeasePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(wireguardIPLeaseType, wireguardIPLeaseMapping, append(wl, wireguardIPLeasePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update wireguard_ip_leases row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for wireguard_ip_leases")
	}

	if !cached {
		wireguardIPLeaseUpdateCacheMut.Lock()
		wireguardIPLeaseUpdateCache[key] = cache
		wireguardIPLeaseUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q wireguardIPLeaseQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q wireguardIPLeaseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for wireguard_ip_leases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for wireguard_ip_leases")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o WireguardIPLeaseSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WireguardIPLeaseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wireguardIPLeasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"wireguard_ip_leases\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, wireguardIPLeasePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in wireguardIPLease slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all wireguardIPLease")
	}
	return rowsAff, nil
}

// DeleteG deletes a single WireguardIPLease record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *WireguardIPLease) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single WireguardIPLease record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WireguardIPLease) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WireguardIPLease provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), wireguardIPLeasePrimaryKeyMapping)
	sql := "DELETE FROM \"wireguard_ip_leases\" WHERE \"lessee_type\"=$1 AND \"lessee_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from wireguard_ip_leases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for wireguard_ip_leases")
	}

	return rowsAff, nil
}

func (q wireguardIPLeaseQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q wireguardIPLeaseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no wireguardIPLeaseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wireguard_ip_leases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wireguard_ip_leases")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o WireguardIPLeaseSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WireguardIPLeaseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wireguardIPLeasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"wireguard_ip_leases\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, wireguardIPLeasePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wireguardIPLease slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wireguard_ip_leases")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *WireguardIPLease) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no WireguardIPLease provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WireguardIPLease) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWireguardIPLease(ctx, exec, o.LesseeType, o.LesseeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WireguardIPLeaseSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty WireguardIPLeaseSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WireguardIPLeaseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WireguardIPLeaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wireguardIPLeasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"wireguard_ip_leases\".* FROM \"wireguard_ip_leases\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, wireguardIPLeasePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WireguardIPLeaseSlice")
	}

	*o = slice

	return nil
}

// WireguardIPLeaseExistsG checks if the WireguardIPLease row exists.
func WireguardIPLeaseExistsG(ctx context.Context, lesseeType string, lesseeID int64) (bool, error) {
	return WireguardIPLeaseExists(ctx, boil.GetContextDB(), lesseeType, lesseeID)
}

// WireguardIPLeaseExists checks if the WireguardIPLease row exists.
func WireguardIPLeaseExists(ctx context.Context, exec boil.ContextExecutor, lesseeType string, lesseeID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"wireguard_ip_leases\" where \"lessee_type\"=$1 AND \"lessee_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, lesseeType, lesseeID)
	}
	row := exec.QueryRowContext(ctx, sql, lesseeType, lesseeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if wireguard_ip_leases exists")
	}

	return exists, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *WireguardIPLease) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WireguardIPLease) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wireguard_ip_leases provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(wireguardIPLeaseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	wireguardIPLeaseUpsertCacheMut.RLock()
	cache, cached := wireguardIPLeaseUpsertCache[key]
	wireguardIPLeaseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			wireguardIPLeaseAllColumns,
			wireguardIPLeaseColumnsWithDefault,
			wireguardIPLeaseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			wireguardIPLeaseAllColumns,
			wireguardIPLeasePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert wireguard_ip_leases, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(wireguardIPLeasePrimaryKeyColumns))
			copy(conflict, wireguardIPLeasePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"wireguard_ip_leases\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(wireguardIPLeaseType, wireguardIPLeaseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(wireguardIPLeaseType, wireguardIPLeaseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert wireguard_ip_leases")
	}

	if !cached {
		wireguardIPLeaseUpsertCacheMut.Lock()
		wireguardIPLeaseUpsertCache[key] = cache
		wireguardIPLeaseUpsertCacheMut.Unlock()
	}

	return nil
}
