// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vpn.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct PBStartVPNRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var enableBootstrapPublishing: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBStartVPNResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBStopVPNRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBStopVPNResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBNetworkEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var body: PBNetworkEvent.OneOf_Body? = nil

  public var networkOpen: PBNetworkEvent.NetworkOpen {
    get {
      if case .networkOpen(let v)? = body {return v}
      return PBNetworkEvent.NetworkOpen()
    }
    set {body = .networkOpen(newValue)}
  }

  public var networkClose: PBNetworkEvent.NetworkClose {
    get {
      if case .networkClose(let v)? = body {return v}
      return PBNetworkEvent.NetworkClose()
    }
    set {body = .networkClose(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable {
    case networkOpen(PBNetworkEvent.NetworkOpen)
    case networkClose(PBNetworkEvent.NetworkClose)

  #if !swift(>=4.1)
    public static func ==(lhs: PBNetworkEvent.OneOf_Body, rhs: PBNetworkEvent.OneOf_Body) -> Bool {
      switch (lhs, rhs) {
      case (.networkOpen(let l), .networkOpen(let r)): return l == r
      case (.networkClose(let l), .networkClose(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct NetworkOpen {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var networkID: UInt64 = 0

    public var networkKey: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct NetworkClose {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var networkID: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct PBNetworkAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var hostID: Data = Data()

  public var port: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBPeerInit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var protocolVersion: UInt32 = 0

  public var certificate: PBCertificate {
    get {return _certificate ?? PBCertificate()}
    set {_certificate = newValue}
  }
  /// Returns true if `certificate` has been explicitly set.
  public var hasCertificate: Bool {return self._certificate != nil}
  /// Clears the value of `certificate`. Subsequent reads from it will return its default value.
  public mutating func clearCertificate() {self._certificate = nil}

  public var iv: Data = Data()

  public var hostID: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _certificate: PBCertificate? = nil
}

public struct PBNetworkHandshake {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var body: PBNetworkHandshake.OneOf_Body? = nil

  public var init_p: PBNetworkHandshake.Init {
    get {
      if case .init_p(let v)? = body {return v}
      return PBNetworkHandshake.Init()
    }
    set {body = .init_p(newValue)}
  }

  public var networkBindings: PBNetworkHandshake.NetworkBindings {
    get {
      if case .networkBindings(let v)? = body {return v}
      return PBNetworkHandshake.NetworkBindings()
    }
    set {body = .networkBindings(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable {
    case init_p(PBNetworkHandshake.Init)
    case networkBindings(PBNetworkHandshake.NetworkBindings)

  #if !swift(>=4.1)
    public static func ==(lhs: PBNetworkHandshake.OneOf_Body, rhs: PBNetworkHandshake.OneOf_Body) -> Bool {
      switch (lhs, rhs) {
      case (.init_p(let l), .init_p(let r)): return l == r
      case (.networkBindings(let l), .networkBindings(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct Init {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var keyCount: Int32 = 0

    public var discriminator: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct NetworkBinding {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var port: UInt32 = 0

    public var certificate: PBCertificate {
      get {return _certificate ?? PBCertificate()}
      set {_certificate = newValue}
    }
    /// Returns true if `certificate` has been explicitly set.
    public var hasCertificate: Bool {return self._certificate != nil}
    /// Clears the value of `certificate`. Subsequent reads from it will return its default value.
    public mutating func clearCertificate() {self._certificate = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _certificate: PBCertificate? = nil
  }

  public struct NetworkBindings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var discriminator: UInt32 = 0

    public var networkBindings: [PBNetworkHandshake.NetworkBinding] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct PBBrokerPeerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var connMtu: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBBrokerPeerEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var body: PBBrokerPeerEvent.OneOf_Body? = nil

  public var `open`: PBBrokerPeerEvent.Open {
    get {
      if case .open(let v)? = body {return v}
      return PBBrokerPeerEvent.Open()
    }
    set {body = .open(newValue)}
  }

  public var data: PBBrokerPeerEvent.DataMessage {
    get {
      if case .data(let v)? = body {return v}
      return PBBrokerPeerEvent.DataMessage()
    }
    set {body = .data(newValue)}
  }

  public var initRequired: PBBrokerPeerEvent.InitRequired {
    get {
      if case .initRequired(let v)? = body {return v}
      return PBBrokerPeerEvent.InitRequired()
    }
    set {body = .initRequired(newValue)}
  }

  public var keys: PBBrokerPeerEvent.Keys {
    get {
      if case .keys(let v)? = body {return v}
      return PBBrokerPeerEvent.Keys()
    }
    set {body = .keys(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable {
    case `open`(PBBrokerPeerEvent.Open)
    case data(PBBrokerPeerEvent.DataMessage)
    case initRequired(PBBrokerPeerEvent.InitRequired)
    case keys(PBBrokerPeerEvent.Keys)

  #if !swift(>=4.1)
    public static func ==(lhs: PBBrokerPeerEvent.OneOf_Body, rhs: PBBrokerPeerEvent.OneOf_Body) -> Bool {
      switch (lhs, rhs) {
      case (.open(let l), .open(let r)): return l == r
      case (.data(let l), .data(let r)): return l == r
      case (.initRequired(let l), .initRequired(let r)): return l == r
      case (.keys(let l), .keys(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct Open {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var peerID: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct DataMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var data: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct InitRequired {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var data: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Keys {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var keys: [Data] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct PBBrokerPeerInitRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var peerID: UInt64 = 0

  public var discriminator: UInt32 = 0

  public var keys: [Data] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBBrokerPeerDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var peerID: UInt64 = 0

  public var data: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBBootstrapClient {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var clientOptions: PBBootstrapClient.OneOf_ClientOptions? = nil

  public var websocketOptions: PBBootstrapClientWebSocketOptions {
    get {
      if case .websocketOptions(let v)? = clientOptions {return v}
      return PBBootstrapClientWebSocketOptions()
    }
    set {clientOptions = .websocketOptions(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ClientOptions: Equatable {
    case websocketOptions(PBBootstrapClientWebSocketOptions)

  #if !swift(>=4.1)
    public static func ==(lhs: PBBootstrapClient.OneOf_ClientOptions, rhs: PBBootstrapClient.OneOf_ClientOptions) -> Bool {
      switch (lhs, rhs) {
      case (.websocketOptions(let l), .websocketOptions(let r)): return l == r
      }
    }
  #endif
  }

  public init() {}
}

public struct PBBootstrapClientWebSocketOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String = String()

  public var insecureSkipVerifyTls: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBCreateBootstrapClientRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var clientOptions: PBCreateBootstrapClientRequest.OneOf_ClientOptions? = nil

  public var websocketOptions: PBBootstrapClientWebSocketOptions {
    get {
      if case .websocketOptions(let v)? = clientOptions {return v}
      return PBBootstrapClientWebSocketOptions()
    }
    set {clientOptions = .websocketOptions(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ClientOptions: Equatable {
    case websocketOptions(PBBootstrapClientWebSocketOptions)

  #if !swift(>=4.1)
    public static func ==(lhs: PBCreateBootstrapClientRequest.OneOf_ClientOptions, rhs: PBCreateBootstrapClientRequest.OneOf_ClientOptions) -> Bool {
      switch (lhs, rhs) {
      case (.websocketOptions(let l), .websocketOptions(let r)): return l == r
      }
    }
  #endif
  }

  public init() {}
}

public struct PBCreateBootstrapClientResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var bootstrapClient: PBBootstrapClient {
    get {return _bootstrapClient ?? PBBootstrapClient()}
    set {_bootstrapClient = newValue}
  }
  /// Returns true if `bootstrapClient` has been explicitly set.
  public var hasBootstrapClient: Bool {return self._bootstrapClient != nil}
  /// Clears the value of `bootstrapClient`. Subsequent reads from it will return its default value.
  public mutating func clearBootstrapClient() {self._bootstrapClient = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _bootstrapClient: PBBootstrapClient? = nil
}

public struct PBUpdateBootstrapClientRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var clientOptions: PBUpdateBootstrapClientRequest.OneOf_ClientOptions? = nil

  public var websocketOptions: PBBootstrapClientWebSocketOptions {
    get {
      if case .websocketOptions(let v)? = clientOptions {return v}
      return PBBootstrapClientWebSocketOptions()
    }
    set {clientOptions = .websocketOptions(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ClientOptions: Equatable {
    case websocketOptions(PBBootstrapClientWebSocketOptions)

  #if !swift(>=4.1)
    public static func ==(lhs: PBUpdateBootstrapClientRequest.OneOf_ClientOptions, rhs: PBUpdateBootstrapClientRequest.OneOf_ClientOptions) -> Bool {
      switch (lhs, rhs) {
      case (.websocketOptions(let l), .websocketOptions(let r)): return l == r
      }
    }
  #endif
  }

  public init() {}
}

public struct PBUpdateBootstrapClientResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var bootstrapClient: PBBootstrapClient {
    get {return _bootstrapClient ?? PBBootstrapClient()}
    set {_bootstrapClient = newValue}
  }
  /// Returns true if `bootstrapClient` has been explicitly set.
  public var hasBootstrapClient: Bool {return self._bootstrapClient != nil}
  /// Clears the value of `bootstrapClient`. Subsequent reads from it will return its default value.
  public mutating func clearBootstrapClient() {self._bootstrapClient = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _bootstrapClient: PBBootstrapClient? = nil
}

public struct PBDeleteBootstrapClientRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBDeleteBootstrapClientResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBGetBootstrapClientRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBGetBootstrapClientResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var bootstrapClient: PBBootstrapClient {
    get {return _bootstrapClient ?? PBBootstrapClient()}
    set {_bootstrapClient = newValue}
  }
  /// Returns true if `bootstrapClient` has been explicitly set.
  public var hasBootstrapClient: Bool {return self._bootstrapClient != nil}
  /// Clears the value of `bootstrapClient`. Subsequent reads from it will return its default value.
  public mutating func clearBootstrapClient() {self._bootstrapClient = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _bootstrapClient: PBBootstrapClient? = nil
}

public struct PBGetBootstrapClientsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBGetBootstrapClientsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var bootstrapClients: [PBBootstrapClient] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBGetBootstrapPeersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBGetBootstrapPeersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var peers: [PBBootstrapPeer] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBBootstrapPeer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var hostID: Data = Data()

  public var label: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBBootstrapServiceMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var body: PBBootstrapServiceMessage.OneOf_Body? = nil

  public var brokerOffer: PBBootstrapServiceMessage.BrokerOffer {
    get {
      if case .brokerOffer(let v)? = body {return v}
      return PBBootstrapServiceMessage.BrokerOffer()
    }
    set {body = .brokerOffer(newValue)}
  }

  public var publishRequest: PBBootstrapServiceMessage.PublishRequest {
    get {
      if case .publishRequest(let v)? = body {return v}
      return PBBootstrapServiceMessage.PublishRequest()
    }
    set {body = .publishRequest(newValue)}
  }

  public var publishResponse: PBBootstrapServiceMessage.PublishResponse {
    get {
      if case .publishResponse(let v)? = body {return v}
      return PBBootstrapServiceMessage.PublishResponse()
    }
    set {body = .publishResponse(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable {
    case brokerOffer(PBBootstrapServiceMessage.BrokerOffer)
    case publishRequest(PBBootstrapServiceMessage.PublishRequest)
    case publishResponse(PBBootstrapServiceMessage.PublishResponse)

  #if !swift(>=4.1)
    public static func ==(lhs: PBBootstrapServiceMessage.OneOf_Body, rhs: PBBootstrapServiceMessage.OneOf_Body) -> Bool {
      switch (lhs, rhs) {
      case (.brokerOffer(let l), .brokerOffer(let r)): return l == r
      case (.publishRequest(let l), .publishRequest(let r)): return l == r
      case (.publishResponse(let l), .publishResponse(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct BrokerOffer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct PublishRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var name: String = String()

    public var certificate: PBCertificate {
      get {return _certificate ?? PBCertificate()}
      set {_certificate = newValue}
    }
    /// Returns true if `certificate` has been explicitly set.
    public var hasCertificate: Bool {return self._certificate != nil}
    /// Clears the value of `certificate`. Subsequent reads from it will return its default value.
    public mutating func clearCertificate() {self._certificate = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _certificate: PBCertificate? = nil
  }

  public struct PublishResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var body: PBBootstrapServiceMessage.PublishResponse.OneOf_Body? = nil

    public var error: String {
      get {
        if case .error(let v)? = body {return v}
        return String()
      }
      set {body = .error(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Body: Equatable {
      case error(String)

    #if !swift(>=4.1)
      public static func ==(lhs: PBBootstrapServiceMessage.PublishResponse.OneOf_Body, rhs: PBBootstrapServiceMessage.PublishResponse.OneOf_Body) -> Bool {
        switch (lhs, rhs) {
        case (.error(let l), .error(let r)): return l == r
        }
      }
    #endif
    }

    public init() {}
  }

  public init() {}
}

public struct PBPublishNetworkToBootstrapPeerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var hostID: Data = Data()

  public var network: PBNetwork {
    get {return _network ?? PBNetwork()}
    set {_network = newValue}
  }
  /// Returns true if `network` has been explicitly set.
  public var hasNetwork: Bool {return self._network != nil}
  /// Clears the value of `network`. Subsequent reads from it will return its default value.
  public mutating func clearNetwork() {self._network = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _network: PBNetwork? = nil
}

public struct PBPublishNetworkToBootstrapPeerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBPeerExchangeMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var body: PBPeerExchangeMessage.OneOf_Body? = nil

  public var request: PBPeerExchangeMessage.Request {
    get {
      if case .request(let v)? = body {return v}
      return PBPeerExchangeMessage.Request()
    }
    set {body = .request(newValue)}
  }

  public var response: PBPeerExchangeMessage.Response {
    get {
      if case .response(let v)? = body {return v}
      return PBPeerExchangeMessage.Response()
    }
    set {body = .response(newValue)}
  }

  public var offer: PBPeerExchangeMessage.Offer {
    get {
      if case .offer(let v)? = body {return v}
      return PBPeerExchangeMessage.Offer()
    }
    set {body = .offer(newValue)}
  }

  public var answer: PBPeerExchangeMessage.Answer {
    get {
      if case .answer(let v)? = body {return v}
      return PBPeerExchangeMessage.Answer()
    }
    set {body = .answer(newValue)}
  }

  public var iceCandidate: PBPeerExchangeMessage.IceCandidate {
    get {
      if case .iceCandidate(let v)? = body {return v}
      return PBPeerExchangeMessage.IceCandidate()
    }
    set {body = .iceCandidate(newValue)}
  }

  public var callbackRequest: PBPeerExchangeMessage.CallbackRequest {
    get {
      if case .callbackRequest(let v)? = body {return v}
      return PBPeerExchangeMessage.CallbackRequest()
    }
    set {body = .callbackRequest(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable {
    case request(PBPeerExchangeMessage.Request)
    case response(PBPeerExchangeMessage.Response)
    case offer(PBPeerExchangeMessage.Offer)
    case answer(PBPeerExchangeMessage.Answer)
    case iceCandidate(PBPeerExchangeMessage.IceCandidate)
    case callbackRequest(PBPeerExchangeMessage.CallbackRequest)

  #if !swift(>=4.1)
    public static func ==(lhs: PBPeerExchangeMessage.OneOf_Body, rhs: PBPeerExchangeMessage.OneOf_Body) -> Bool {
      switch (lhs, rhs) {
      case (.request(let l), .request(let r)): return l == r
      case (.response(let l), .response(let r)): return l == r
      case (.offer(let l), .offer(let r)): return l == r
      case (.answer(let l), .answer(let r)): return l == r
      case (.iceCandidate(let l), .iceCandidate(let r)): return l == r
      case (.callbackRequest(let l), .callbackRequest(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var count: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var ids: [Data] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Offer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var mediationID: UInt64 = 0

    public var data: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Answer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var mediationID: UInt64 = 0

    public var data: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct IceCandidate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var mediationID: UInt64 = 0

    public var index: UInt64 = 0

    public var data: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct CallbackRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBStartVPNRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "StartVPNRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "enable_bootstrap_publishing"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.enableBootstrapPublishing)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enableBootstrapPublishing != false {
      try visitor.visitSingularBoolField(value: self.enableBootstrapPublishing, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBStartVPNRequest, rhs: PBStartVPNRequest) -> Bool {
    if lhs.enableBootstrapPublishing != rhs.enableBootstrapPublishing {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBStartVPNResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "StartVPNResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBStartVPNResponse, rhs: PBStartVPNResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBStopVPNRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "StopVPNRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBStopVPNRequest, rhs: PBStopVPNRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBStopVPNResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "StopVPNResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBStopVPNResponse, rhs: PBStopVPNResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBNetworkEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "NetworkEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "network_open"),
    2: .standard(proto: "network_close"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: PBNetworkEvent.NetworkOpen?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .networkOpen(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .networkOpen(v)}
      case 2:
        var v: PBNetworkEvent.NetworkClose?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .networkClose(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .networkClose(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.body {
    case .networkOpen(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .networkClose(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBNetworkEvent, rhs: PBNetworkEvent) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBNetworkEvent.NetworkOpen: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBNetworkEvent.protoMessageName + ".NetworkOpen"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "network_id"),
    2: .standard(proto: "network_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.networkID)
      case 2: try decoder.decodeSingularBytesField(value: &self.networkKey)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.networkID != 0 {
      try visitor.visitSingularUInt64Field(value: self.networkID, fieldNumber: 1)
    }
    if !self.networkKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.networkKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBNetworkEvent.NetworkOpen, rhs: PBNetworkEvent.NetworkOpen) -> Bool {
    if lhs.networkID != rhs.networkID {return false}
    if lhs.networkKey != rhs.networkKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBNetworkEvent.NetworkClose: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBNetworkEvent.protoMessageName + ".NetworkClose"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "network_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.networkID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.networkID != 0 {
      try visitor.visitSingularUInt64Field(value: self.networkID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBNetworkEvent.NetworkClose, rhs: PBNetworkEvent.NetworkClose) -> Bool {
    if lhs.networkID != rhs.networkID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBNetworkAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "NetworkAddress"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_id"),
    2: .same(proto: "port"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.hostID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.port)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostID.isEmpty {
      try visitor.visitSingularBytesField(value: self.hostID, fieldNumber: 1)
    }
    if self.port != 0 {
      try visitor.visitSingularUInt32Field(value: self.port, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBNetworkAddress, rhs: PBNetworkAddress) -> Bool {
    if lhs.hostID != rhs.hostID {return false}
    if lhs.port != rhs.port {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerInit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "PeerInit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protocol_version"),
    2: .same(proto: "certificate"),
    3: .same(proto: "iv"),
    4: .standard(proto: "host_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.protocolVersion)
      case 2: try decoder.decodeSingularMessageField(value: &self._certificate)
      case 3: try decoder.decodeSingularBytesField(value: &self.iv)
      case 4: try decoder.decodeSingularBytesField(value: &self.hostID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.protocolVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.protocolVersion, fieldNumber: 1)
    }
    if let v = self._certificate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.iv.isEmpty {
      try visitor.visitSingularBytesField(value: self.iv, fieldNumber: 3)
    }
    if !self.hostID.isEmpty {
      try visitor.visitSingularBytesField(value: self.hostID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerInit, rhs: PBPeerInit) -> Bool {
    if lhs.protocolVersion != rhs.protocolVersion {return false}
    if lhs._certificate != rhs._certificate {return false}
    if lhs.iv != rhs.iv {return false}
    if lhs.hostID != rhs.hostID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBNetworkHandshake: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "NetworkHandshake"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "init"),
    2: .standard(proto: "network_bindings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: PBNetworkHandshake.Init?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .init_p(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .init_p(v)}
      case 2:
        var v: PBNetworkHandshake.NetworkBindings?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .networkBindings(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .networkBindings(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.body {
    case .init_p(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .networkBindings(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBNetworkHandshake, rhs: PBNetworkHandshake) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBNetworkHandshake.Init: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBNetworkHandshake.protoMessageName + ".Init"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_count"),
    2: .same(proto: "discriminator"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.keyCount)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.discriminator)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.keyCount != 0 {
      try visitor.visitSingularInt32Field(value: self.keyCount, fieldNumber: 1)
    }
    if self.discriminator != 0 {
      try visitor.visitSingularUInt32Field(value: self.discriminator, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBNetworkHandshake.Init, rhs: PBNetworkHandshake.Init) -> Bool {
    if lhs.keyCount != rhs.keyCount {return false}
    if lhs.discriminator != rhs.discriminator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBNetworkHandshake.NetworkBinding: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBNetworkHandshake.protoMessageName + ".NetworkBinding"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "port"),
    2: .same(proto: "certificate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.port)
      case 2: try decoder.decodeSingularMessageField(value: &self._certificate)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.port != 0 {
      try visitor.visitSingularUInt32Field(value: self.port, fieldNumber: 1)
    }
    if let v = self._certificate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBNetworkHandshake.NetworkBinding, rhs: PBNetworkHandshake.NetworkBinding) -> Bool {
    if lhs.port != rhs.port {return false}
    if lhs._certificate != rhs._certificate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBNetworkHandshake.NetworkBindings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBNetworkHandshake.protoMessageName + ".NetworkBindings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "discriminator"),
    2: .standard(proto: "network_bindings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.discriminator)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.networkBindings)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.discriminator != 0 {
      try visitor.visitSingularUInt32Field(value: self.discriminator, fieldNumber: 1)
    }
    if !self.networkBindings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.networkBindings, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBNetworkHandshake.NetworkBindings, rhs: PBNetworkHandshake.NetworkBindings) -> Bool {
    if lhs.discriminator != rhs.discriminator {return false}
    if lhs.networkBindings != rhs.networkBindings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBrokerPeerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "BrokerPeerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "conn_mtu"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.connMtu)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.connMtu != 0 {
      try visitor.visitSingularInt32Field(value: self.connMtu, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBrokerPeerRequest, rhs: PBBrokerPeerRequest) -> Bool {
    if lhs.connMtu != rhs.connMtu {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBrokerPeerEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "BrokerPeerEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "open"),
    2: .same(proto: "data"),
    3: .standard(proto: "init_required"),
    4: .same(proto: "keys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: PBBrokerPeerEvent.Open?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .open(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .open(v)}
      case 2:
        var v: PBBrokerPeerEvent.DataMessage?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .data(v)}
      case 3:
        var v: PBBrokerPeerEvent.InitRequired?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .initRequired(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .initRequired(v)}
      case 4:
        var v: PBBrokerPeerEvent.Keys?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .keys(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .keys(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.body {
    case .open(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .data(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .initRequired(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .keys(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBrokerPeerEvent, rhs: PBBrokerPeerEvent) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBrokerPeerEvent.Open: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBBrokerPeerEvent.protoMessageName + ".Open"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peer_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.peerID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.peerID != 0 {
      try visitor.visitSingularUInt64Field(value: self.peerID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBrokerPeerEvent.Open, rhs: PBBrokerPeerEvent.Open) -> Bool {
    if lhs.peerID != rhs.peerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBrokerPeerEvent.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBBrokerPeerEvent.protoMessageName + ".Data"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBrokerPeerEvent.DataMessage, rhs: PBBrokerPeerEvent.DataMessage) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBrokerPeerEvent.InitRequired: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBBrokerPeerEvent.protoMessageName + ".InitRequired"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBrokerPeerEvent.InitRequired, rhs: PBBrokerPeerEvent.InitRequired) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBrokerPeerEvent.Keys: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBBrokerPeerEvent.protoMessageName + ".Keys"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedBytesField(value: &self.keys)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keys.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.keys, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBrokerPeerEvent.Keys, rhs: PBBrokerPeerEvent.Keys) -> Bool {
    if lhs.keys != rhs.keys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBrokerPeerInitRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "BrokerPeerInitRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peer_id"),
    2: .same(proto: "discriminator"),
    3: .same(proto: "keys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.peerID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.discriminator)
      case 3: try decoder.decodeRepeatedBytesField(value: &self.keys)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.peerID != 0 {
      try visitor.visitSingularUInt64Field(value: self.peerID, fieldNumber: 1)
    }
    if self.discriminator != 0 {
      try visitor.visitSingularUInt32Field(value: self.discriminator, fieldNumber: 2)
    }
    if !self.keys.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.keys, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBrokerPeerInitRequest, rhs: PBBrokerPeerInitRequest) -> Bool {
    if lhs.peerID != rhs.peerID {return false}
    if lhs.discriminator != rhs.discriminator {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBrokerPeerDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "BrokerPeerDataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peer_id"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.peerID)
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.peerID != 0 {
      try visitor.visitSingularUInt64Field(value: self.peerID, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBrokerPeerDataRequest, rhs: PBBrokerPeerDataRequest) -> Bool {
    if lhs.peerID != rhs.peerID {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBootstrapClient: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "BootstrapClient"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "websocket_options"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2:
        var v: PBBootstrapClientWebSocketOptions?
        if let current = self.clientOptions {
          try decoder.handleConflictingOneOf()
          if case .websocketOptions(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.clientOptions = .websocketOptions(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if case .websocketOptions(let v)? = self.clientOptions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBootstrapClient, rhs: PBBootstrapClient) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.clientOptions != rhs.clientOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBootstrapClientWebSocketOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "BootstrapClientWebSocketOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .standard(proto: "insecure_skip_verify_tls"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularBoolField(value: &self.insecureSkipVerifyTls)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if self.insecureSkipVerifyTls != false {
      try visitor.visitSingularBoolField(value: self.insecureSkipVerifyTls, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBootstrapClientWebSocketOptions, rhs: PBBootstrapClientWebSocketOptions) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.insecureSkipVerifyTls != rhs.insecureSkipVerifyTls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBCreateBootstrapClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CreateBootstrapClientRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "websocket_options"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: PBBootstrapClientWebSocketOptions?
        if let current = self.clientOptions {
          try decoder.handleConflictingOneOf()
          if case .websocketOptions(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.clientOptions = .websocketOptions(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .websocketOptions(let v)? = self.clientOptions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBCreateBootstrapClientRequest, rhs: PBCreateBootstrapClientRequest) -> Bool {
    if lhs.clientOptions != rhs.clientOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBCreateBootstrapClientResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CreateBootstrapClientResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bootstrap_client"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bootstrapClient)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bootstrapClient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBCreateBootstrapClientResponse, rhs: PBCreateBootstrapClientResponse) -> Bool {
    if lhs._bootstrapClient != rhs._bootstrapClient {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBUpdateBootstrapClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UpdateBootstrapClientRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "websocket_options"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2:
        var v: PBBootstrapClientWebSocketOptions?
        if let current = self.clientOptions {
          try decoder.handleConflictingOneOf()
          if case .websocketOptions(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.clientOptions = .websocketOptions(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if case .websocketOptions(let v)? = self.clientOptions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBUpdateBootstrapClientRequest, rhs: PBUpdateBootstrapClientRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.clientOptions != rhs.clientOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBUpdateBootstrapClientResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UpdateBootstrapClientResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bootstrap_client"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bootstrapClient)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bootstrapClient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBUpdateBootstrapClientResponse, rhs: PBUpdateBootstrapClientResponse) -> Bool {
    if lhs._bootstrapClient != rhs._bootstrapClient {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBDeleteBootstrapClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "DeleteBootstrapClientRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBDeleteBootstrapClientRequest, rhs: PBDeleteBootstrapClientRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBDeleteBootstrapClientResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "DeleteBootstrapClientResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBDeleteBootstrapClientResponse, rhs: PBDeleteBootstrapClientResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBGetBootstrapClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetBootstrapClientRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBGetBootstrapClientRequest, rhs: PBGetBootstrapClientRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBGetBootstrapClientResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetBootstrapClientResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bootstrap_client"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bootstrapClient)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bootstrapClient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBGetBootstrapClientResponse, rhs: PBGetBootstrapClientResponse) -> Bool {
    if lhs._bootstrapClient != rhs._bootstrapClient {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBGetBootstrapClientsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetBootstrapClientsRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBGetBootstrapClientsRequest, rhs: PBGetBootstrapClientsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBGetBootstrapClientsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetBootstrapClientsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bootstrap_clients"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.bootstrapClients)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bootstrapClients.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bootstrapClients, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBGetBootstrapClientsResponse, rhs: PBGetBootstrapClientsResponse) -> Bool {
    if lhs.bootstrapClients != rhs.bootstrapClients {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBGetBootstrapPeersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetBootstrapPeersRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBGetBootstrapPeersRequest, rhs: PBGetBootstrapPeersRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBGetBootstrapPeersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetBootstrapPeersResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "peers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.peers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.peers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.peers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBGetBootstrapPeersResponse, rhs: PBGetBootstrapPeersResponse) -> Bool {
    if lhs.peers != rhs.peers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBootstrapPeer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "BootstrapPeer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_id"),
    2: .same(proto: "label"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.hostID)
      case 2: try decoder.decodeSingularStringField(value: &self.label)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostID.isEmpty {
      try visitor.visitSingularBytesField(value: self.hostID, fieldNumber: 1)
    }
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBootstrapPeer, rhs: PBBootstrapPeer) -> Bool {
    if lhs.hostID != rhs.hostID {return false}
    if lhs.label != rhs.label {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBootstrapServiceMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "BootstrapServiceMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "broker_offer"),
    2: .standard(proto: "publish_request"),
    3: .standard(proto: "publish_response"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: PBBootstrapServiceMessage.BrokerOffer?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .brokerOffer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .brokerOffer(v)}
      case 2:
        var v: PBBootstrapServiceMessage.PublishRequest?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .publishRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .publishRequest(v)}
      case 3:
        var v: PBBootstrapServiceMessage.PublishResponse?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .publishResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .publishResponse(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.body {
    case .brokerOffer(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .publishRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .publishResponse(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBootstrapServiceMessage, rhs: PBBootstrapServiceMessage) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBootstrapServiceMessage.BrokerOffer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBBootstrapServiceMessage.protoMessageName + ".BrokerOffer"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBootstrapServiceMessage.BrokerOffer, rhs: PBBootstrapServiceMessage.BrokerOffer) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBootstrapServiceMessage.PublishRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBBootstrapServiceMessage.protoMessageName + ".PublishRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "certificate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularMessageField(value: &self._certificate)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._certificate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBootstrapServiceMessage.PublishRequest, rhs: PBBootstrapServiceMessage.PublishRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._certificate != rhs._certificate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBBootstrapServiceMessage.PublishResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBBootstrapServiceMessage.protoMessageName + ".PublishResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.body != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.body = .error(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .error(let v)? = self.body {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBBootstrapServiceMessage.PublishResponse, rhs: PBBootstrapServiceMessage.PublishResponse) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPublishNetworkToBootstrapPeerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "PublishNetworkToBootstrapPeerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_id"),
    2: .same(proto: "network"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.hostID)
      case 2: try decoder.decodeSingularMessageField(value: &self._network)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostID.isEmpty {
      try visitor.visitSingularBytesField(value: self.hostID, fieldNumber: 1)
    }
    if let v = self._network {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPublishNetworkToBootstrapPeerRequest, rhs: PBPublishNetworkToBootstrapPeerRequest) -> Bool {
    if lhs.hostID != rhs.hostID {return false}
    if lhs._network != rhs._network {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPublishNetworkToBootstrapPeerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "PublishNetworkToBootstrapPeerResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPublishNetworkToBootstrapPeerResponse, rhs: PBPublishNetworkToBootstrapPeerResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerExchangeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "PeerExchangeMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
    3: .same(proto: "offer"),
    4: .same(proto: "answer"),
    5: .standard(proto: "ice_candidate"),
    6: .standard(proto: "callback_request"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: PBPeerExchangeMessage.Request?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .request(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .request(v)}
      case 2:
        var v: PBPeerExchangeMessage.Response?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .response(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .response(v)}
      case 3:
        var v: PBPeerExchangeMessage.Offer?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .offer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .offer(v)}
      case 4:
        var v: PBPeerExchangeMessage.Answer?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .answer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .answer(v)}
      case 5:
        var v: PBPeerExchangeMessage.IceCandidate?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .iceCandidate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .iceCandidate(v)}
      case 6:
        var v: PBPeerExchangeMessage.CallbackRequest?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .callbackRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .callbackRequest(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.body {
    case .request(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .response(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .offer(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .answer(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .iceCandidate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .callbackRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerExchangeMessage, rhs: PBPeerExchangeMessage) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerExchangeMessage.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBPeerExchangeMessage.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.count)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerExchangeMessage.Request, rhs: PBPeerExchangeMessage.Request) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerExchangeMessage.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBPeerExchangeMessage.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedBytesField(value: &self.ids)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerExchangeMessage.Response, rhs: PBPeerExchangeMessage.Response) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerExchangeMessage.Offer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBPeerExchangeMessage.protoMessageName + ".Offer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mediation_id"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.mediationID)
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mediationID != 0 {
      try visitor.visitSingularUInt64Field(value: self.mediationID, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerExchangeMessage.Offer, rhs: PBPeerExchangeMessage.Offer) -> Bool {
    if lhs.mediationID != rhs.mediationID {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerExchangeMessage.Answer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBPeerExchangeMessage.protoMessageName + ".Answer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mediation_id"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.mediationID)
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mediationID != 0 {
      try visitor.visitSingularUInt64Field(value: self.mediationID, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerExchangeMessage.Answer, rhs: PBPeerExchangeMessage.Answer) -> Bool {
    if lhs.mediationID != rhs.mediationID {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerExchangeMessage.IceCandidate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBPeerExchangeMessage.protoMessageName + ".IceCandidate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mediation_id"),
    2: .same(proto: "index"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.mediationID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.index)
      case 3: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mediationID != 0 {
      try visitor.visitSingularUInt64Field(value: self.mediationID, fieldNumber: 1)
    }
    if self.index != 0 {
      try visitor.visitSingularUInt64Field(value: self.index, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerExchangeMessage.IceCandidate, rhs: PBPeerExchangeMessage.IceCandidate) -> Bool {
    if lhs.mediationID != rhs.mediationID {return false}
    if lhs.index != rhs.index {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerExchangeMessage.CallbackRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBPeerExchangeMessage.protoMessageName + ".CallbackRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerExchangeMessage.CallbackRequest, rhs: PBPeerExchangeMessage.CallbackRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
