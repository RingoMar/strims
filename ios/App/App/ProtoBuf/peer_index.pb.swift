// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: peer_index.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct PBPeerIndexMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var body: PBPeerIndexMessage.OneOf_Body? = nil

  public var publish: PBPeerIndexMessage.Publish {
    get {
      if case .publish(let v)? = body {return v}
      return PBPeerIndexMessage.Publish()
    }
    set {body = .publish(newValue)}
  }

  public var unpublish: PBPeerIndexMessage.Unpublish {
    get {
      if case .unpublish(let v)? = body {return v}
      return PBPeerIndexMessage.Unpublish()
    }
    set {body = .unpublish(newValue)}
  }

  public var searchRequest: PBPeerIndexMessage.SearchRequest {
    get {
      if case .searchRequest(let v)? = body {return v}
      return PBPeerIndexMessage.SearchRequest()
    }
    set {body = .searchRequest(newValue)}
  }

  public var searchResponse: PBPeerIndexMessage.SearchResponse {
    get {
      if case .searchResponse(let v)? = body {return v}
      return PBPeerIndexMessage.SearchResponse()
    }
    set {body = .searchResponse(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable {
    case publish(PBPeerIndexMessage.Publish)
    case unpublish(PBPeerIndexMessage.Unpublish)
    case searchRequest(PBPeerIndexMessage.SearchRequest)
    case searchResponse(PBPeerIndexMessage.SearchResponse)

  #if !swift(>=4.1)
    public static func ==(lhs: PBPeerIndexMessage.OneOf_Body, rhs: PBPeerIndexMessage.OneOf_Body) -> Bool {
      switch (lhs, rhs) {
      case (.publish(let l), .publish(let r)): return l == r
      case (.unpublish(let l), .unpublish(let r)): return l == r
      case (.searchRequest(let l), .searchRequest(let r)): return l == r
      case (.searchResponse(let l), .searchResponse(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct Record {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var hash: Data = Data()

    public var key: Data = Data()

    public var hostID: Data = Data()

    public var port: UInt32 = 0

    public var timestamp: Int64 = 0

    public var signature: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Publish {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var record: PBPeerIndexMessage.Record {
      get {return _record ?? PBPeerIndexMessage.Record()}
      set {_record = newValue}
    }
    /// Returns true if `record` has been explicitly set.
    public var hasRecord: Bool {return self._record != nil}
    /// Clears the value of `record`. Subsequent reads from it will return its default value.
    public mutating func clearRecord() {self._record = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _record: PBPeerIndexMessage.Record? = nil
  }

  public struct Unpublish {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var record: PBPeerIndexMessage.Record {
      get {return _record ?? PBPeerIndexMessage.Record()}
      set {_record = newValue}
    }
    /// Returns true if `record` has been explicitly set.
    public var hasRecord: Bool {return self._record != nil}
    /// Clears the value of `record`. Subsequent reads from it will return its default value.
    public mutating func clearRecord() {self._record = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _record: PBPeerIndexMessage.Record? = nil
  }

  public struct SearchRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var requestID: UInt64 = 0

    public var hash: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct SearchResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var requestID: UInt64 = 0

    public var records: [PBPeerIndexMessage.Record] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBPeerIndexMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "PeerIndexMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "publish"),
    2: .same(proto: "unpublish"),
    3: .standard(proto: "search_request"),
    4: .standard(proto: "search_response"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: PBPeerIndexMessage.Publish?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .publish(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .publish(v)}
      case 2:
        var v: PBPeerIndexMessage.Unpublish?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .unpublish(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .unpublish(v)}
      case 3:
        var v: PBPeerIndexMessage.SearchRequest?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .searchRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .searchRequest(v)}
      case 4:
        var v: PBPeerIndexMessage.SearchResponse?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .searchResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .searchResponse(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.body {
    case .publish(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .unpublish(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .searchRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .searchResponse(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerIndexMessage, rhs: PBPeerIndexMessage) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerIndexMessage.Record: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBPeerIndexMessage.protoMessageName + ".Record"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "key"),
    3: .standard(proto: "host_id"),
    4: .same(proto: "port"),
    5: .same(proto: "timestamp"),
    6: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.hash)
      case 2: try decoder.decodeSingularBytesField(value: &self.key)
      case 3: try decoder.decodeSingularBytesField(value: &self.hostID)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.port)
      case 5: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 6: try decoder.decodeSingularBytesField(value: &self.signature)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 2)
    }
    if !self.hostID.isEmpty {
      try visitor.visitSingularBytesField(value: self.hostID, fieldNumber: 3)
    }
    if self.port != 0 {
      try visitor.visitSingularUInt32Field(value: self.port, fieldNumber: 4)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 5)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerIndexMessage.Record, rhs: PBPeerIndexMessage.Record) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.key != rhs.key {return false}
    if lhs.hostID != rhs.hostID {return false}
    if lhs.port != rhs.port {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerIndexMessage.Publish: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBPeerIndexMessage.protoMessageName + ".Publish"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "record"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._record)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._record {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerIndexMessage.Publish, rhs: PBPeerIndexMessage.Publish) -> Bool {
    if lhs._record != rhs._record {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerIndexMessage.Unpublish: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBPeerIndexMessage.protoMessageName + ".Unpublish"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "record"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._record)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._record {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerIndexMessage.Unpublish, rhs: PBPeerIndexMessage.Unpublish) -> Bool {
    if lhs._record != rhs._record {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerIndexMessage.SearchRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBPeerIndexMessage.protoMessageName + ".SearchRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.requestID)
      case 2: try decoder.decodeSingularBytesField(value: &self.hash)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.requestID != 0 {
      try visitor.visitSingularUInt64Field(value: self.requestID, fieldNumber: 1)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerIndexMessage.SearchRequest, rhs: PBPeerIndexMessage.SearchRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBPeerIndexMessage.SearchResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBPeerIndexMessage.protoMessageName + ".SearchResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "records"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.requestID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.records)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.requestID != 0 {
      try visitor.visitSingularUInt64Field(value: self.requestID, fieldNumber: 1)
    }
    if !self.records.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.records, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBPeerIndexMessage.SearchResponse, rhs: PBPeerIndexMessage.SearchResponse) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.records != rhs.records {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
