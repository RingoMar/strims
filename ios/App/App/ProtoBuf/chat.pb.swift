// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: chat.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct PBCreateChatServerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var networkKey: Data = Data()

  public var chatRoom: PBChatRoom {
    get {return _chatRoom ?? PBChatRoom()}
    set {_chatRoom = newValue}
  }
  /// Returns true if `chatRoom` has been explicitly set.
  public var hasChatRoom: Bool {return self._chatRoom != nil}
  /// Clears the value of `chatRoom`. Subsequent reads from it will return its default value.
  public mutating func clearChatRoom() {self._chatRoom = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _chatRoom: PBChatRoom? = nil
}

public struct PBCreateChatServerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chatServer: PBChatServer {
    get {return _chatServer ?? PBChatServer()}
    set {_chatServer = newValue}
  }
  /// Returns true if `chatServer` has been explicitly set.
  public var hasChatServer: Bool {return self._chatServer != nil}
  /// Clears the value of `chatServer`. Subsequent reads from it will return its default value.
  public mutating func clearChatServer() {self._chatServer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _chatServer: PBChatServer? = nil
}

public struct PBUpdateChatServerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var networkKey: Data = Data()

  public var serverKey: PBChatRoom {
    get {return _serverKey ?? PBChatRoom()}
    set {_serverKey = newValue}
  }
  /// Returns true if `serverKey` has been explicitly set.
  public var hasServerKey: Bool {return self._serverKey != nil}
  /// Clears the value of `serverKey`. Subsequent reads from it will return its default value.
  public mutating func clearServerKey() {self._serverKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _serverKey: PBChatRoom? = nil
}

public struct PBUpdateChatServerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chatServer: PBChatServer {
    get {return _chatServer ?? PBChatServer()}
    set {_chatServer = newValue}
  }
  /// Returns true if `chatServer` has been explicitly set.
  public var hasChatServer: Bool {return self._chatServer != nil}
  /// Clears the value of `chatServer`. Subsequent reads from it will return its default value.
  public mutating func clearChatServer() {self._chatServer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _chatServer: PBChatServer? = nil
}

public struct PBDeleteChatServerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBDeleteChatServerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBGetChatServerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBGetChatServerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chatServer: PBChatServer {
    get {return _chatServer ?? PBChatServer()}
    set {_chatServer = newValue}
  }
  /// Returns true if `chatServer` has been explicitly set.
  public var hasChatServer: Bool {return self._chatServer != nil}
  /// Clears the value of `chatServer`. Subsequent reads from it will return its default value.
  public mutating func clearChatServer() {self._chatServer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _chatServer: PBChatServer? = nil
}

public struct PBListChatServersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBListChatServersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chatServers: [PBChatServer] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBOpenChatServerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var server: PBChatServer {
    get {return _server ?? PBChatServer()}
    set {_server = newValue}
  }
  /// Returns true if `server` has been explicitly set.
  public var hasServer: Bool {return self._server != nil}
  /// Clears the value of `server`. Subsequent reads from it will return its default value.
  public mutating func clearServer() {self._server = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _server: PBChatServer? = nil
}

public struct PBChatServerEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var body: PBChatServerEvent.OneOf_Body? = nil

  public var `open`: PBChatServerEvent.Open {
    get {
      if case .open(let v)? = body {return v}
      return PBChatServerEvent.Open()
    }
    set {body = .open(newValue)}
  }

  public var close: PBChatServerEvent.Close {
    get {
      if case .close(let v)? = body {return v}
      return PBChatServerEvent.Close()
    }
    set {body = .close(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable {
    case `open`(PBChatServerEvent.Open)
    case close(PBChatServerEvent.Close)

  #if !swift(>=4.1)
    public static func ==(lhs: PBChatServerEvent.OneOf_Body, rhs: PBChatServerEvent.OneOf_Body) -> Bool {
      switch (lhs, rhs) {
      case (.open(let l), .open(let r)): return l == r
      case (.close(let l), .close(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct Open {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var serverID: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Close {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct PBCallChatServerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var serverID: UInt64 = 0

  public var body: PBCallChatServerRequest.OneOf_Body? = nil

  public var close: PBCallChatServerRequest.Close {
    get {
      if case .close(let v)? = body {return v}
      return PBCallChatServerRequest.Close()
    }
    set {body = .close(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable {
    case close(PBCallChatServerRequest.Close)

  #if !swift(>=4.1)
    public static func ==(lhs: PBCallChatServerRequest.OneOf_Body, rhs: PBCallChatServerRequest.OneOf_Body) -> Bool {
      switch (lhs, rhs) {
      case (.close(let l), .close(let r)): return l == r
      }
    }
  #endif
  }

  public struct Close {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct PBOpenChatClientRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var networkKey: Data = Data()

  public var serverKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBChatClientEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var body: PBChatClientEvent.OneOf_Body? = nil

  public var `open`: PBChatClientEvent.Open {
    get {
      if case .open(let v)? = body {return v}
      return PBChatClientEvent.Open()
    }
    set {body = .open(newValue)}
  }

  public var message: PBChatClientEvent.Message {
    get {
      if case .message(let v)? = body {return v}
      return PBChatClientEvent.Message()
    }
    set {body = .message(newValue)}
  }

  public var close: PBChatClientEvent.Close {
    get {
      if case .close(let v)? = body {return v}
      return PBChatClientEvent.Close()
    }
    set {body = .close(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable {
    case `open`(PBChatClientEvent.Open)
    case message(PBChatClientEvent.Message)
    case close(PBChatClientEvent.Close)

  #if !swift(>=4.1)
    public static func ==(lhs: PBChatClientEvent.OneOf_Body, rhs: PBChatClientEvent.OneOf_Body) -> Bool {
      switch (lhs, rhs) {
      case (.open(let l), .open(let r)): return l == r
      case (.message(let l), .message(let r)): return l == r
      case (.close(let l), .close(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct Open {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var clientID: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Message {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var sentTime: Int64 = 0

    public var serverTime: Int64 = 0

    public var nick: String = String()

    public var body: String = String()

    public var entities: PBMessageEntities {
      get {return _entities ?? PBMessageEntities()}
      set {_entities = newValue}
    }
    /// Returns true if `entities` has been explicitly set.
    public var hasEntities: Bool {return self._entities != nil}
    /// Clears the value of `entities`. Subsequent reads from it will return its default value.
    public mutating func clearEntities() {self._entities = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _entities: PBMessageEntities? = nil
  }

  public struct Close {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct PBChatRoom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBChatServer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var networkKey: Data = Data()

  public var key: PBKey {
    get {return _key ?? PBKey()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {self._key = nil}

  public var chatRoom: PBChatRoom {
    get {return _chatRoom ?? PBChatRoom()}
    set {_chatRoom = newValue}
  }
  /// Returns true if `chatRoom` has been explicitly set.
  public var hasChatRoom: Bool {return self._chatRoom != nil}
  /// Clears the value of `chatRoom`. Subsequent reads from it will return its default value.
  public mutating func clearChatRoom() {self._chatRoom = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _key: PBKey? = nil
  fileprivate var _chatRoom: PBChatRoom? = nil
}

public struct PBMessageEntities {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var links: [PBMessageEntities.Link] = []

  public var emotes: [PBMessageEntities.Emote] = []

  public var nicks: [PBMessageEntities.Nick] = []

  public var tags: [PBMessageEntities.Tag] = []

  public var codeBlocks: [PBMessageEntities.CodeBlock] = []

  public var spoilers: [PBMessageEntities.Spoiler] = []

  public var greenText: PBMessageEntities.GenericEntity {
    get {return _greenText ?? PBMessageEntities.GenericEntity()}
    set {_greenText = newValue}
  }
  /// Returns true if `greenText` has been explicitly set.
  public var hasGreenText: Bool {return self._greenText != nil}
  /// Clears the value of `greenText`. Subsequent reads from it will return its default value.
  public mutating func clearGreenText() {self._greenText = nil}

  public var selfMessage: PBMessageEntities.GenericEntity {
    get {return _selfMessage ?? PBMessageEntities.GenericEntity()}
    set {_selfMessage = newValue}
  }
  /// Returns true if `selfMessage` has been explicitly set.
  public var hasSelfMessage: Bool {return self._selfMessage != nil}
  /// Clears the value of `selfMessage`. Subsequent reads from it will return its default value.
  public mutating func clearSelfMessage() {self._selfMessage = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Bounds {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var start: Int64 = 0

    public var end: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Link {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bounds: PBMessageEntities.Bounds {
      get {return _bounds ?? PBMessageEntities.Bounds()}
      set {_bounds = newValue}
    }
    /// Returns true if `bounds` has been explicitly set.
    public var hasBounds: Bool {return self._bounds != nil}
    /// Clears the value of `bounds`. Subsequent reads from it will return its default value.
    public mutating func clearBounds() {self._bounds = nil}

    public var url: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _bounds: PBMessageEntities.Bounds? = nil
  }

  public struct Emote {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bounds: PBMessageEntities.Bounds {
      get {return _bounds ?? PBMessageEntities.Bounds()}
      set {_bounds = newValue}
    }
    /// Returns true if `bounds` has been explicitly set.
    public var hasBounds: Bool {return self._bounds != nil}
    /// Clears the value of `bounds`. Subsequent reads from it will return its default value.
    public mutating func clearBounds() {self._bounds = nil}

    public var name: String = String()

    public var modifiers: [String] = []

    public var combo: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _bounds: PBMessageEntities.Bounds? = nil
  }

  public struct Nick {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bounds: PBMessageEntities.Bounds {
      get {return _bounds ?? PBMessageEntities.Bounds()}
      set {_bounds = newValue}
    }
    /// Returns true if `bounds` has been explicitly set.
    public var hasBounds: Bool {return self._bounds != nil}
    /// Clears the value of `bounds`. Subsequent reads from it will return its default value.
    public mutating func clearBounds() {self._bounds = nil}

    public var nick: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _bounds: PBMessageEntities.Bounds? = nil
  }

  public struct Tag {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bounds: PBMessageEntities.Bounds {
      get {return _bounds ?? PBMessageEntities.Bounds()}
      set {_bounds = newValue}
    }
    /// Returns true if `bounds` has been explicitly set.
    public var hasBounds: Bool {return self._bounds != nil}
    /// Clears the value of `bounds`. Subsequent reads from it will return its default value.
    public mutating func clearBounds() {self._bounds = nil}

    public var name: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _bounds: PBMessageEntities.Bounds? = nil
  }

  public struct CodeBlock {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bounds: PBMessageEntities.Bounds {
      get {return _bounds ?? PBMessageEntities.Bounds()}
      set {_bounds = newValue}
    }
    /// Returns true if `bounds` has been explicitly set.
    public var hasBounds: Bool {return self._bounds != nil}
    /// Clears the value of `bounds`. Subsequent reads from it will return its default value.
    public mutating func clearBounds() {self._bounds = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _bounds: PBMessageEntities.Bounds? = nil
  }

  public struct Spoiler {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bounds: PBMessageEntities.Bounds {
      get {return _bounds ?? PBMessageEntities.Bounds()}
      set {_bounds = newValue}
    }
    /// Returns true if `bounds` has been explicitly set.
    public var hasBounds: Bool {return self._bounds != nil}
    /// Clears the value of `bounds`. Subsequent reads from it will return its default value.
    public mutating func clearBounds() {self._bounds = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _bounds: PBMessageEntities.Bounds? = nil
  }

  public struct GenericEntity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bounds: PBMessageEntities.Bounds {
      get {return _bounds ?? PBMessageEntities.Bounds()}
      set {_bounds = newValue}
    }
    /// Returns true if `bounds` has been explicitly set.
    public var hasBounds: Bool {return self._bounds != nil}
    /// Clears the value of `bounds`. Subsequent reads from it will return its default value.
    public mutating func clearBounds() {self._bounds = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _bounds: PBMessageEntities.Bounds? = nil
  }

  public init() {}

  fileprivate var _greenText: PBMessageEntities.GenericEntity? = nil
  fileprivate var _selfMessage: PBMessageEntities.GenericEntity? = nil
}

public struct PBCallChatClientRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var clientID: UInt64 = 0

  public var body: PBCallChatClientRequest.OneOf_Body? = nil

  public var message: PBCallChatClientRequest.Message {
    get {
      if case .message(let v)? = body {return v}
      return PBCallChatClientRequest.Message()
    }
    set {body = .message(newValue)}
  }

  public var close: PBCallChatClientRequest.Close {
    get {
      if case .close(let v)? = body {return v}
      return PBCallChatClientRequest.Close()
    }
    set {body = .close(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable {
    case message(PBCallChatClientRequest.Message)
    case close(PBCallChatClientRequest.Close)

  #if !swift(>=4.1)
    public static func ==(lhs: PBCallChatClientRequest.OneOf_Body, rhs: PBCallChatClientRequest.OneOf_Body) -> Bool {
      switch (lhs, rhs) {
      case (.message(let l), .message(let r)): return l == r
      case (.close(let l), .close(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct Message {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var time: Int64 = 0

    public var body: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Close {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct PBCallChatClientResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBCreateChatServerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CreateChatServerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "network_key"),
    3: .standard(proto: "chat_room"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularBytesField(value: &self.networkKey)
      case 3: try decoder.decodeSingularMessageField(value: &self._chatRoom)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.networkKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.networkKey, fieldNumber: 2)
    }
    if let v = self._chatRoom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBCreateChatServerRequest, rhs: PBCreateChatServerRequest) -> Bool {
    if lhs.networkKey != rhs.networkKey {return false}
    if lhs._chatRoom != rhs._chatRoom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBCreateChatServerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CreateChatServerResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_server"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._chatServer)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._chatServer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBCreateChatServerResponse, rhs: PBCreateChatServerResponse) -> Bool {
    if lhs._chatServer != rhs._chatServer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBUpdateChatServerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UpdateChatServerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "network_key"),
    3: .standard(proto: "server_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBytesField(value: &self.networkKey)
      case 3: try decoder.decodeSingularMessageField(value: &self._serverKey)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.networkKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.networkKey, fieldNumber: 2)
    }
    if let v = self._serverKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBUpdateChatServerRequest, rhs: PBUpdateChatServerRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.networkKey != rhs.networkKey {return false}
    if lhs._serverKey != rhs._serverKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBUpdateChatServerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "UpdateChatServerResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_server"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._chatServer)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._chatServer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBUpdateChatServerResponse, rhs: PBUpdateChatServerResponse) -> Bool {
    if lhs._chatServer != rhs._chatServer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBDeleteChatServerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "DeleteChatServerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBDeleteChatServerRequest, rhs: PBDeleteChatServerRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBDeleteChatServerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "DeleteChatServerResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBDeleteChatServerResponse, rhs: PBDeleteChatServerResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBGetChatServerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetChatServerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBGetChatServerRequest, rhs: PBGetChatServerRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBGetChatServerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetChatServerResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_server"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._chatServer)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._chatServer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBGetChatServerResponse, rhs: PBGetChatServerResponse) -> Bool {
    if lhs._chatServer != rhs._chatServer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBListChatServersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ListChatServersRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBListChatServersRequest, rhs: PBListChatServersRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBListChatServersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ListChatServersResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_servers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.chatServers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatServers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chatServers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBListChatServersResponse, rhs: PBListChatServersResponse) -> Bool {
    if lhs.chatServers != rhs.chatServers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBOpenChatServerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "OpenChatServerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "server"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._server)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._server {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBOpenChatServerRequest, rhs: PBOpenChatServerRequest) -> Bool {
    if lhs._server != rhs._server {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBChatServerEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ChatServerEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "open"),
    2: .same(proto: "close"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: PBChatServerEvent.Open?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .open(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .open(v)}
      case 2:
        var v: PBChatServerEvent.Close?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .close(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .close(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.body {
    case .open(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .close(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBChatServerEvent, rhs: PBChatServerEvent) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBChatServerEvent.Open: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBChatServerEvent.protoMessageName + ".Open"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "server_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.serverID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.serverID != 0 {
      try visitor.visitSingularUInt64Field(value: self.serverID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBChatServerEvent.Open, rhs: PBChatServerEvent.Open) -> Bool {
    if lhs.serverID != rhs.serverID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBChatServerEvent.Close: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBChatServerEvent.protoMessageName + ".Close"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBChatServerEvent.Close, rhs: PBChatServerEvent.Close) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBCallChatServerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CallChatServerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "server_id"),
    2: .same(proto: "close"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.serverID)
      case 2:
        var v: PBCallChatServerRequest.Close?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .close(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .close(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.serverID != 0 {
      try visitor.visitSingularUInt64Field(value: self.serverID, fieldNumber: 1)
    }
    if case .close(let v)? = self.body {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBCallChatServerRequest, rhs: PBCallChatServerRequest) -> Bool {
    if lhs.serverID != rhs.serverID {return false}
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBCallChatServerRequest.Close: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBCallChatServerRequest.protoMessageName + ".Close"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBCallChatServerRequest.Close, rhs: PBCallChatServerRequest.Close) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBOpenChatClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "OpenChatClientRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "network_key"),
    2: .standard(proto: "server_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.networkKey)
      case 2: try decoder.decodeSingularBytesField(value: &self.serverKey)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.networkKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.networkKey, fieldNumber: 1)
    }
    if !self.serverKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.serverKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBOpenChatClientRequest, rhs: PBOpenChatClientRequest) -> Bool {
    if lhs.networkKey != rhs.networkKey {return false}
    if lhs.serverKey != rhs.serverKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBChatClientEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ChatClientEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "open"),
    2: .same(proto: "message"),
    3: .same(proto: "close"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: PBChatClientEvent.Open?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .open(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .open(v)}
      case 2:
        var v: PBChatClientEvent.Message?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .message(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .message(v)}
      case 3:
        var v: PBChatClientEvent.Close?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .close(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .close(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.body {
    case .open(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .message(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .close(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBChatClientEvent, rhs: PBChatClientEvent) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBChatClientEvent.Open: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBChatClientEvent.protoMessageName + ".Open"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.clientID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.clientID != 0 {
      try visitor.visitSingularUInt64Field(value: self.clientID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBChatClientEvent.Open, rhs: PBChatClientEvent.Open) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBChatClientEvent.Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBChatClientEvent.protoMessageName + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sent_time"),
    2: .standard(proto: "server_time"),
    3: .same(proto: "nick"),
    4: .same(proto: "body"),
    5: .same(proto: "entities"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.sentTime)
      case 2: try decoder.decodeSingularInt64Field(value: &self.serverTime)
      case 3: try decoder.decodeSingularStringField(value: &self.nick)
      case 4: try decoder.decodeSingularStringField(value: &self.body)
      case 5: try decoder.decodeSingularMessageField(value: &self._entities)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sentTime != 0 {
      try visitor.visitSingularInt64Field(value: self.sentTime, fieldNumber: 1)
    }
    if self.serverTime != 0 {
      try visitor.visitSingularInt64Field(value: self.serverTime, fieldNumber: 2)
    }
    if !self.nick.isEmpty {
      try visitor.visitSingularStringField(value: self.nick, fieldNumber: 3)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 4)
    }
    if let v = self._entities {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBChatClientEvent.Message, rhs: PBChatClientEvent.Message) -> Bool {
    if lhs.sentTime != rhs.sentTime {return false}
    if lhs.serverTime != rhs.serverTime {return false}
    if lhs.nick != rhs.nick {return false}
    if lhs.body != rhs.body {return false}
    if lhs._entities != rhs._entities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBChatClientEvent.Close: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBChatClientEvent.protoMessageName + ".Close"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBChatClientEvent.Close, rhs: PBChatClientEvent.Close) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBChatRoom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ChatRoom"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBChatRoom, rhs: PBChatRoom) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBChatServer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ChatServer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "network_key"),
    3: .same(proto: "key"),
    4: .standard(proto: "chat_room"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBytesField(value: &self.networkKey)
      case 3: try decoder.decodeSingularMessageField(value: &self._key)
      case 4: try decoder.decodeSingularMessageField(value: &self._chatRoom)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.networkKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.networkKey, fieldNumber: 2)
    }
    if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._chatRoom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBChatServer, rhs: PBChatServer) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.networkKey != rhs.networkKey {return false}
    if lhs._key != rhs._key {return false}
    if lhs._chatRoom != rhs._chatRoom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBMessageEntities: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "MessageEntities"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "links"),
    2: .same(proto: "emotes"),
    3: .same(proto: "nicks"),
    4: .same(proto: "tags"),
    5: .standard(proto: "code_blocks"),
    6: .same(proto: "spoilers"),
    7: .standard(proto: "green_text"),
    8: .standard(proto: "self_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.links)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.emotes)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.nicks)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.tags)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.codeBlocks)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.spoilers)
      case 7: try decoder.decodeSingularMessageField(value: &self._greenText)
      case 8: try decoder.decodeSingularMessageField(value: &self._selfMessage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.links.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.links, fieldNumber: 1)
    }
    if !self.emotes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.emotes, fieldNumber: 2)
    }
    if !self.nicks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nicks, fieldNumber: 3)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 4)
    }
    if !self.codeBlocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.codeBlocks, fieldNumber: 5)
    }
    if !self.spoilers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.spoilers, fieldNumber: 6)
    }
    if let v = self._greenText {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._selfMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBMessageEntities, rhs: PBMessageEntities) -> Bool {
    if lhs.links != rhs.links {return false}
    if lhs.emotes != rhs.emotes {return false}
    if lhs.nicks != rhs.nicks {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.codeBlocks != rhs.codeBlocks {return false}
    if lhs.spoilers != rhs.spoilers {return false}
    if lhs._greenText != rhs._greenText {return false}
    if lhs._selfMessage != rhs._selfMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBMessageEntities.Bounds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBMessageEntities.protoMessageName + ".Bounds"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.start)
      case 2: try decoder.decodeSingularInt64Field(value: &self.end)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.start != 0 {
      try visitor.visitSingularInt64Field(value: self.start, fieldNumber: 1)
    }
    if self.end != 0 {
      try visitor.visitSingularInt64Field(value: self.end, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBMessageEntities.Bounds, rhs: PBMessageEntities.Bounds) -> Bool {
    if lhs.start != rhs.start {return false}
    if lhs.end != rhs.end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBMessageEntities.Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBMessageEntities.protoMessageName + ".Link"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
    2: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bounds)
      case 2: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bounds {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBMessageEntities.Link, rhs: PBMessageEntities.Link) -> Bool {
    if lhs._bounds != rhs._bounds {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBMessageEntities.Emote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBMessageEntities.protoMessageName + ".Emote"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
    2: .same(proto: "name"),
    3: .same(proto: "modifiers"),
    4: .same(proto: "combo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bounds)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeRepeatedStringField(value: &self.modifiers)
      case 4: try decoder.decodeSingularInt64Field(value: &self.combo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bounds {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.modifiers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.modifiers, fieldNumber: 3)
    }
    if self.combo != 0 {
      try visitor.visitSingularInt64Field(value: self.combo, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBMessageEntities.Emote, rhs: PBMessageEntities.Emote) -> Bool {
    if lhs._bounds != rhs._bounds {return false}
    if lhs.name != rhs.name {return false}
    if lhs.modifiers != rhs.modifiers {return false}
    if lhs.combo != rhs.combo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBMessageEntities.Nick: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBMessageEntities.protoMessageName + ".Nick"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
    2: .same(proto: "nick"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bounds)
      case 2: try decoder.decodeSingularStringField(value: &self.nick)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bounds {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.nick.isEmpty {
      try visitor.visitSingularStringField(value: self.nick, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBMessageEntities.Nick, rhs: PBMessageEntities.Nick) -> Bool {
    if lhs._bounds != rhs._bounds {return false}
    if lhs.nick != rhs.nick {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBMessageEntities.Tag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBMessageEntities.protoMessageName + ".Tag"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bounds)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bounds {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBMessageEntities.Tag, rhs: PBMessageEntities.Tag) -> Bool {
    if lhs._bounds != rhs._bounds {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBMessageEntities.CodeBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBMessageEntities.protoMessageName + ".CodeBlock"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bounds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bounds {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBMessageEntities.CodeBlock, rhs: PBMessageEntities.CodeBlock) -> Bool {
    if lhs._bounds != rhs._bounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBMessageEntities.Spoiler: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBMessageEntities.protoMessageName + ".Spoiler"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bounds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bounds {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBMessageEntities.Spoiler, rhs: PBMessageEntities.Spoiler) -> Bool {
    if lhs._bounds != rhs._bounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBMessageEntities.GenericEntity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBMessageEntities.protoMessageName + ".GenericEntity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bounds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bounds {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBMessageEntities.GenericEntity, rhs: PBMessageEntities.GenericEntity) -> Bool {
    if lhs._bounds != rhs._bounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBCallChatClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CallChatClientRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .same(proto: "message"),
    3: .same(proto: "close"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.clientID)
      case 2:
        var v: PBCallChatClientRequest.Message?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .message(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .message(v)}
      case 3:
        var v: PBCallChatClientRequest.Close?
        if let current = self.body {
          try decoder.handleConflictingOneOf()
          if case .close(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.body = .close(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.clientID != 0 {
      try visitor.visitSingularUInt64Field(value: self.clientID, fieldNumber: 1)
    }
    switch self.body {
    case .message(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .close(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBCallChatClientRequest, rhs: PBCallChatClientRequest) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBCallChatClientRequest.Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBCallChatClientRequest.protoMessageName + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
    2: .same(proto: "body"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.time)
      case 2: try decoder.decodeSingularStringField(value: &self.body)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 1)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBCallChatClientRequest.Message, rhs: PBCallChatClientRequest.Message) -> Bool {
    if lhs.time != rhs.time {return false}
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBCallChatClientRequest.Close: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = PBCallChatClientRequest.protoMessageName + ".Close"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBCallChatClientRequest.Close, rhs: PBCallChatClientRequest.Close) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBCallChatClientResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CallChatClientResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBCallChatClientResponse, rhs: PBCallChatClientResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
