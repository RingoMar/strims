// Code generated by Wire protocol buffer compiler, do not edit.
// Source: strims.vpn.v1.PeerIndexMessage in vpn/v1/peer_index.proto
package gg.strims.vpn.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.countNonNull
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class PeerIndexMessage(
  @field:WireField(
    tag = 1,
    adapter = "gg.strims.vpn.v1.PeerIndexMessage${'$'}Publish#ADAPTER"
  )
  val publish: Publish? = null,
  @field:WireField(
    tag = 2,
    adapter = "gg.strims.vpn.v1.PeerIndexMessage${'$'}Unpublish#ADAPTER"
  )
  val unpublish: Unpublish? = null,
  @field:WireField(
    tag = 3,
    adapter = "gg.strims.vpn.v1.PeerIndexMessage${'$'}SearchRequest#ADAPTER",
    jsonName = "searchRequest"
  )
  val search_request: SearchRequest? = null,
  @field:WireField(
    tag = 4,
    adapter = "gg.strims.vpn.v1.PeerIndexMessage${'$'}SearchResponse#ADAPTER",
    jsonName = "searchResponse"
  )
  val search_response: SearchResponse? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<PeerIndexMessage, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(publish, unpublish, search_request, search_response) <= 1) {
      "At most one of publish, unpublish, search_request, search_response may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is PeerIndexMessage) return false
    if (unknownFields != other.unknownFields) return false
    if (publish != other.publish) return false
    if (unpublish != other.unpublish) return false
    if (search_request != other.search_request) return false
    if (search_response != other.search_response) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + publish.hashCode()
      result = result * 37 + unpublish.hashCode()
      result = result * 37 + search_request.hashCode()
      result = result * 37 + search_response.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (publish != null) result += """publish=$publish"""
    if (unpublish != null) result += """unpublish=$unpublish"""
    if (search_request != null) result += """search_request=$search_request"""
    if (search_response != null) result += """search_response=$search_response"""
    return result.joinToString(prefix = "PeerIndexMessage{", separator = ", ", postfix = "}")
  }

  fun copy(
    publish: Publish? = this.publish,
    unpublish: Unpublish? = this.unpublish,
    search_request: SearchRequest? = this.search_request,
    search_response: SearchResponse? = this.search_response,
    unknownFields: ByteString = this.unknownFields
  ): PeerIndexMessage = PeerIndexMessage(publish, unpublish, search_request, search_response,
      unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<PeerIndexMessage> = object : ProtoAdapter<PeerIndexMessage>(
      FieldEncoding.LENGTH_DELIMITED, 
      PeerIndexMessage::class, 
      "type.googleapis.com/strims.vpn.v1.PeerIndexMessage", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: PeerIndexMessage): Int {
        var size = value.unknownFields.size
        size += Publish.ADAPTER.encodedSizeWithTag(1, value.publish)
        size += Unpublish.ADAPTER.encodedSizeWithTag(2, value.unpublish)
        size += SearchRequest.ADAPTER.encodedSizeWithTag(3, value.search_request)
        size += SearchResponse.ADAPTER.encodedSizeWithTag(4, value.search_response)
        return size
      }

      override fun encode(writer: ProtoWriter, value: PeerIndexMessage) {
        Publish.ADAPTER.encodeWithTag(writer, 1, value.publish)
        Unpublish.ADAPTER.encodeWithTag(writer, 2, value.unpublish)
        SearchRequest.ADAPTER.encodeWithTag(writer, 3, value.search_request)
        SearchResponse.ADAPTER.encodeWithTag(writer, 4, value.search_response)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): PeerIndexMessage {
        var publish: Publish? = null
        var unpublish: Unpublish? = null
        var search_request: SearchRequest? = null
        var search_response: SearchResponse? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> publish = Publish.ADAPTER.decode(reader)
            2 -> unpublish = Unpublish.ADAPTER.decode(reader)
            3 -> search_request = SearchRequest.ADAPTER.decode(reader)
            4 -> search_response = SearchResponse.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return PeerIndexMessage(
          publish = publish,
          unpublish = unpublish,
          search_request = search_request,
          search_response = search_response,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: PeerIndexMessage): PeerIndexMessage = value.copy(
        publish = value.publish?.let(Publish.ADAPTER::redact),
        unpublish = value.unpublish?.let(Unpublish.ADAPTER::redact),
        search_request = value.search_request?.let(SearchRequest.ADAPTER::redact),
        search_response = value.search_response?.let(SearchResponse.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  class Record(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY
    )
    val hash: ByteString = ByteString.EMPTY,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY
    )
    val key: ByteString = ByteString.EMPTY,
    @field:WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "hostId"
    )
    val host_id: ByteString = ByteString.EMPTY,
    @field:WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.OMIT_IDENTITY
    )
    val port: Int = 0,
    @field:WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT64",
      label = WireField.Label.OMIT_IDENTITY
    )
    val timestamp: Long = 0L,
    @field:WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY
    )
    val signature: ByteString = ByteString.EMPTY,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Record, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Record) return false
      if (unknownFields != other.unknownFields) return false
      if (hash != other.hash) return false
      if (key != other.key) return false
      if (host_id != other.host_id) return false
      if (port != other.port) return false
      if (timestamp != other.timestamp) return false
      if (signature != other.signature) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + hash.hashCode()
        result = result * 37 + key.hashCode()
        result = result * 37 + host_id.hashCode()
        result = result * 37 + port.hashCode()
        result = result * 37 + timestamp.hashCode()
        result = result * 37 + signature.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """hash=$hash"""
      result += """key=$key"""
      result += """host_id=$host_id"""
      result += """port=$port"""
      result += """timestamp=$timestamp"""
      result += """signature=$signature"""
      return result.joinToString(prefix = "Record{", separator = ", ", postfix = "}")
    }

    fun copy(
      hash: ByteString = this.hash,
      key: ByteString = this.key,
      host_id: ByteString = this.host_id,
      port: Int = this.port,
      timestamp: Long = this.timestamp,
      signature: ByteString = this.signature,
      unknownFields: ByteString = this.unknownFields
    ): Record = Record(hash, key, host_id, port, timestamp, signature, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Record> = object : ProtoAdapter<Record>(
        FieldEncoding.LENGTH_DELIMITED, 
        Record::class, 
        "type.googleapis.com/strims.vpn.v1.PeerIndexMessage.Record", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Record): Int {
          var size = value.unknownFields.size
          if (value.hash != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(1,
              value.hash)
          if (value.key != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(2,
              value.key)
          if (value.host_id != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(3,
              value.host_id)
          if (value.port != 0) size += ProtoAdapter.UINT32.encodedSizeWithTag(4, value.port)
          if (value.timestamp != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(5,
              value.timestamp)
          if (value.signature != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(6,
              value.signature)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Record) {
          if (value.hash != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 1,
              value.hash)
          if (value.key != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.key)
          if (value.host_id != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 3,
              value.host_id)
          if (value.port != 0) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.port)
          if (value.timestamp != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 5, value.timestamp)
          if (value.signature != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 6,
              value.signature)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Record {
          var hash: ByteString = ByteString.EMPTY
          var key: ByteString = ByteString.EMPTY
          var host_id: ByteString = ByteString.EMPTY
          var port: Int = 0
          var timestamp: Long = 0L
          var signature: ByteString = ByteString.EMPTY
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> hash = ProtoAdapter.BYTES.decode(reader)
              2 -> key = ProtoAdapter.BYTES.decode(reader)
              3 -> host_id = ProtoAdapter.BYTES.decode(reader)
              4 -> port = ProtoAdapter.UINT32.decode(reader)
              5 -> timestamp = ProtoAdapter.INT64.decode(reader)
              6 -> signature = ProtoAdapter.BYTES.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Record(
            hash = hash,
            key = key,
            host_id = host_id,
            port = port,
            timestamp = timestamp,
            signature = signature,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Record): Record = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Publish(
    @field:WireField(
      tag = 1,
      adapter = "gg.strims.vpn.v1.PeerIndexMessage${'$'}Record#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
    )
    val record: Record? = null,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Publish, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Publish) return false
      if (unknownFields != other.unknownFields) return false
      if (record != other.record) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + record.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (record != null) result += """record=$record"""
      return result.joinToString(prefix = "Publish{", separator = ", ", postfix = "}")
    }

    fun copy(record: Record? = this.record, unknownFields: ByteString = this.unknownFields): Publish
        = Publish(record, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Publish> = object : ProtoAdapter<Publish>(
        FieldEncoding.LENGTH_DELIMITED, 
        Publish::class, 
        "type.googleapis.com/strims.vpn.v1.PeerIndexMessage.Publish", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Publish): Int {
          var size = value.unknownFields.size
          if (value.record != null) size += Record.ADAPTER.encodedSizeWithTag(1, value.record)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Publish) {
          if (value.record != null) Record.ADAPTER.encodeWithTag(writer, 1, value.record)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Publish {
          var record: Record? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> record = Record.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Publish(
            record = record,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Publish): Publish = value.copy(
          record = value.record?.let(Record.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Unpublish(
    @field:WireField(
      tag = 1,
      adapter = "gg.strims.vpn.v1.PeerIndexMessage${'$'}Record#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
    )
    val record: Record? = null,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Unpublish, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Unpublish) return false
      if (unknownFields != other.unknownFields) return false
      if (record != other.record) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + record.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (record != null) result += """record=$record"""
      return result.joinToString(prefix = "Unpublish{", separator = ", ", postfix = "}")
    }

    fun copy(record: Record? = this.record, unknownFields: ByteString = this.unknownFields):
        Unpublish = Unpublish(record, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Unpublish> = object : ProtoAdapter<Unpublish>(
        FieldEncoding.LENGTH_DELIMITED, 
        Unpublish::class, 
        "type.googleapis.com/strims.vpn.v1.PeerIndexMessage.Unpublish", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Unpublish): Int {
          var size = value.unknownFields.size
          if (value.record != null) size += Record.ADAPTER.encodedSizeWithTag(1, value.record)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Unpublish) {
          if (value.record != null) Record.ADAPTER.encodeWithTag(writer, 1, value.record)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Unpublish {
          var record: Record? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> record = Record.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Unpublish(
            record = record,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Unpublish): Unpublish = value.copy(
          record = value.record?.let(Record.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class SearchRequest(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "requestId"
    )
    val request_id: Long = 0L,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY
    )
    val hash: ByteString = ByteString.EMPTY,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<SearchRequest, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is SearchRequest) return false
      if (unknownFields != other.unknownFields) return false
      if (request_id != other.request_id) return false
      if (hash != other.hash) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + request_id.hashCode()
        result = result * 37 + hash.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """request_id=$request_id"""
      result += """hash=$hash"""
      return result.joinToString(prefix = "SearchRequest{", separator = ", ", postfix = "}")
    }

    fun copy(
      request_id: Long = this.request_id,
      hash: ByteString = this.hash,
      unknownFields: ByteString = this.unknownFields
    ): SearchRequest = SearchRequest(request_id, hash, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<SearchRequest> = object : ProtoAdapter<SearchRequest>(
        FieldEncoding.LENGTH_DELIMITED, 
        SearchRequest::class, 
        "type.googleapis.com/strims.vpn.v1.PeerIndexMessage.SearchRequest", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: SearchRequest): Int {
          var size = value.unknownFields.size
          if (value.request_id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1,
              value.request_id)
          if (value.hash != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(2,
              value.hash)
          return size
        }

        override fun encode(writer: ProtoWriter, value: SearchRequest) {
          if (value.request_id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.request_id)
          if (value.hash != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
              value.hash)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): SearchRequest {
          var request_id: Long = 0L
          var hash: ByteString = ByteString.EMPTY
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> request_id = ProtoAdapter.UINT64.decode(reader)
              2 -> hash = ProtoAdapter.BYTES.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return SearchRequest(
            request_id = request_id,
            hash = hash,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: SearchRequest): SearchRequest = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class SearchResponse(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "requestId"
    )
    val request_id: Long = 0L,
    records: List<Record> = emptyList(),
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<SearchResponse, Nothing>(ADAPTER, unknownFields) {
    @field:WireField(
      tag = 2,
      adapter = "gg.strims.vpn.v1.PeerIndexMessage${'$'}Record#ADAPTER",
      label = WireField.Label.REPEATED
    )
    val records: List<Record> = immutableCopyOf("records", records)

    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is SearchResponse) return false
      if (unknownFields != other.unknownFields) return false
      if (request_id != other.request_id) return false
      if (records != other.records) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + request_id.hashCode()
        result = result * 37 + records.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """request_id=$request_id"""
      if (records.isNotEmpty()) result += """records=$records"""
      return result.joinToString(prefix = "SearchResponse{", separator = ", ", postfix = "}")
    }

    fun copy(
      request_id: Long = this.request_id,
      records: List<Record> = this.records,
      unknownFields: ByteString = this.unknownFields
    ): SearchResponse = SearchResponse(request_id, records, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<SearchResponse> = object : ProtoAdapter<SearchResponse>(
        FieldEncoding.LENGTH_DELIMITED, 
        SearchResponse::class, 
        "type.googleapis.com/strims.vpn.v1.PeerIndexMessage.SearchResponse", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: SearchResponse): Int {
          var size = value.unknownFields.size
          if (value.request_id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1,
              value.request_id)
          size += Record.ADAPTER.asRepeated().encodedSizeWithTag(2, value.records)
          return size
        }

        override fun encode(writer: ProtoWriter, value: SearchResponse) {
          if (value.request_id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.request_id)
          Record.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.records)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): SearchResponse {
          var request_id: Long = 0L
          val records = mutableListOf<Record>()
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> request_id = ProtoAdapter.UINT64.decode(reader)
              2 -> records.add(Record.ADAPTER.decode(reader))
              else -> reader.readUnknownField(tag)
            }
          }
          return SearchResponse(
            request_id = request_id,
            records = records,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: SearchResponse): SearchResponse = value.copy(
          records = value.records.redactElements(Record.ADAPTER),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
