// Code generated by Wire protocol buffer compiler, do not edit.
// Source: strims.type.Key in type/key.proto
package gg.strims.type

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class Key(
  @field:WireField(
    tag = 1,
    adapter = "gg.strims.type.KeyType#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val type: KeyType = KeyType.KEY_TYPE_UNDEFINED,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY
  )
  val private: ByteString = ByteString.EMPTY,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY
  )
  val public: ByteString = ByteString.EMPTY,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Key, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Key) return false
    if (unknownFields != other.unknownFields) return false
    if (type != other.type) return false
    if (private != other.private) return false
    if (public != other.public) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + type.hashCode()
      result = result * 37 + private.hashCode()
      result = result * 37 + public.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """type=$type"""
    result += """private=$private"""
    result += """public=$public"""
    return result.joinToString(prefix = "Key{", separator = ", ", postfix = "}")
  }

  fun copy(
    type: KeyType = this.type,
    private: ByteString = this.private,
    public: ByteString = this.public,
    unknownFields: ByteString = this.unknownFields
  ): Key = Key(type, private, public, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Key> = object : ProtoAdapter<Key>(
      FieldEncoding.LENGTH_DELIMITED, 
      Key::class, 
      "type.googleapis.com/strims.type.Key", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: Key): Int {
        var size = value.unknownFields.size
        if (value.type != KeyType.KEY_TYPE_UNDEFINED) size += KeyType.ADAPTER.encodedSizeWithTag(1,
            value.type)
        if (value.private != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(2,
            value.private)
        if (value.public != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(3,
            value.public)
        return size
      }

      override fun encode(writer: ProtoWriter, value: Key) {
        if (value.type != KeyType.KEY_TYPE_UNDEFINED) KeyType.ADAPTER.encodeWithTag(writer, 1,
            value.type)
        if (value.private != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
            value.private)
        if (value.public != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 3,
            value.public)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Key {
        var type: KeyType = KeyType.KEY_TYPE_UNDEFINED
        var private: ByteString = ByteString.EMPTY
        var public: ByteString = ByteString.EMPTY
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              type = KeyType.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> private = ProtoAdapter.BYTES.decode(reader)
            3 -> public = ProtoAdapter.BYTES.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Key(
          type = type,
          private = private,
          public = public,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Key): Key = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
