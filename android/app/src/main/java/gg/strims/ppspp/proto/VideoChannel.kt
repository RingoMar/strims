// Code generated by Wire protocol buffer compiler, do not edit.
// Source: VideoChannel in video.proto
package gg.strims.ppspp.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.countNonNull
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class VideoChannel(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  val id: Long = 0L,
  @field:WireField(
    tag = 2,
    adapter = "gg.strims.ppspp.proto.Key#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY
  )
  val key: Key? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY
  )
  val token: ByteString = ByteString.EMPTY,
  @field:WireField(
    tag = 4,
    adapter = "gg.strims.ppspp.proto.DirectoryListingSnippet#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "directoryListingSnippet"
  )
  val directory_listing_snippet: DirectoryListingSnippet? = null,
  @field:WireField(
    tag = 1001,
    adapter = "gg.strims.ppspp.proto.VideoChannel${'$'}Local#ADAPTER"
  )
  val local: Local? = null,
  @field:WireField(
    tag = 1002,
    adapter = "gg.strims.ppspp.proto.VideoChannel${'$'}LocalShare#ADAPTER",
    jsonName = "localShare"
  )
  val local_share: LocalShare? = null,
  @field:WireField(
    tag = 1003,
    adapter = "gg.strims.ppspp.proto.VideoChannel${'$'}RemoteShare#ADAPTER",
    jsonName = "remoteShare"
  )
  val remote_share: RemoteShare? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<VideoChannel, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(local, local_share, remote_share) <= 1) {
      "At most one of local, local_share, remote_share may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is VideoChannel) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (key != other.key) return false
    if (token != other.token) return false
    if (directory_listing_snippet != other.directory_listing_snippet) return false
    if (local != other.local) return false
    if (local_share != other.local_share) return false
    if (remote_share != other.remote_share) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + key.hashCode()
      result = result * 37 + token.hashCode()
      result = result * 37 + directory_listing_snippet.hashCode()
      result = result * 37 + local.hashCode()
      result = result * 37 + local_share.hashCode()
      result = result * 37 + remote_share.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=$id"""
    if (key != null) result += """key=$key"""
    result += """token=$token"""
    if (directory_listing_snippet != null) result +=
        """directory_listing_snippet=$directory_listing_snippet"""
    if (local != null) result += """local=$local"""
    if (local_share != null) result += """local_share=$local_share"""
    if (remote_share != null) result += """remote_share=$remote_share"""
    return result.joinToString(prefix = "VideoChannel{", separator = ", ", postfix = "}")
  }

  fun copy(
    id: Long = this.id,
    key: Key? = this.key,
    token: ByteString = this.token,
    directory_listing_snippet: DirectoryListingSnippet? = this.directory_listing_snippet,
    local: Local? = this.local,
    local_share: LocalShare? = this.local_share,
    remote_share: RemoteShare? = this.remote_share,
    unknownFields: ByteString = this.unknownFields
  ): VideoChannel = VideoChannel(id, key, token, directory_listing_snippet, local, local_share,
      remote_share, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<VideoChannel> = object : ProtoAdapter<VideoChannel>(
      FieldEncoding.LENGTH_DELIMITED, 
      VideoChannel::class, 
      "type.googleapis.com/VideoChannel", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: VideoChannel): Int {
        var size = value.unknownFields.size
        if (value.id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id)
        if (value.key != null) size += Key.ADAPTER.encodedSizeWithTag(2, value.key)
        if (value.token != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(3,
            value.token)
        if (value.directory_listing_snippet != null) size +=
            DirectoryListingSnippet.ADAPTER.encodedSizeWithTag(4, value.directory_listing_snippet)
        size += Local.ADAPTER.encodedSizeWithTag(1001, value.local)
        size += LocalShare.ADAPTER.encodedSizeWithTag(1002, value.local_share)
        size += RemoteShare.ADAPTER.encodedSizeWithTag(1003, value.remote_share)
        return size
      }

      override fun encode(writer: ProtoWriter, value: VideoChannel) {
        if (value.id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id)
        if (value.key != null) Key.ADAPTER.encodeWithTag(writer, 2, value.key)
        if (value.token != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 3,
            value.token)
        if (value.directory_listing_snippet != null)
            DirectoryListingSnippet.ADAPTER.encodeWithTag(writer, 4,
            value.directory_listing_snippet)
        Local.ADAPTER.encodeWithTag(writer, 1001, value.local)
        LocalShare.ADAPTER.encodeWithTag(writer, 1002, value.local_share)
        RemoteShare.ADAPTER.encodeWithTag(writer, 1003, value.remote_share)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): VideoChannel {
        var id: Long = 0L
        var key: Key? = null
        var token: ByteString = ByteString.EMPTY
        var directory_listing_snippet: DirectoryListingSnippet? = null
        var local: Local? = null
        var local_share: LocalShare? = null
        var remote_share: RemoteShare? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.UINT64.decode(reader)
            2 -> key = Key.ADAPTER.decode(reader)
            3 -> token = ProtoAdapter.BYTES.decode(reader)
            4 -> directory_listing_snippet = DirectoryListingSnippet.ADAPTER.decode(reader)
            1001 -> local = Local.ADAPTER.decode(reader)
            1002 -> local_share = LocalShare.ADAPTER.decode(reader)
            1003 -> remote_share = RemoteShare.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return VideoChannel(
          id = id,
          key = key,
          token = token,
          directory_listing_snippet = directory_listing_snippet,
          local = local,
          local_share = local_share,
          remote_share = remote_share,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: VideoChannel): VideoChannel = value.copy(
        key = value.key?.let(Key.ADAPTER::redact),
        directory_listing_snippet =
            value.directory_listing_snippet?.let(DirectoryListingSnippet.ADAPTER::redact),
        local = value.local?.let(Local.ADAPTER::redact),
        local_share = value.local_share?.let(LocalShare.ADAPTER::redact),
        remote_share = value.remote_share?.let(RemoteShare.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  class Local(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "authKey"
    )
    val auth_key: ByteString = ByteString.EMPTY,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "networkKey"
    )
    val network_key: ByteString = ByteString.EMPTY,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Local, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Local) return false
      if (unknownFields != other.unknownFields) return false
      if (auth_key != other.auth_key) return false
      if (network_key != other.network_key) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + auth_key.hashCode()
        result = result * 37 + network_key.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """auth_key=$auth_key"""
      result += """network_key=$network_key"""
      return result.joinToString(prefix = "Local{", separator = ", ", postfix = "}")
    }

    fun copy(
      auth_key: ByteString = this.auth_key,
      network_key: ByteString = this.network_key,
      unknownFields: ByteString = this.unknownFields
    ): Local = Local(auth_key, network_key, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Local> = object : ProtoAdapter<Local>(
        FieldEncoding.LENGTH_DELIMITED, 
        Local::class, 
        "type.googleapis.com/VideoChannel.Local", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Local): Int {
          var size = value.unknownFields.size
          if (value.auth_key != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(1,
              value.auth_key)
          if (value.network_key != ByteString.EMPTY) size +=
              ProtoAdapter.BYTES.encodedSizeWithTag(2, value.network_key)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Local) {
          if (value.auth_key != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 1,
              value.auth_key)
          if (value.network_key != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
              value.network_key)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Local {
          var auth_key: ByteString = ByteString.EMPTY
          var network_key: ByteString = ByteString.EMPTY
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> auth_key = ProtoAdapter.BYTES.decode(reader)
              2 -> network_key = ProtoAdapter.BYTES.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Local(
            auth_key = auth_key,
            network_key = network_key,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Local): Local = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class LocalShare(
    @field:WireField(
      tag = 1,
      adapter = "gg.strims.ppspp.proto.Certificate#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
    )
    val certificate: Certificate? = null,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<LocalShare, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is LocalShare) return false
      if (unknownFields != other.unknownFields) return false
      if (certificate != other.certificate) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + certificate.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (certificate != null) result += """certificate=$certificate"""
      return result.joinToString(prefix = "LocalShare{", separator = ", ", postfix = "}")
    }

    fun copy(certificate: Certificate? = this.certificate, unknownFields: ByteString =
        this.unknownFields): LocalShare = LocalShare(certificate, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<LocalShare> = object : ProtoAdapter<LocalShare>(
        FieldEncoding.LENGTH_DELIMITED, 
        LocalShare::class, 
        "type.googleapis.com/VideoChannel.LocalShare", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: LocalShare): Int {
          var size = value.unknownFields.size
          if (value.certificate != null) size += Certificate.ADAPTER.encodedSizeWithTag(1,
              value.certificate)
          return size
        }

        override fun encode(writer: ProtoWriter, value: LocalShare) {
          if (value.certificate != null) Certificate.ADAPTER.encodeWithTag(writer, 1,
              value.certificate)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): LocalShare {
          var certificate: Certificate? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> certificate = Certificate.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return LocalShare(
            certificate = certificate,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: LocalShare): LocalShare = value.copy(
          certificate = value.certificate?.let(Certificate.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class RemoteShare(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.OMIT_IDENTITY
    )
    val id: Long = 0L,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "networkKey"
    )
    val network_key: ByteString = ByteString.EMPTY,
    @field:WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "serviceKey"
    )
    val service_key: ByteString = ByteString.EMPTY,
    @field:WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "serviceSalt"
    )
    val service_salt: ByteString = ByteString.EMPTY,
    @field:WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "serverAddr"
    )
    val server_addr: String = "",
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<RemoteShare, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is RemoteShare) return false
      if (unknownFields != other.unknownFields) return false
      if (id != other.id) return false
      if (network_key != other.network_key) return false
      if (service_key != other.service_key) return false
      if (service_salt != other.service_salt) return false
      if (server_addr != other.server_addr) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + id.hashCode()
        result = result * 37 + network_key.hashCode()
        result = result * 37 + service_key.hashCode()
        result = result * 37 + service_salt.hashCode()
        result = result * 37 + server_addr.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """id=$id"""
      result += """network_key=$network_key"""
      result += """service_key=$service_key"""
      result += """service_salt=$service_salt"""
      result += """server_addr=${sanitize(server_addr)}"""
      return result.joinToString(prefix = "RemoteShare{", separator = ", ", postfix = "}")
    }

    fun copy(
      id: Long = this.id,
      network_key: ByteString = this.network_key,
      service_key: ByteString = this.service_key,
      service_salt: ByteString = this.service_salt,
      server_addr: String = this.server_addr,
      unknownFields: ByteString = this.unknownFields
    ): RemoteShare = RemoteShare(id, network_key, service_key, service_salt, server_addr,
        unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<RemoteShare> = object : ProtoAdapter<RemoteShare>(
        FieldEncoding.LENGTH_DELIMITED, 
        RemoteShare::class, 
        "type.googleapis.com/VideoChannel.RemoteShare", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: RemoteShare): Int {
          var size = value.unknownFields.size
          if (value.id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id)
          if (value.network_key != ByteString.EMPTY) size +=
              ProtoAdapter.BYTES.encodedSizeWithTag(2, value.network_key)
          if (value.service_key != ByteString.EMPTY) size +=
              ProtoAdapter.BYTES.encodedSizeWithTag(3, value.service_key)
          if (value.service_salt != ByteString.EMPTY) size +=
              ProtoAdapter.BYTES.encodedSizeWithTag(4, value.service_salt)
          if (value.server_addr != "") size += ProtoAdapter.STRING.encodedSizeWithTag(5,
              value.server_addr)
          return size
        }

        override fun encode(writer: ProtoWriter, value: RemoteShare) {
          if (value.id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id)
          if (value.network_key != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
              value.network_key)
          if (value.service_key != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 3,
              value.service_key)
          if (value.service_salt != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 4,
              value.service_salt)
          if (value.server_addr != "") ProtoAdapter.STRING.encodeWithTag(writer, 5,
              value.server_addr)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): RemoteShare {
          var id: Long = 0L
          var network_key: ByteString = ByteString.EMPTY
          var service_key: ByteString = ByteString.EMPTY
          var service_salt: ByteString = ByteString.EMPTY
          var server_addr: String = ""
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> id = ProtoAdapter.UINT64.decode(reader)
              2 -> network_key = ProtoAdapter.BYTES.decode(reader)
              3 -> service_key = ProtoAdapter.BYTES.decode(reader)
              4 -> service_salt = ProtoAdapter.BYTES.decode(reader)
              5 -> server_addr = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return RemoteShare(
            id = id,
            network_key = network_key,
            service_key = service_key,
            service_salt = service_salt,
            server_addr = server_addr,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: RemoteShare): RemoteShare = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
