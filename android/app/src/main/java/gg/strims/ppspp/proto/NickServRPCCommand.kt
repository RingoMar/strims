// Code generated by Wire protocol buffer compiler, do not edit.
// Source: NickServRPCCommand in nickserv.proto
package gg.strims.ppspp.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.countNonNull
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class NickServRPCCommand(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "requestId"
  )
  val request_id: Long = 0L,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "sourcePublicKey"
  )
  val source_public_key: ByteString = ByteString.EMPTY,
  @field:WireField(
    tag = 5,
    adapter = "gg.strims.ppspp.proto.NickServRPCCommand${'$'}Create#ADAPTER"
  )
  val create: Create? = null,
  @field:WireField(
    tag = 6,
    adapter = "gg.strims.ppspp.proto.NickServRPCCommand${'$'}Retrieve#ADAPTER"
  )
  val retrieve: Retrieve? = null,
  @field:WireField(
    tag = 7,
    adapter = "gg.strims.ppspp.proto.NickServRPCCommand${'$'}Update#ADAPTER"
  )
  val update: Update? = null,
  @field:WireField(
    tag = 8,
    adapter = "gg.strims.ppspp.proto.NickServRPCCommand${'$'}Delete#ADAPTER"
  )
  val delete: Delete? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<NickServRPCCommand, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(create, retrieve, update, delete) <= 1) {
      "At most one of create, retrieve, update, delete may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is NickServRPCCommand) return false
    if (unknownFields != other.unknownFields) return false
    if (request_id != other.request_id) return false
    if (source_public_key != other.source_public_key) return false
    if (create != other.create) return false
    if (retrieve != other.retrieve) return false
    if (update != other.update) return false
    if (delete != other.delete) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + request_id.hashCode()
      result = result * 37 + source_public_key.hashCode()
      result = result * 37 + create.hashCode()
      result = result * 37 + retrieve.hashCode()
      result = result * 37 + update.hashCode()
      result = result * 37 + delete.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """request_id=$request_id"""
    result += """source_public_key=$source_public_key"""
    if (create != null) result += """create=$create"""
    if (retrieve != null) result += """retrieve=$retrieve"""
    if (update != null) result += """update=$update"""
    if (delete != null) result += """delete=$delete"""
    return result.joinToString(prefix = "NickServRPCCommand{", separator = ", ", postfix = "}")
  }

  fun copy(
    request_id: Long = this.request_id,
    source_public_key: ByteString = this.source_public_key,
    create: Create? = this.create,
    retrieve: Retrieve? = this.retrieve,
    update: Update? = this.update,
    delete: Delete? = this.delete,
    unknownFields: ByteString = this.unknownFields
  ): NickServRPCCommand = NickServRPCCommand(request_id, source_public_key, create, retrieve,
      update, delete, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<NickServRPCCommand> = object : ProtoAdapter<NickServRPCCommand>(
      FieldEncoding.LENGTH_DELIMITED, 
      NickServRPCCommand::class, 
      "type.googleapis.com/NickServRPCCommand", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: NickServRPCCommand): Int {
        var size = value.unknownFields.size
        if (value.request_id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1,
            value.request_id)
        if (value.source_public_key != ByteString.EMPTY) size +=
            ProtoAdapter.BYTES.encodedSizeWithTag(2, value.source_public_key)
        size += Create.ADAPTER.encodedSizeWithTag(5, value.create)
        size += Retrieve.ADAPTER.encodedSizeWithTag(6, value.retrieve)
        size += Update.ADAPTER.encodedSizeWithTag(7, value.update)
        size += Delete.ADAPTER.encodedSizeWithTag(8, value.delete)
        return size
      }

      override fun encode(writer: ProtoWriter, value: NickServRPCCommand) {
        if (value.request_id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.request_id)
        if (value.source_public_key != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
            value.source_public_key)
        Create.ADAPTER.encodeWithTag(writer, 5, value.create)
        Retrieve.ADAPTER.encodeWithTag(writer, 6, value.retrieve)
        Update.ADAPTER.encodeWithTag(writer, 7, value.update)
        Delete.ADAPTER.encodeWithTag(writer, 8, value.delete)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): NickServRPCCommand {
        var request_id: Long = 0L
        var source_public_key: ByteString = ByteString.EMPTY
        var create: Create? = null
        var retrieve: Retrieve? = null
        var update: Update? = null
        var delete: Delete? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> request_id = ProtoAdapter.UINT64.decode(reader)
            2 -> source_public_key = ProtoAdapter.BYTES.decode(reader)
            5 -> create = Create.ADAPTER.decode(reader)
            6 -> retrieve = Retrieve.ADAPTER.decode(reader)
            7 -> update = Update.ADAPTER.decode(reader)
            8 -> delete = Delete.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return NickServRPCCommand(
          request_id = request_id,
          source_public_key = source_public_key,
          create = create,
          retrieve = retrieve,
          update = update,
          delete = delete,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: NickServRPCCommand): NickServRPCCommand = value.copy(
        create = value.create?.let(Create.ADAPTER::redact),
        retrieve = value.retrieve?.let(Retrieve.ADAPTER::redact),
        update = value.update?.let(Update.ADAPTER::redact),
        delete = value.delete?.let(Delete.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  class Create(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
    )
    val nick: String = "",
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Create, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Create) return false
      if (unknownFields != other.unknownFields) return false
      if (nick != other.nick) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + nick.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """nick=${sanitize(nick)}"""
      return result.joinToString(prefix = "Create{", separator = ", ", postfix = "}")
    }

    fun copy(nick: String = this.nick, unknownFields: ByteString = this.unknownFields): Create =
        Create(nick, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Create> = object : ProtoAdapter<Create>(
        FieldEncoding.LENGTH_DELIMITED, 
        Create::class, 
        "type.googleapis.com/NickServRPCCommand.Create", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Create): Int {
          var size = value.unknownFields.size
          if (value.nick != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.nick)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Create) {
          if (value.nick != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.nick)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Create {
          var nick: String = ""
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> nick = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Create(
            nick = nick,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Create): Create = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Retrieve(
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Retrieve, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Retrieve) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    override fun hashCode(): Int = unknownFields.hashCode()

    override fun toString(): String = "Retrieve{}"

    fun copy(unknownFields: ByteString = this.unknownFields): Retrieve = Retrieve(unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Retrieve> = object : ProtoAdapter<Retrieve>(
        FieldEncoding.LENGTH_DELIMITED, 
        Retrieve::class, 
        "type.googleapis.com/NickServRPCCommand.Retrieve", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Retrieve): Int {
          var size = value.unknownFields.size
          return size
        }

        override fun encode(writer: ProtoWriter, value: Retrieve) {
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Retrieve {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return Retrieve(
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Retrieve): Retrieve = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Update(
    @field:WireField(
      tag = 1,
      adapter = "gg.strims.ppspp.proto.NickServRPCCommand${'$'}Update${'$'}ChangeNick#ADAPTER"
    )
    val nick: ChangeNick? = null,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      jsonName = "nameChangeQuota"
    )
    val name_change_quota: Int? = null,
    @field:WireField(
      tag = 3,
      adapter = "gg.strims.ppspp.proto.NickServRPCCommand${'$'}Update${'$'}Roles#ADAPTER"
    )
    val roles: Roles? = null,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Update, Nothing>(ADAPTER, unknownFields) {
    init {
      require(countNonNull(nick, name_change_quota, roles) <= 1) {
        "At most one of nick, name_change_quota, roles may be non-null"
      }
    }

    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Update) return false
      if (unknownFields != other.unknownFields) return false
      if (nick != other.nick) return false
      if (name_change_quota != other.name_change_quota) return false
      if (roles != other.roles) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + nick.hashCode()
        result = result * 37 + name_change_quota.hashCode()
        result = result * 37 + roles.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (nick != null) result += """nick=$nick"""
      if (name_change_quota != null) result += """name_change_quota=$name_change_quota"""
      if (roles != null) result += """roles=$roles"""
      return result.joinToString(prefix = "Update{", separator = ", ", postfix = "}")
    }

    fun copy(
      nick: ChangeNick? = this.nick,
      name_change_quota: Int? = this.name_change_quota,
      roles: Roles? = this.roles,
      unknownFields: ByteString = this.unknownFields
    ): Update = Update(nick, name_change_quota, roles, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Update> = object : ProtoAdapter<Update>(
        FieldEncoding.LENGTH_DELIMITED, 
        Update::class, 
        "type.googleapis.com/NickServRPCCommand.Update", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Update): Int {
          var size = value.unknownFields.size
          size += ChangeNick.ADAPTER.encodedSizeWithTag(1, value.nick)
          size += ProtoAdapter.UINT32.encodedSizeWithTag(2, value.name_change_quota)
          size += Roles.ADAPTER.encodedSizeWithTag(3, value.roles)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Update) {
          ChangeNick.ADAPTER.encodeWithTag(writer, 1, value.nick)
          ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.name_change_quota)
          Roles.ADAPTER.encodeWithTag(writer, 3, value.roles)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Update {
          var nick: ChangeNick? = null
          var name_change_quota: Int? = null
          var roles: Roles? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> nick = ChangeNick.ADAPTER.decode(reader)
              2 -> name_change_quota = ProtoAdapter.UINT32.decode(reader)
              3 -> roles = Roles.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Update(
            nick = nick,
            name_change_quota = name_change_quota,
            roles = roles,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Update): Update = value.copy(
          nick = value.nick?.let(ChangeNick.ADAPTER::redact),
          roles = value.roles?.let(Roles.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }

    class Roles(
      roles: List<String> = emptyList(),
      unknownFields: ByteString = ByteString.EMPTY
    ) : Message<Roles, Nothing>(ADAPTER, unknownFields) {
      @field:WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#STRING",
        label = WireField.Label.REPEATED
      )
      val roles: List<String> = immutableCopyOf("roles", roles)

      @Deprecated(
        message = "Shouldn't be used in Kotlin",
        level = DeprecationLevel.HIDDEN
      )
      override fun newBuilder(): Nothing = throw AssertionError()

      override fun equals(other: Any?): Boolean {
        if (other === this) return true
        if (other !is Roles) return false
        if (unknownFields != other.unknownFields) return false
        if (roles != other.roles) return false
        return true
      }

      override fun hashCode(): Int {
        var result = super.hashCode
        if (result == 0) {
          result = unknownFields.hashCode()
          result = result * 37 + roles.hashCode()
          super.hashCode = result
        }
        return result
      }

      override fun toString(): String {
        val result = mutableListOf<String>()
        if (roles.isNotEmpty()) result += """roles=${sanitize(roles)}"""
        return result.joinToString(prefix = "Roles{", separator = ", ", postfix = "}")
      }

      fun copy(roles: List<String> = this.roles, unknownFields: ByteString = this.unknownFields):
          Roles = Roles(roles, unknownFields)

      companion object {
        @JvmField
        val ADAPTER: ProtoAdapter<Roles> = object : ProtoAdapter<Roles>(
          FieldEncoding.LENGTH_DELIMITED, 
          Roles::class, 
          "type.googleapis.com/NickServRPCCommand.Update.Roles", 
          PROTO_3, 
          null
        ) {
          override fun encodedSize(value: Roles): Int {
            var size = value.unknownFields.size
            size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(1, value.roles)
            return size
          }

          override fun encode(writer: ProtoWriter, value: Roles) {
            ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 1, value.roles)
            writer.writeBytes(value.unknownFields)
          }

          override fun decode(reader: ProtoReader): Roles {
            val roles = mutableListOf<String>()
            val unknownFields = reader.forEachTag { tag ->
              when (tag) {
                1 -> roles.add(ProtoAdapter.STRING.decode(reader))
                else -> reader.readUnknownField(tag)
              }
            }
            return Roles(
              roles = roles,
              unknownFields = unknownFields
            )
          }

          override fun redact(value: Roles): Roles = value.copy(
            unknownFields = ByteString.EMPTY
          )
        }

        private const val serialVersionUID: Long = 0L
      }
    }

    class ChangeNick(
      @field:WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#STRING",
        label = WireField.Label.OMIT_IDENTITY,
        jsonName = "oldNick"
      )
      val old_nick: String = "",
      @field:WireField(
        tag = 2,
        adapter = "com.squareup.wire.ProtoAdapter#STRING",
        label = WireField.Label.OMIT_IDENTITY,
        jsonName = "newNick"
      )
      val new_nick: String = "",
      unknownFields: ByteString = ByteString.EMPTY
    ) : Message<ChangeNick, Nothing>(ADAPTER, unknownFields) {
      @Deprecated(
        message = "Shouldn't be used in Kotlin",
        level = DeprecationLevel.HIDDEN
      )
      override fun newBuilder(): Nothing = throw AssertionError()

      override fun equals(other: Any?): Boolean {
        if (other === this) return true
        if (other !is ChangeNick) return false
        if (unknownFields != other.unknownFields) return false
        if (old_nick != other.old_nick) return false
        if (new_nick != other.new_nick) return false
        return true
      }

      override fun hashCode(): Int {
        var result = super.hashCode
        if (result == 0) {
          result = unknownFields.hashCode()
          result = result * 37 + old_nick.hashCode()
          result = result * 37 + new_nick.hashCode()
          super.hashCode = result
        }
        return result
      }

      override fun toString(): String {
        val result = mutableListOf<String>()
        result += """old_nick=${sanitize(old_nick)}"""
        result += """new_nick=${sanitize(new_nick)}"""
        return result.joinToString(prefix = "ChangeNick{", separator = ", ", postfix = "}")
      }

      fun copy(
        old_nick: String = this.old_nick,
        new_nick: String = this.new_nick,
        unknownFields: ByteString = this.unknownFields
      ): ChangeNick = ChangeNick(old_nick, new_nick, unknownFields)

      companion object {
        @JvmField
        val ADAPTER: ProtoAdapter<ChangeNick> = object : ProtoAdapter<ChangeNick>(
          FieldEncoding.LENGTH_DELIMITED, 
          ChangeNick::class, 
          "type.googleapis.com/NickServRPCCommand.Update.ChangeNick", 
          PROTO_3, 
          null
        ) {
          override fun encodedSize(value: ChangeNick): Int {
            var size = value.unknownFields.size
            if (value.old_nick != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
                value.old_nick)
            if (value.new_nick != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
                value.new_nick)
            return size
          }

          override fun encode(writer: ProtoWriter, value: ChangeNick) {
            if (value.old_nick != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.old_nick)
            if (value.new_nick != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.new_nick)
            writer.writeBytes(value.unknownFields)
          }

          override fun decode(reader: ProtoReader): ChangeNick {
            var old_nick: String = ""
            var new_nick: String = ""
            val unknownFields = reader.forEachTag { tag ->
              when (tag) {
                1 -> old_nick = ProtoAdapter.STRING.decode(reader)
                2 -> new_nick = ProtoAdapter.STRING.decode(reader)
                else -> reader.readUnknownField(tag)
              }
            }
            return ChangeNick(
              old_nick = old_nick,
              new_nick = new_nick,
              unknownFields = unknownFields
            )
          }

          override fun redact(value: ChangeNick): ChangeNick = value.copy(
            unknownFields = ByteString.EMPTY
          )
        }

        private const val serialVersionUID: Long = 0L
      }
    }
  }

  class Delete(
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Delete, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Delete) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    override fun hashCode(): Int = unknownFields.hashCode()

    override fun toString(): String = "Delete{}"

    fun copy(unknownFields: ByteString = this.unknownFields): Delete = Delete(unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Delete> = object : ProtoAdapter<Delete>(
        FieldEncoding.LENGTH_DELIMITED, 
        Delete::class, 
        "type.googleapis.com/NickServRPCCommand.Delete", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Delete): Int {
          var size = value.unknownFields.size
          return size
        }

        override fun encode(writer: ProtoWriter, value: Delete) {
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Delete {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return Delete(
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Delete): Delete = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
