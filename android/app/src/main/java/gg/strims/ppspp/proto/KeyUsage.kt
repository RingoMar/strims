// Code generated by Wire protocol buffer compiler, do not edit.
// Source: KeyUsage in profile.proto
package gg.strims.ppspp.proto

import com.squareup.wire.EnumAdapter
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import kotlin.Int
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic

enum class KeyUsage(
  override val value: Int
) : WireEnum {
  KEY_USAGE_UNDEFINED(0),

  /**
   * PEER allows bearer to connect with members of the signator's network
   */
  KEY_USAGE_PEER(1),

  /**
   * BOOTSTRAP allows the bearer to connect to a network's signators. Invites
   * including transient keys with bootstrap certs allow new members to request
   * peer certs.
   */
  KEY_USAGE_BOOTSTRAP(2),

  /**
   * SIGN allows the bearer to sign certificates.
   */
  KEY_USAGE_SIGN(4),

  /**
   * BROKER allows the bearer to negotiate connections between a network's
   * members.
   */
  KEY_USAGE_BROKER(8),

  /**
   * ENCIPHERMENT allows the key to be used for encrypting messages.
   */
  KEY_USAGE_ENCIPHERMENT(16);

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<KeyUsage> = object : EnumAdapter<KeyUsage>(
      KeyUsage::class, 
      PROTO_3, 
      KeyUsage.KEY_USAGE_UNDEFINED
    ) {
      override fun fromValue(value: Int): KeyUsage? = KeyUsage.fromValue(value)
    }

    @JvmStatic
    fun fromValue(value: Int): KeyUsage? = when (value) {
      0 -> KEY_USAGE_UNDEFINED
      1 -> KEY_USAGE_PEER
      2 -> KEY_USAGE_BOOTSTRAP
      4 -> KEY_USAGE_SIGN
      8 -> KEY_USAGE_BROKER
      16 -> KEY_USAGE_ENCIPHERMENT
      else -> null
    }
  }
}
