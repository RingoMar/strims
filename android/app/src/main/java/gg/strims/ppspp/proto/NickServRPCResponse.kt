// Code generated by Wire protocol buffer compiler, do not edit.
// Source: NickServRPCResponse in nickserv.proto
package gg.strims.ppspp.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.countNonNull
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class NickServRPCResponse(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "requestId"
  )
  val request_id: Long = 0L,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val error: String? = null,
  @field:WireField(
    tag = 3,
    adapter = "gg.strims.ppspp.proto.NickServRPCResponse${'$'}Update#ADAPTER"
  )
  val update: Update? = null,
  @field:WireField(
    tag = 4,
    adapter = "gg.strims.ppspp.proto.NickServRPCResponse${'$'}Delete#ADAPTER"
  )
  val delete: Delete? = null,
  @field:WireField(
    tag = 5,
    adapter = "gg.strims.ppspp.proto.NickServToken#ADAPTER"
  )
  val create: NickServToken? = null,
  @field:WireField(
    tag = 6,
    adapter = "gg.strims.ppspp.proto.NickServToken#ADAPTER"
  )
  val retrieve: NickServToken? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<NickServRPCResponse, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(error, update, delete, create, retrieve) <= 1) {
      "At most one of error, update, delete, create, retrieve may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is NickServRPCResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (request_id != other.request_id) return false
    if (error != other.error) return false
    if (update != other.update) return false
    if (delete != other.delete) return false
    if (create != other.create) return false
    if (retrieve != other.retrieve) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + request_id.hashCode()
      result = result * 37 + error.hashCode()
      result = result * 37 + update.hashCode()
      result = result * 37 + delete.hashCode()
      result = result * 37 + create.hashCode()
      result = result * 37 + retrieve.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """request_id=$request_id"""
    if (error != null) result += """error=${sanitize(error)}"""
    if (update != null) result += """update=$update"""
    if (delete != null) result += """delete=$delete"""
    if (create != null) result += """create=$create"""
    if (retrieve != null) result += """retrieve=$retrieve"""
    return result.joinToString(prefix = "NickServRPCResponse{", separator = ", ", postfix = "}")
  }

  fun copy(
    request_id: Long = this.request_id,
    error: String? = this.error,
    update: Update? = this.update,
    delete: Delete? = this.delete,
    create: NickServToken? = this.create,
    retrieve: NickServToken? = this.retrieve,
    unknownFields: ByteString = this.unknownFields
  ): NickServRPCResponse = NickServRPCResponse(request_id, error, update, delete, create, retrieve,
      unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<NickServRPCResponse> = object : ProtoAdapter<NickServRPCResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      NickServRPCResponse::class, 
      "type.googleapis.com/NickServRPCResponse", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: NickServRPCResponse): Int {
        var size = value.unknownFields.size
        if (value.request_id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1,
            value.request_id)
        size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.error)
        size += Update.ADAPTER.encodedSizeWithTag(3, value.update)
        size += Delete.ADAPTER.encodedSizeWithTag(4, value.delete)
        size += NickServToken.ADAPTER.encodedSizeWithTag(5, value.create)
        size += NickServToken.ADAPTER.encodedSizeWithTag(6, value.retrieve)
        return size
      }

      override fun encode(writer: ProtoWriter, value: NickServRPCResponse) {
        if (value.request_id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.request_id)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.error)
        Update.ADAPTER.encodeWithTag(writer, 3, value.update)
        Delete.ADAPTER.encodeWithTag(writer, 4, value.delete)
        NickServToken.ADAPTER.encodeWithTag(writer, 5, value.create)
        NickServToken.ADAPTER.encodeWithTag(writer, 6, value.retrieve)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): NickServRPCResponse {
        var request_id: Long = 0L
        var error: String? = null
        var update: Update? = null
        var delete: Delete? = null
        var create: NickServToken? = null
        var retrieve: NickServToken? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> request_id = ProtoAdapter.UINT64.decode(reader)
            2 -> error = ProtoAdapter.STRING.decode(reader)
            3 -> update = Update.ADAPTER.decode(reader)
            4 -> delete = Delete.ADAPTER.decode(reader)
            5 -> create = NickServToken.ADAPTER.decode(reader)
            6 -> retrieve = NickServToken.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return NickServRPCResponse(
          request_id = request_id,
          error = error,
          update = update,
          delete = delete,
          create = create,
          retrieve = retrieve,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: NickServRPCResponse): NickServRPCResponse = value.copy(
        update = value.update?.let(Update.ADAPTER::redact),
        delete = value.delete?.let(Delete.ADAPTER::redact),
        create = value.create?.let(NickServToken.ADAPTER::redact),
        retrieve = value.retrieve?.let(NickServToken.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  class Update(
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Update, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Update) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    override fun hashCode(): Int = unknownFields.hashCode()

    override fun toString(): String = "Update{}"

    fun copy(unknownFields: ByteString = this.unknownFields): Update = Update(unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Update> = object : ProtoAdapter<Update>(
        FieldEncoding.LENGTH_DELIMITED, 
        Update::class, 
        "type.googleapis.com/NickServRPCResponse.Update", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Update): Int {
          var size = value.unknownFields.size
          return size
        }

        override fun encode(writer: ProtoWriter, value: Update) {
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Update {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return Update(
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Update): Update = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Delete(
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Delete, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Delete) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    override fun hashCode(): Int = unknownFields.hashCode()

    override fun toString(): String = "Delete{}"

    fun copy(unknownFields: ByteString = this.unknownFields): Delete = Delete(unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Delete> = object : ProtoAdapter<Delete>(
        FieldEncoding.LENGTH_DELIMITED, 
        Delete::class, 
        "type.googleapis.com/NickServRPCResponse.Delete", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Delete): Int {
          var size = value.unknownFields.size
          return size
        }

        override fun encode(writer: ProtoWriter, value: Delete) {
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Delete {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return Delete(
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Delete): Delete = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
