// Code generated by Wire protocol buffer compiler, do not edit.
// Source: PeerExchangeMessage in vpn.proto
package gg.strims.ppspp.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.countNonNull
import com.squareup.wire.internal.immutableCopyOf
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class PeerExchangeMessage(
  @field:WireField(
    tag = 1,
    adapter = "gg.strims.ppspp.proto.PeerExchangeMessage${'$'}Request#ADAPTER"
  )
  val request: Request? = null,
  @field:WireField(
    tag = 2,
    adapter = "gg.strims.ppspp.proto.PeerExchangeMessage${'$'}Response#ADAPTER"
  )
  val response: Response? = null,
  @field:WireField(
    tag = 3,
    adapter = "gg.strims.ppspp.proto.PeerExchangeMessage${'$'}Offer#ADAPTER"
  )
  val offer: Offer? = null,
  @field:WireField(
    tag = 4,
    adapter = "gg.strims.ppspp.proto.PeerExchangeMessage${'$'}Answer#ADAPTER"
  )
  val answer: Answer? = null,
  @field:WireField(
    tag = 5,
    adapter = "gg.strims.ppspp.proto.PeerExchangeMessage${'$'}IceCandidate#ADAPTER",
    jsonName = "iceCandidate"
  )
  val ice_candidate: IceCandidate? = null,
  @field:WireField(
    tag = 6,
    adapter = "gg.strims.ppspp.proto.PeerExchangeMessage${'$'}CallbackRequest#ADAPTER",
    jsonName = "callbackRequest"
  )
  val callback_request: CallbackRequest? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<PeerExchangeMessage, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(request, response, offer, answer, ice_candidate, callback_request) <= 1) {
      "At most one of request, response, offer, answer, ice_candidate, callback_request may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is PeerExchangeMessage) return false
    if (unknownFields != other.unknownFields) return false
    if (request != other.request) return false
    if (response != other.response) return false
    if (offer != other.offer) return false
    if (answer != other.answer) return false
    if (ice_candidate != other.ice_candidate) return false
    if (callback_request != other.callback_request) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + request.hashCode()
      result = result * 37 + response.hashCode()
      result = result * 37 + offer.hashCode()
      result = result * 37 + answer.hashCode()
      result = result * 37 + ice_candidate.hashCode()
      result = result * 37 + callback_request.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (request != null) result += """request=$request"""
    if (response != null) result += """response=$response"""
    if (offer != null) result += """offer=$offer"""
    if (answer != null) result += """answer=$answer"""
    if (ice_candidate != null) result += """ice_candidate=$ice_candidate"""
    if (callback_request != null) result += """callback_request=$callback_request"""
    return result.joinToString(prefix = "PeerExchangeMessage{", separator = ", ", postfix = "}")
  }

  fun copy(
    request: Request? = this.request,
    response: Response? = this.response,
    offer: Offer? = this.offer,
    answer: Answer? = this.answer,
    ice_candidate: IceCandidate? = this.ice_candidate,
    callback_request: CallbackRequest? = this.callback_request,
    unknownFields: ByteString = this.unknownFields
  ): PeerExchangeMessage = PeerExchangeMessage(request, response, offer, answer, ice_candidate,
      callback_request, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<PeerExchangeMessage> = object : ProtoAdapter<PeerExchangeMessage>(
      FieldEncoding.LENGTH_DELIMITED, 
      PeerExchangeMessage::class, 
      "type.googleapis.com/PeerExchangeMessage", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: PeerExchangeMessage): Int {
        var size = value.unknownFields.size
        size += Request.ADAPTER.encodedSizeWithTag(1, value.request)
        size += Response.ADAPTER.encodedSizeWithTag(2, value.response)
        size += Offer.ADAPTER.encodedSizeWithTag(3, value.offer)
        size += Answer.ADAPTER.encodedSizeWithTag(4, value.answer)
        size += IceCandidate.ADAPTER.encodedSizeWithTag(5, value.ice_candidate)
        size += CallbackRequest.ADAPTER.encodedSizeWithTag(6, value.callback_request)
        return size
      }

      override fun encode(writer: ProtoWriter, value: PeerExchangeMessage) {
        Request.ADAPTER.encodeWithTag(writer, 1, value.request)
        Response.ADAPTER.encodeWithTag(writer, 2, value.response)
        Offer.ADAPTER.encodeWithTag(writer, 3, value.offer)
        Answer.ADAPTER.encodeWithTag(writer, 4, value.answer)
        IceCandidate.ADAPTER.encodeWithTag(writer, 5, value.ice_candidate)
        CallbackRequest.ADAPTER.encodeWithTag(writer, 6, value.callback_request)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): PeerExchangeMessage {
        var request: Request? = null
        var response: Response? = null
        var offer: Offer? = null
        var answer: Answer? = null
        var ice_candidate: IceCandidate? = null
        var callback_request: CallbackRequest? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> request = Request.ADAPTER.decode(reader)
            2 -> response = Response.ADAPTER.decode(reader)
            3 -> offer = Offer.ADAPTER.decode(reader)
            4 -> answer = Answer.ADAPTER.decode(reader)
            5 -> ice_candidate = IceCandidate.ADAPTER.decode(reader)
            6 -> callback_request = CallbackRequest.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return PeerExchangeMessage(
          request = request,
          response = response,
          offer = offer,
          answer = answer,
          ice_candidate = ice_candidate,
          callback_request = callback_request,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: PeerExchangeMessage): PeerExchangeMessage = value.copy(
        request = value.request?.let(Request.ADAPTER::redact),
        response = value.response?.let(Response.ADAPTER::redact),
        offer = value.offer?.let(Offer.ADAPTER::redact),
        answer = value.answer?.let(Answer.ADAPTER::redact),
        ice_candidate = value.ice_candidate?.let(IceCandidate.ADAPTER::redact),
        callback_request = value.callback_request?.let(CallbackRequest.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  class Request(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.OMIT_IDENTITY
    )
    val count: Int = 0,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Request, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Request) return false
      if (unknownFields != other.unknownFields) return false
      if (count != other.count) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + count.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """count=$count"""
      return result.joinToString(prefix = "Request{", separator = ", ", postfix = "}")
    }

    fun copy(count: Int = this.count, unknownFields: ByteString = this.unknownFields): Request =
        Request(count, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Request> = object : ProtoAdapter<Request>(
        FieldEncoding.LENGTH_DELIMITED, 
        Request::class, 
        "type.googleapis.com/PeerExchangeMessage.Request", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Request): Int {
          var size = value.unknownFields.size
          if (value.count != 0) size += ProtoAdapter.UINT32.encodedSizeWithTag(1, value.count)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Request) {
          if (value.count != 0) ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.count)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Request {
          var count: Int = 0
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> count = ProtoAdapter.UINT32.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Request(
            count = count,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Request): Request = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Response(
    ids: List<ByteString> = emptyList(),
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Response, Nothing>(ADAPTER, unknownFields) {
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.REPEATED
    )
    val ids: List<ByteString> = immutableCopyOf("ids", ids)

    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Response) return false
      if (unknownFields != other.unknownFields) return false
      if (ids != other.ids) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + ids.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (ids.isNotEmpty()) result += """ids=$ids"""
      return result.joinToString(prefix = "Response{", separator = ", ", postfix = "}")
    }

    fun copy(ids: List<ByteString> = this.ids, unknownFields: ByteString = this.unknownFields):
        Response = Response(ids, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Response> = object : ProtoAdapter<Response>(
        FieldEncoding.LENGTH_DELIMITED, 
        Response::class, 
        "type.googleapis.com/PeerExchangeMessage.Response", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Response): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(1, value.ids)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Response) {
          ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 1, value.ids)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Response {
          val ids = mutableListOf<ByteString>()
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> ids.add(ProtoAdapter.BYTES.decode(reader))
              else -> reader.readUnknownField(tag)
            }
          }
          return Response(
            ids = ids,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Response): Response = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Offer(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "mediationId"
    )
    val mediation_id: Long = 0L,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY
    )
    val data: ByteString = ByteString.EMPTY,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Offer, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Offer) return false
      if (unknownFields != other.unknownFields) return false
      if (mediation_id != other.mediation_id) return false
      if (data != other.data) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + mediation_id.hashCode()
        result = result * 37 + data.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """mediation_id=$mediation_id"""
      result += """data=$data"""
      return result.joinToString(prefix = "Offer{", separator = ", ", postfix = "}")
    }

    fun copy(
      mediation_id: Long = this.mediation_id,
      data: ByteString = this.data,
      unknownFields: ByteString = this.unknownFields
    ): Offer = Offer(mediation_id, data, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Offer> = object : ProtoAdapter<Offer>(
        FieldEncoding.LENGTH_DELIMITED, 
        Offer::class, 
        "type.googleapis.com/PeerExchangeMessage.Offer", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Offer): Int {
          var size = value.unknownFields.size
          if (value.mediation_id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1,
              value.mediation_id)
          if (value.data != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(2,
              value.data)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Offer) {
          if (value.mediation_id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1,
              value.mediation_id)
          if (value.data != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
              value.data)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Offer {
          var mediation_id: Long = 0L
          var data: ByteString = ByteString.EMPTY
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> mediation_id = ProtoAdapter.UINT64.decode(reader)
              2 -> data = ProtoAdapter.BYTES.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Offer(
            mediation_id = mediation_id,
            data = data,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Offer): Offer = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Answer(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "mediationId"
    )
    val mediation_id: Long = 0L,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY
    )
    val data: ByteString = ByteString.EMPTY,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Answer, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Answer) return false
      if (unknownFields != other.unknownFields) return false
      if (mediation_id != other.mediation_id) return false
      if (data != other.data) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + mediation_id.hashCode()
        result = result * 37 + data.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """mediation_id=$mediation_id"""
      result += """data=$data"""
      return result.joinToString(prefix = "Answer{", separator = ", ", postfix = "}")
    }

    fun copy(
      mediation_id: Long = this.mediation_id,
      data: ByteString = this.data,
      unknownFields: ByteString = this.unknownFields
    ): Answer = Answer(mediation_id, data, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Answer> = object : ProtoAdapter<Answer>(
        FieldEncoding.LENGTH_DELIMITED, 
        Answer::class, 
        "type.googleapis.com/PeerExchangeMessage.Answer", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Answer): Int {
          var size = value.unknownFields.size
          if (value.mediation_id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1,
              value.mediation_id)
          if (value.data != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(2,
              value.data)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Answer) {
          if (value.mediation_id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1,
              value.mediation_id)
          if (value.data != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
              value.data)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Answer {
          var mediation_id: Long = 0L
          var data: ByteString = ByteString.EMPTY
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> mediation_id = ProtoAdapter.UINT64.decode(reader)
              2 -> data = ProtoAdapter.BYTES.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Answer(
            mediation_id = mediation_id,
            data = data,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Answer): Answer = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class IceCandidate(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "mediationId"
    )
    val mediation_id: Long = 0L,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.OMIT_IDENTITY
    )
    val index: Long = 0L,
    @field:WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY
    )
    val data: ByteString = ByteString.EMPTY,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<IceCandidate, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is IceCandidate) return false
      if (unknownFields != other.unknownFields) return false
      if (mediation_id != other.mediation_id) return false
      if (index != other.index) return false
      if (data != other.data) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + mediation_id.hashCode()
        result = result * 37 + index.hashCode()
        result = result * 37 + data.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """mediation_id=$mediation_id"""
      result += """index=$index"""
      result += """data=$data"""
      return result.joinToString(prefix = "IceCandidate{", separator = ", ", postfix = "}")
    }

    fun copy(
      mediation_id: Long = this.mediation_id,
      index: Long = this.index,
      data: ByteString = this.data,
      unknownFields: ByteString = this.unknownFields
    ): IceCandidate = IceCandidate(mediation_id, index, data, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<IceCandidate> = object : ProtoAdapter<IceCandidate>(
        FieldEncoding.LENGTH_DELIMITED, 
        IceCandidate::class, 
        "type.googleapis.com/PeerExchangeMessage.IceCandidate", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: IceCandidate): Int {
          var size = value.unknownFields.size
          if (value.mediation_id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1,
              value.mediation_id)
          if (value.index != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(2, value.index)
          if (value.data != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(3,
              value.data)
          return size
        }

        override fun encode(writer: ProtoWriter, value: IceCandidate) {
          if (value.mediation_id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1,
              value.mediation_id)
          if (value.index != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.index)
          if (value.data != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 3,
              value.data)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): IceCandidate {
          var mediation_id: Long = 0L
          var index: Long = 0L
          var data: ByteString = ByteString.EMPTY
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> mediation_id = ProtoAdapter.UINT64.decode(reader)
              2 -> index = ProtoAdapter.UINT64.decode(reader)
              3 -> data = ProtoAdapter.BYTES.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return IceCandidate(
            mediation_id = mediation_id,
            index = index,
            data = data,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: IceCandidate): IceCandidate = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class CallbackRequest(
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<CallbackRequest, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is CallbackRequest) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    override fun hashCode(): Int = unknownFields.hashCode()

    override fun toString(): String = "CallbackRequest{}"

    fun copy(unknownFields: ByteString = this.unknownFields): CallbackRequest =
        CallbackRequest(unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<CallbackRequest> = object : ProtoAdapter<CallbackRequest>(
        FieldEncoding.LENGTH_DELIMITED, 
        CallbackRequest::class, 
        "type.googleapis.com/PeerExchangeMessage.CallbackRequest", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: CallbackRequest): Int {
          var size = value.unknownFields.size
          return size
        }

        override fun encode(writer: ProtoWriter, value: CallbackRequest) {
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): CallbackRequest {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return CallbackRequest(
            unknownFields = unknownFields
          )
        }

        override fun redact(value: CallbackRequest): CallbackRequest = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
