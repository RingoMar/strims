// Code generated by Wire protocol buffer compiler, do not edit.
// Source: MessageEntities in chat.proto
package gg.strims.ppspp.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class MessageEntities(
  links: List<Link> = emptyList(),
  emotes: List<Emote> = emptyList(),
  nicks: List<Nick> = emptyList(),
  tags: List<Tag> = emptyList(),
  code_blocks: List<CodeBlock> = emptyList(),
  spoilers: List<Spoiler> = emptyList(),
  @field:WireField(
    tag = 7,
    adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}GenericEntity#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "greenText"
  )
  val green_text: GenericEntity? = null,
  @field:WireField(
    tag = 8,
    adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}GenericEntity#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "selfMessage"
  )
  val self_message: GenericEntity? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<MessageEntities, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}Link#ADAPTER",
    label = WireField.Label.REPEATED
  )
  val links: List<Link> = immutableCopyOf("links", links)

  @field:WireField(
    tag = 2,
    adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}Emote#ADAPTER",
    label = WireField.Label.REPEATED
  )
  val emotes: List<Emote> = immutableCopyOf("emotes", emotes)

  @field:WireField(
    tag = 3,
    adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}Nick#ADAPTER",
    label = WireField.Label.REPEATED
  )
  val nicks: List<Nick> = immutableCopyOf("nicks", nicks)

  @field:WireField(
    tag = 4,
    adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}Tag#ADAPTER",
    label = WireField.Label.REPEATED
  )
  val tags: List<Tag> = immutableCopyOf("tags", tags)

  @field:WireField(
    tag = 5,
    adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}CodeBlock#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "codeBlocks"
  )
  val code_blocks: List<CodeBlock> = immutableCopyOf("code_blocks", code_blocks)

  @field:WireField(
    tag = 6,
    adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}Spoiler#ADAPTER",
    label = WireField.Label.REPEATED
  )
  val spoilers: List<Spoiler> = immutableCopyOf("spoilers", spoilers)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is MessageEntities) return false
    if (unknownFields != other.unknownFields) return false
    if (links != other.links) return false
    if (emotes != other.emotes) return false
    if (nicks != other.nicks) return false
    if (tags != other.tags) return false
    if (code_blocks != other.code_blocks) return false
    if (spoilers != other.spoilers) return false
    if (green_text != other.green_text) return false
    if (self_message != other.self_message) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + links.hashCode()
      result = result * 37 + emotes.hashCode()
      result = result * 37 + nicks.hashCode()
      result = result * 37 + tags.hashCode()
      result = result * 37 + code_blocks.hashCode()
      result = result * 37 + spoilers.hashCode()
      result = result * 37 + green_text.hashCode()
      result = result * 37 + self_message.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (links.isNotEmpty()) result += """links=$links"""
    if (emotes.isNotEmpty()) result += """emotes=$emotes"""
    if (nicks.isNotEmpty()) result += """nicks=$nicks"""
    if (tags.isNotEmpty()) result += """tags=$tags"""
    if (code_blocks.isNotEmpty()) result += """code_blocks=$code_blocks"""
    if (spoilers.isNotEmpty()) result += """spoilers=$spoilers"""
    if (green_text != null) result += """green_text=$green_text"""
    if (self_message != null) result += """self_message=$self_message"""
    return result.joinToString(prefix = "MessageEntities{", separator = ", ", postfix = "}")
  }

  fun copy(
    links: List<Link> = this.links,
    emotes: List<Emote> = this.emotes,
    nicks: List<Nick> = this.nicks,
    tags: List<Tag> = this.tags,
    code_blocks: List<CodeBlock> = this.code_blocks,
    spoilers: List<Spoiler> = this.spoilers,
    green_text: GenericEntity? = this.green_text,
    self_message: GenericEntity? = this.self_message,
    unknownFields: ByteString = this.unknownFields
  ): MessageEntities = MessageEntities(links, emotes, nicks, tags, code_blocks, spoilers,
      green_text, self_message, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<MessageEntities> = object : ProtoAdapter<MessageEntities>(
      FieldEncoding.LENGTH_DELIMITED, 
      MessageEntities::class, 
      "type.googleapis.com/MessageEntities", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: MessageEntities): Int {
        var size = value.unknownFields.size
        size += Link.ADAPTER.asRepeated().encodedSizeWithTag(1, value.links)
        size += Emote.ADAPTER.asRepeated().encodedSizeWithTag(2, value.emotes)
        size += Nick.ADAPTER.asRepeated().encodedSizeWithTag(3, value.nicks)
        size += Tag.ADAPTER.asRepeated().encodedSizeWithTag(4, value.tags)
        size += CodeBlock.ADAPTER.asRepeated().encodedSizeWithTag(5, value.code_blocks)
        size += Spoiler.ADAPTER.asRepeated().encodedSizeWithTag(6, value.spoilers)
        if (value.green_text != null) size += GenericEntity.ADAPTER.encodedSizeWithTag(7,
            value.green_text)
        if (value.self_message != null) size += GenericEntity.ADAPTER.encodedSizeWithTag(8,
            value.self_message)
        return size
      }

      override fun encode(writer: ProtoWriter, value: MessageEntities) {
        Link.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.links)
        Emote.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.emotes)
        Nick.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.nicks)
        Tag.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.tags)
        CodeBlock.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.code_blocks)
        Spoiler.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.spoilers)
        if (value.green_text != null) GenericEntity.ADAPTER.encodeWithTag(writer, 7,
            value.green_text)
        if (value.self_message != null) GenericEntity.ADAPTER.encodeWithTag(writer, 8,
            value.self_message)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): MessageEntities {
        val links = mutableListOf<Link>()
        val emotes = mutableListOf<Emote>()
        val nicks = mutableListOf<Nick>()
        val tags = mutableListOf<Tag>()
        val code_blocks = mutableListOf<CodeBlock>()
        val spoilers = mutableListOf<Spoiler>()
        var green_text: GenericEntity? = null
        var self_message: GenericEntity? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> links.add(Link.ADAPTER.decode(reader))
            2 -> emotes.add(Emote.ADAPTER.decode(reader))
            3 -> nicks.add(Nick.ADAPTER.decode(reader))
            4 -> tags.add(Tag.ADAPTER.decode(reader))
            5 -> code_blocks.add(CodeBlock.ADAPTER.decode(reader))
            6 -> spoilers.add(Spoiler.ADAPTER.decode(reader))
            7 -> green_text = GenericEntity.ADAPTER.decode(reader)
            8 -> self_message = GenericEntity.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return MessageEntities(
          links = links,
          emotes = emotes,
          nicks = nicks,
          tags = tags,
          code_blocks = code_blocks,
          spoilers = spoilers,
          green_text = green_text,
          self_message = self_message,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: MessageEntities): MessageEntities = value.copy(
        links = value.links.redactElements(Link.ADAPTER),
        emotes = value.emotes.redactElements(Emote.ADAPTER),
        nicks = value.nicks.redactElements(Nick.ADAPTER),
        tags = value.tags.redactElements(Tag.ADAPTER),
        code_blocks = value.code_blocks.redactElements(CodeBlock.ADAPTER),
        spoilers = value.spoilers.redactElements(Spoiler.ADAPTER),
        green_text = value.green_text?.let(GenericEntity.ADAPTER::redact),
        self_message = value.self_message?.let(GenericEntity.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  class Bounds(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64",
      label = WireField.Label.OMIT_IDENTITY
    )
    val start: Long = 0L,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64",
      label = WireField.Label.OMIT_IDENTITY
    )
    val end: Long = 0L,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Bounds, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Bounds) return false
      if (unknownFields != other.unknownFields) return false
      if (start != other.start) return false
      if (end != other.end) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + start.hashCode()
        result = result * 37 + end.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """start=$start"""
      result += """end=$end"""
      return result.joinToString(prefix = "Bounds{", separator = ", ", postfix = "}")
    }

    fun copy(
      start: Long = this.start,
      end: Long = this.end,
      unknownFields: ByteString = this.unknownFields
    ): Bounds = Bounds(start, end, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Bounds> = object : ProtoAdapter<Bounds>(
        FieldEncoding.LENGTH_DELIMITED, 
        Bounds::class, 
        "type.googleapis.com/MessageEntities.Bounds", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Bounds): Int {
          var size = value.unknownFields.size
          if (value.start != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(1, value.start)
          if (value.end != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(2, value.end)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Bounds) {
          if (value.start != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.start)
          if (value.end != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.end)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Bounds {
          var start: Long = 0L
          var end: Long = 0L
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> start = ProtoAdapter.INT64.decode(reader)
              2 -> end = ProtoAdapter.INT64.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Bounds(
            start = start,
            end = end,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Bounds): Bounds = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Link(
    @field:WireField(
      tag = 1,
      adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}Bounds#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
    )
    val bounds: Bounds? = null,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
    )
    val url: String = "",
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Link, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Link) return false
      if (unknownFields != other.unknownFields) return false
      if (bounds != other.bounds) return false
      if (url != other.url) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + bounds.hashCode()
        result = result * 37 + url.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (bounds != null) result += """bounds=$bounds"""
      result += """url=${sanitize(url)}"""
      return result.joinToString(prefix = "Link{", separator = ", ", postfix = "}")
    }

    fun copy(
      bounds: Bounds? = this.bounds,
      url: String = this.url,
      unknownFields: ByteString = this.unknownFields
    ): Link = Link(bounds, url, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Link> = object : ProtoAdapter<Link>(
        FieldEncoding.LENGTH_DELIMITED, 
        Link::class, 
        "type.googleapis.com/MessageEntities.Link", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Link): Int {
          var size = value.unknownFields.size
          if (value.bounds != null) size += Bounds.ADAPTER.encodedSizeWithTag(1, value.bounds)
          if (value.url != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.url)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Link) {
          if (value.bounds != null) Bounds.ADAPTER.encodeWithTag(writer, 1, value.bounds)
          if (value.url != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.url)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Link {
          var bounds: Bounds? = null
          var url: String = ""
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> bounds = Bounds.ADAPTER.decode(reader)
              2 -> url = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Link(
            bounds = bounds,
            url = url,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Link): Link = value.copy(
          bounds = value.bounds?.let(Bounds.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Emote(
    @field:WireField(
      tag = 1,
      adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}Bounds#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
    )
    val bounds: Bounds? = null,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
    )
    val name: String = "",
    modifiers: List<String> = emptyList(),
    @field:WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT64",
      label = WireField.Label.OMIT_IDENTITY
    )
    val combo: Long = 0L,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Emote, Nothing>(ADAPTER, unknownFields) {
    @field:WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
    )
    val modifiers: List<String> = immutableCopyOf("modifiers", modifiers)

    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Emote) return false
      if (unknownFields != other.unknownFields) return false
      if (bounds != other.bounds) return false
      if (name != other.name) return false
      if (modifiers != other.modifiers) return false
      if (combo != other.combo) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + bounds.hashCode()
        result = result * 37 + name.hashCode()
        result = result * 37 + modifiers.hashCode()
        result = result * 37 + combo.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (bounds != null) result += """bounds=$bounds"""
      result += """name=${sanitize(name)}"""
      if (modifiers.isNotEmpty()) result += """modifiers=${sanitize(modifiers)}"""
      result += """combo=$combo"""
      return result.joinToString(prefix = "Emote{", separator = ", ", postfix = "}")
    }

    fun copy(
      bounds: Bounds? = this.bounds,
      name: String = this.name,
      modifiers: List<String> = this.modifiers,
      combo: Long = this.combo,
      unknownFields: ByteString = this.unknownFields
    ): Emote = Emote(bounds, name, modifiers, combo, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Emote> = object : ProtoAdapter<Emote>(
        FieldEncoding.LENGTH_DELIMITED, 
        Emote::class, 
        "type.googleapis.com/MessageEntities.Emote", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Emote): Int {
          var size = value.unknownFields.size
          if (value.bounds != null) size += Bounds.ADAPTER.encodedSizeWithTag(1, value.bounds)
          if (value.name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.name)
          size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.modifiers)
          if (value.combo != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(4, value.combo)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Emote) {
          if (value.bounds != null) Bounds.ADAPTER.encodeWithTag(writer, 1, value.bounds)
          if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name)
          ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.modifiers)
          if (value.combo != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.combo)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Emote {
          var bounds: Bounds? = null
          var name: String = ""
          val modifiers = mutableListOf<String>()
          var combo: Long = 0L
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> bounds = Bounds.ADAPTER.decode(reader)
              2 -> name = ProtoAdapter.STRING.decode(reader)
              3 -> modifiers.add(ProtoAdapter.STRING.decode(reader))
              4 -> combo = ProtoAdapter.INT64.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Emote(
            bounds = bounds,
            name = name,
            modifiers = modifiers,
            combo = combo,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Emote): Emote = value.copy(
          bounds = value.bounds?.let(Bounds.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Nick(
    @field:WireField(
      tag = 1,
      adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}Bounds#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
    )
    val bounds: Bounds? = null,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
    )
    val nick: String = "",
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Nick, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Nick) return false
      if (unknownFields != other.unknownFields) return false
      if (bounds != other.bounds) return false
      if (nick != other.nick) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + bounds.hashCode()
        result = result * 37 + nick.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (bounds != null) result += """bounds=$bounds"""
      result += """nick=${sanitize(nick)}"""
      return result.joinToString(prefix = "Nick{", separator = ", ", postfix = "}")
    }

    fun copy(
      bounds: Bounds? = this.bounds,
      nick: String = this.nick,
      unknownFields: ByteString = this.unknownFields
    ): Nick = Nick(bounds, nick, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Nick> = object : ProtoAdapter<Nick>(
        FieldEncoding.LENGTH_DELIMITED, 
        Nick::class, 
        "type.googleapis.com/MessageEntities.Nick", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Nick): Int {
          var size = value.unknownFields.size
          if (value.bounds != null) size += Bounds.ADAPTER.encodedSizeWithTag(1, value.bounds)
          if (value.nick != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.nick)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Nick) {
          if (value.bounds != null) Bounds.ADAPTER.encodeWithTag(writer, 1, value.bounds)
          if (value.nick != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.nick)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Nick {
          var bounds: Bounds? = null
          var nick: String = ""
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> bounds = Bounds.ADAPTER.decode(reader)
              2 -> nick = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Nick(
            bounds = bounds,
            nick = nick,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Nick): Nick = value.copy(
          bounds = value.bounds?.let(Bounds.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Tag(
    @field:WireField(
      tag = 1,
      adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}Bounds#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
    )
    val bounds: Bounds? = null,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
    )
    val name: String = "",
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Tag, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Tag) return false
      if (unknownFields != other.unknownFields) return false
      if (bounds != other.bounds) return false
      if (name != other.name) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + bounds.hashCode()
        result = result * 37 + name.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (bounds != null) result += """bounds=$bounds"""
      result += """name=${sanitize(name)}"""
      return result.joinToString(prefix = "Tag{", separator = ", ", postfix = "}")
    }

    fun copy(
      bounds: Bounds? = this.bounds,
      name: String = this.name,
      unknownFields: ByteString = this.unknownFields
    ): Tag = Tag(bounds, name, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Tag> = object : ProtoAdapter<Tag>(
        FieldEncoding.LENGTH_DELIMITED, 
        Tag::class, 
        "type.googleapis.com/MessageEntities.Tag", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Tag): Int {
          var size = value.unknownFields.size
          if (value.bounds != null) size += Bounds.ADAPTER.encodedSizeWithTag(1, value.bounds)
          if (value.name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.name)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Tag) {
          if (value.bounds != null) Bounds.ADAPTER.encodeWithTag(writer, 1, value.bounds)
          if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Tag {
          var bounds: Bounds? = null
          var name: String = ""
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> bounds = Bounds.ADAPTER.decode(reader)
              2 -> name = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Tag(
            bounds = bounds,
            name = name,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Tag): Tag = value.copy(
          bounds = value.bounds?.let(Bounds.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class CodeBlock(
    @field:WireField(
      tag = 1,
      adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}Bounds#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
    )
    val bounds: Bounds? = null,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<CodeBlock, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is CodeBlock) return false
      if (unknownFields != other.unknownFields) return false
      if (bounds != other.bounds) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + bounds.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (bounds != null) result += """bounds=$bounds"""
      return result.joinToString(prefix = "CodeBlock{", separator = ", ", postfix = "}")
    }

    fun copy(bounds: Bounds? = this.bounds, unknownFields: ByteString = this.unknownFields):
        CodeBlock = CodeBlock(bounds, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<CodeBlock> = object : ProtoAdapter<CodeBlock>(
        FieldEncoding.LENGTH_DELIMITED, 
        CodeBlock::class, 
        "type.googleapis.com/MessageEntities.CodeBlock", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: CodeBlock): Int {
          var size = value.unknownFields.size
          if (value.bounds != null) size += Bounds.ADAPTER.encodedSizeWithTag(1, value.bounds)
          return size
        }

        override fun encode(writer: ProtoWriter, value: CodeBlock) {
          if (value.bounds != null) Bounds.ADAPTER.encodeWithTag(writer, 1, value.bounds)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): CodeBlock {
          var bounds: Bounds? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> bounds = Bounds.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return CodeBlock(
            bounds = bounds,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: CodeBlock): CodeBlock = value.copy(
          bounds = value.bounds?.let(Bounds.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Spoiler(
    @field:WireField(
      tag = 1,
      adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}Bounds#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
    )
    val bounds: Bounds? = null,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Spoiler, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Spoiler) return false
      if (unknownFields != other.unknownFields) return false
      if (bounds != other.bounds) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + bounds.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (bounds != null) result += """bounds=$bounds"""
      return result.joinToString(prefix = "Spoiler{", separator = ", ", postfix = "}")
    }

    fun copy(bounds: Bounds? = this.bounds, unknownFields: ByteString = this.unknownFields): Spoiler
        = Spoiler(bounds, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Spoiler> = object : ProtoAdapter<Spoiler>(
        FieldEncoding.LENGTH_DELIMITED, 
        Spoiler::class, 
        "type.googleapis.com/MessageEntities.Spoiler", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Spoiler): Int {
          var size = value.unknownFields.size
          if (value.bounds != null) size += Bounds.ADAPTER.encodedSizeWithTag(1, value.bounds)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Spoiler) {
          if (value.bounds != null) Bounds.ADAPTER.encodeWithTag(writer, 1, value.bounds)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Spoiler {
          var bounds: Bounds? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> bounds = Bounds.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Spoiler(
            bounds = bounds,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Spoiler): Spoiler = value.copy(
          bounds = value.bounds?.let(Bounds.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class GenericEntity(
    @field:WireField(
      tag = 1,
      adapter = "gg.strims.ppspp.proto.MessageEntities${'$'}Bounds#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
    )
    val bounds: Bounds? = null,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<GenericEntity, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is GenericEntity) return false
      if (unknownFields != other.unknownFields) return false
      if (bounds != other.bounds) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + bounds.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (bounds != null) result += """bounds=$bounds"""
      return result.joinToString(prefix = "GenericEntity{", separator = ", ", postfix = "}")
    }

    fun copy(bounds: Bounds? = this.bounds, unknownFields: ByteString = this.unknownFields):
        GenericEntity = GenericEntity(bounds, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<GenericEntity> = object : ProtoAdapter<GenericEntity>(
        FieldEncoding.LENGTH_DELIMITED, 
        GenericEntity::class, 
        "type.googleapis.com/MessageEntities.GenericEntity", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: GenericEntity): Int {
          var size = value.unknownFields.size
          if (value.bounds != null) size += Bounds.ADAPTER.encodedSizeWithTag(1, value.bounds)
          return size
        }

        override fun encode(writer: ProtoWriter, value: GenericEntity) {
          if (value.bounds != null) Bounds.ADAPTER.encodeWithTag(writer, 1, value.bounds)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): GenericEntity {
          var bounds: Bounds? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> bounds = Bounds.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return GenericEntity(
            bounds = bounds,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: GenericEntity): GenericEntity = value.copy(
          bounds = value.bounds?.let(Bounds.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
