// Code generated by Wire protocol buffer compiler, do not edit.
// Source: BrokerPeerEvent in vpn.proto
package gg.strims.ppspp.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.countNonNull
import com.squareup.wire.internal.immutableCopyOf
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class BrokerPeerEvent(
  @field:WireField(
    tag = 1,
    adapter = "gg.strims.ppspp.proto.BrokerPeerEvent${'$'}Open#ADAPTER"
  )
  val open: Open? = null,
  @field:WireField(
    tag = 2,
    adapter = "gg.strims.ppspp.proto.BrokerPeerEvent${'$'}Data#ADAPTER"
  )
  val data: Data? = null,
  @field:WireField(
    tag = 3,
    adapter = "gg.strims.ppspp.proto.BrokerPeerEvent${'$'}InitRequired#ADAPTER",
    jsonName = "initRequired"
  )
  val init_required: InitRequired? = null,
  @field:WireField(
    tag = 4,
    adapter = "gg.strims.ppspp.proto.BrokerPeerEvent${'$'}Keys#ADAPTER"
  )
  val keys: Keys? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<BrokerPeerEvent, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(open, data, init_required, keys) <= 1) {
      "At most one of open, data, init_required, keys may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is BrokerPeerEvent) return false
    if (unknownFields != other.unknownFields) return false
    if (open != other.open) return false
    if (data != other.data) return false
    if (init_required != other.init_required) return false
    if (keys != other.keys) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + open.hashCode()
      result = result * 37 + data.hashCode()
      result = result * 37 + init_required.hashCode()
      result = result * 37 + keys.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (open != null) result += """open=$open"""
    if (data != null) result += """data=$data"""
    if (init_required != null) result += """init_required=$init_required"""
    if (keys != null) result += """keys=$keys"""
    return result.joinToString(prefix = "BrokerPeerEvent{", separator = ", ", postfix = "}")
  }

  fun copy(
    open: Open? = this.open,
    data: Data? = this.data,
    init_required: InitRequired? = this.init_required,
    keys: Keys? = this.keys,
    unknownFields: ByteString = this.unknownFields
  ): BrokerPeerEvent = BrokerPeerEvent(open, data, init_required, keys, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<BrokerPeerEvent> = object : ProtoAdapter<BrokerPeerEvent>(
      FieldEncoding.LENGTH_DELIMITED, 
      BrokerPeerEvent::class, 
      "type.googleapis.com/BrokerPeerEvent", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: BrokerPeerEvent): Int {
        var size = value.unknownFields.size
        size += Open.ADAPTER.encodedSizeWithTag(1, value.open)
        size += Data.ADAPTER.encodedSizeWithTag(2, value.data)
        size += InitRequired.ADAPTER.encodedSizeWithTag(3, value.init_required)
        size += Keys.ADAPTER.encodedSizeWithTag(4, value.keys)
        return size
      }

      override fun encode(writer: ProtoWriter, value: BrokerPeerEvent) {
        Open.ADAPTER.encodeWithTag(writer, 1, value.open)
        Data.ADAPTER.encodeWithTag(writer, 2, value.data)
        InitRequired.ADAPTER.encodeWithTag(writer, 3, value.init_required)
        Keys.ADAPTER.encodeWithTag(writer, 4, value.keys)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): BrokerPeerEvent {
        var open: Open? = null
        var data: Data? = null
        var init_required: InitRequired? = null
        var keys: Keys? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> open = Open.ADAPTER.decode(reader)
            2 -> data = Data.ADAPTER.decode(reader)
            3 -> init_required = InitRequired.ADAPTER.decode(reader)
            4 -> keys = Keys.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return BrokerPeerEvent(
          open = open,
          data = data,
          init_required = init_required,
          keys = keys,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: BrokerPeerEvent): BrokerPeerEvent = value.copy(
        open = value.open?.let(Open.ADAPTER::redact),
        data = value.data?.let(Data.ADAPTER::redact),
        init_required = value.init_required?.let(InitRequired.ADAPTER::redact),
        keys = value.keys?.let(Keys.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  class Open(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "peerId"
    )
    val peer_id: Long = 0L,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Open, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Open) return false
      if (unknownFields != other.unknownFields) return false
      if (peer_id != other.peer_id) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + peer_id.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """peer_id=$peer_id"""
      return result.joinToString(prefix = "Open{", separator = ", ", postfix = "}")
    }

    fun copy(peer_id: Long = this.peer_id, unknownFields: ByteString = this.unknownFields): Open =
        Open(peer_id, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Open> = object : ProtoAdapter<Open>(
        FieldEncoding.LENGTH_DELIMITED, 
        Open::class, 
        "type.googleapis.com/BrokerPeerEvent.Open", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Open): Int {
          var size = value.unknownFields.size
          if (value.peer_id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1, value.peer_id)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Open) {
          if (value.peer_id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.peer_id)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Open {
          var peer_id: Long = 0L
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> peer_id = ProtoAdapter.UINT64.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Open(
            peer_id = peer_id,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Open): Open = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Data(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY
    )
    val data: ByteString = ByteString.EMPTY,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Data, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Data) return false
      if (unknownFields != other.unknownFields) return false
      if (data != other.data) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + data.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """data=$data"""
      return result.joinToString(prefix = "Data{", separator = ", ", postfix = "}")
    }

    fun copy(data: ByteString = this.data, unknownFields: ByteString = this.unknownFields): Data =
        Data(data, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Data> = object : ProtoAdapter<Data>(
        FieldEncoding.LENGTH_DELIMITED, 
        Data::class, 
        "type.googleapis.com/BrokerPeerEvent.Data", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Data): Int {
          var size = value.unknownFields.size
          if (value.data != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(1,
              value.data)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Data) {
          if (value.data != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 1,
              value.data)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Data {
          var data: ByteString = ByteString.EMPTY
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> data = ProtoAdapter.BYTES.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Data(
            data = data,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Data): Data = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class InitRequired(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY
    )
    val data: ByteString = ByteString.EMPTY,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<InitRequired, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is InitRequired) return false
      if (unknownFields != other.unknownFields) return false
      if (data != other.data) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + data.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """data=$data"""
      return result.joinToString(prefix = "InitRequired{", separator = ", ", postfix = "}")
    }

    fun copy(data: ByteString = this.data, unknownFields: ByteString = this.unknownFields):
        InitRequired = InitRequired(data, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<InitRequired> = object : ProtoAdapter<InitRequired>(
        FieldEncoding.LENGTH_DELIMITED, 
        InitRequired::class, 
        "type.googleapis.com/BrokerPeerEvent.InitRequired", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: InitRequired): Int {
          var size = value.unknownFields.size
          if (value.data != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(1,
              value.data)
          return size
        }

        override fun encode(writer: ProtoWriter, value: InitRequired) {
          if (value.data != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 1,
              value.data)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): InitRequired {
          var data: ByteString = ByteString.EMPTY
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> data = ProtoAdapter.BYTES.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return InitRequired(
            data = data,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: InitRequired): InitRequired = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Keys(
    keys: List<ByteString> = emptyList(),
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Keys, Nothing>(ADAPTER, unknownFields) {
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.REPEATED
    )
    val keys: List<ByteString> = immutableCopyOf("keys", keys)

    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Keys) return false
      if (unknownFields != other.unknownFields) return false
      if (keys != other.keys) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + keys.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (keys.isNotEmpty()) result += """keys=$keys"""
      return result.joinToString(prefix = "Keys{", separator = ", ", postfix = "}")
    }

    fun copy(keys: List<ByteString> = this.keys, unknownFields: ByteString = this.unknownFields):
        Keys = Keys(keys, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Keys> = object : ProtoAdapter<Keys>(
        FieldEncoding.LENGTH_DELIMITED, 
        Keys::class, 
        "type.googleapis.com/BrokerPeerEvent.Keys", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Keys): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(1, value.keys)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Keys) {
          ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 1, value.keys)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Keys {
          val keys = mutableListOf<ByteString>()
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> keys.add(ProtoAdapter.BYTES.decode(reader))
              else -> reader.readUnknownField(tag)
            }
          }
          return Keys(
            keys = keys,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Keys): Keys = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
