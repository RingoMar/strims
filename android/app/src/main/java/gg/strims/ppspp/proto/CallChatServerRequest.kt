// Code generated by Wire protocol buffer compiler, do not edit.
// Source: CallChatServerRequest in chat.proto
package gg.strims.ppspp.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class CallChatServerRequest(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "serverId"
  )
  val server_id: Long = 0L,
  @field:WireField(
    tag = 2,
    adapter = "gg.strims.ppspp.proto.CallChatServerRequest${'$'}Close#ADAPTER"
  )
  val close: Close? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<CallChatServerRequest, Nothing>(ADAPTER, unknownFields) {
  init {
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CallChatServerRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (server_id != other.server_id) return false
    if (close != other.close) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + server_id.hashCode()
      result = result * 37 + close.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """server_id=$server_id"""
    if (close != null) result += """close=$close"""
    return result.joinToString(prefix = "CallChatServerRequest{", separator = ", ", postfix = "}")
  }

  fun copy(
    server_id: Long = this.server_id,
    close: Close? = this.close,
    unknownFields: ByteString = this.unknownFields
  ): CallChatServerRequest = CallChatServerRequest(server_id, close, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<CallChatServerRequest> = object : ProtoAdapter<CallChatServerRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      CallChatServerRequest::class, 
      "type.googleapis.com/CallChatServerRequest", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: CallChatServerRequest): Int {
        var size = value.unknownFields.size
        if (value.server_id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1,
            value.server_id)
        size += Close.ADAPTER.encodedSizeWithTag(2, value.close)
        return size
      }

      override fun encode(writer: ProtoWriter, value: CallChatServerRequest) {
        if (value.server_id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.server_id)
        Close.ADAPTER.encodeWithTag(writer, 2, value.close)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): CallChatServerRequest {
        var server_id: Long = 0L
        var close: Close? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> server_id = ProtoAdapter.UINT64.decode(reader)
            2 -> close = Close.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return CallChatServerRequest(
          server_id = server_id,
          close = close,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: CallChatServerRequest): CallChatServerRequest = value.copy(
        close = value.close?.let(Close.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  class Close(
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Close, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Close) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    override fun hashCode(): Int = unknownFields.hashCode()

    override fun toString(): String = "Close{}"

    fun copy(unknownFields: ByteString = this.unknownFields): Close = Close(unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Close> = object : ProtoAdapter<Close>(
        FieldEncoding.LENGTH_DELIMITED, 
        Close::class, 
        "type.googleapis.com/CallChatServerRequest.Close", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Close): Int {
          var size = value.unknownFields.size
          return size
        }

        override fun encode(writer: ProtoWriter, value: Close) {
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Close {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return Close(
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Close): Close = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
