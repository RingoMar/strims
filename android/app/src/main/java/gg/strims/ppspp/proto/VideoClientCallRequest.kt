// Code generated by Wire protocol buffer compiler, do not edit.
// Source: VideoClientCallRequest in video.proto
package gg.strims.ppspp.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.countNonNull
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class VideoClientCallRequest(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  val id: Int = 0,
  @field:WireField(
    tag = 2,
    adapter = "gg.strims.ppspp.proto.VideoClientCallRequest${'$'}Data#ADAPTER"
  )
  val data: Data? = null,
  @field:WireField(
    tag = 3,
    adapter = "gg.strims.ppspp.proto.VideoClientCallRequest${'$'}RunClient#ADAPTER",
    jsonName = "runClient"
  )
  val run_client: RunClient? = null,
  @field:WireField(
    tag = 4,
    adapter = "gg.strims.ppspp.proto.VideoClientCallRequest${'$'}RunServer#ADAPTER",
    jsonName = "runServer"
  )
  val run_server: RunServer? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<VideoClientCallRequest, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(data, run_client, run_server) <= 1) {
      "At most one of data, run_client, run_server may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is VideoClientCallRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (data != other.data) return false
    if (run_client != other.run_client) return false
    if (run_server != other.run_server) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + data.hashCode()
      result = result * 37 + run_client.hashCode()
      result = result * 37 + run_server.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=$id"""
    if (data != null) result += """data=$data"""
    if (run_client != null) result += """run_client=$run_client"""
    if (run_server != null) result += """run_server=$run_server"""
    return result.joinToString(prefix = "VideoClientCallRequest{", separator = ", ", postfix = "}")
  }

  fun copy(
    id: Int = this.id,
    data: Data? = this.data,
    run_client: RunClient? = this.run_client,
    run_server: RunServer? = this.run_server,
    unknownFields: ByteString = this.unknownFields
  ): VideoClientCallRequest = VideoClientCallRequest(id, data, run_client, run_server,
      unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<VideoClientCallRequest> = object :
        ProtoAdapter<VideoClientCallRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      VideoClientCallRequest::class, 
      "type.googleapis.com/VideoClientCallRequest", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: VideoClientCallRequest): Int {
        var size = value.unknownFields.size
        if (value.id != 0) size += ProtoAdapter.UINT32.encodedSizeWithTag(1, value.id)
        size += Data.ADAPTER.encodedSizeWithTag(2, value.data)
        size += RunClient.ADAPTER.encodedSizeWithTag(3, value.run_client)
        size += RunServer.ADAPTER.encodedSizeWithTag(4, value.run_server)
        return size
      }

      override fun encode(writer: ProtoWriter, value: VideoClientCallRequest) {
        if (value.id != 0) ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.id)
        Data.ADAPTER.encodeWithTag(writer, 2, value.data)
        RunClient.ADAPTER.encodeWithTag(writer, 3, value.run_client)
        RunServer.ADAPTER.encodeWithTag(writer, 4, value.run_server)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): VideoClientCallRequest {
        var id: Int = 0
        var data: Data? = null
        var run_client: RunClient? = null
        var run_server: RunServer? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.UINT32.decode(reader)
            2 -> data = Data.ADAPTER.decode(reader)
            3 -> run_client = RunClient.ADAPTER.decode(reader)
            4 -> run_server = RunServer.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return VideoClientCallRequest(
          id = id,
          data = data,
          run_client = run_client,
          run_server = run_server,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: VideoClientCallRequest): VideoClientCallRequest = value.copy(
        data = value.data?.let(Data.ADAPTER::redact),
        run_client = value.run_client?.let(RunClient.ADAPTER::redact),
        run_server = value.run_server?.let(RunServer.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  class Data(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY
    )
    val body: ByteString = ByteString.EMPTY,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Data, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Data) return false
      if (unknownFields != other.unknownFields) return false
      if (body != other.body) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + body.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """body=$body"""
      return result.joinToString(prefix = "Data{", separator = ", ", postfix = "}")
    }

    fun copy(body: ByteString = this.body, unknownFields: ByteString = this.unknownFields): Data =
        Data(body, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Data> = object : ProtoAdapter<Data>(
        FieldEncoding.LENGTH_DELIMITED, 
        Data::class, 
        "type.googleapis.com/VideoClientCallRequest.Data", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Data): Int {
          var size = value.unknownFields.size
          if (value.body != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(1,
              value.body)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Data) {
          if (value.body != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 1,
              value.body)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Data {
          var body: ByteString = ByteString.EMPTY
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> body = ProtoAdapter.BYTES.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Data(
            body = body,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Data): Data = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class RunServer(
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<RunServer, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is RunServer) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    override fun hashCode(): Int = unknownFields.hashCode()

    override fun toString(): String = "RunServer{}"

    fun copy(unknownFields: ByteString = this.unknownFields): RunServer = RunServer(unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<RunServer> = object : ProtoAdapter<RunServer>(
        FieldEncoding.LENGTH_DELIMITED, 
        RunServer::class, 
        "type.googleapis.com/VideoClientCallRequest.RunServer", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: RunServer): Int {
          var size = value.unknownFields.size
          return size
        }

        override fun encode(writer: ProtoWriter, value: RunServer) {
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): RunServer {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return RunServer(
            unknownFields = unknownFields
          )
        }

        override fun redact(value: RunServer): RunServer = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class RunClient(
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<RunClient, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is RunClient) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    override fun hashCode(): Int = unknownFields.hashCode()

    override fun toString(): String = "RunClient{}"

    fun copy(unknownFields: ByteString = this.unknownFields): RunClient = RunClient(unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<RunClient> = object : ProtoAdapter<RunClient>(
        FieldEncoding.LENGTH_DELIMITED, 
        RunClient::class, 
        "type.googleapis.com/VideoClientCallRequest.RunClient", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: RunClient): Int {
          var size = value.unknownFields.size
          return size
        }

        override fun encode(writer: ProtoWriter, value: RunClient) {
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): RunClient {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return RunClient(
            unknownFields = unknownFields
          )
        }

        override fun redact(value: RunClient): RunClient = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
