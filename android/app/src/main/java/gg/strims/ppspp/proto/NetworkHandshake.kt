// Code generated by Wire protocol buffer compiler, do not edit.
// Source: NetworkHandshake in vpn.proto
package gg.strims.ppspp.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.countNonNull
import com.squareup.wire.internal.immutableCopyOf
import com.squareup.wire.internal.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class NetworkHandshake(
  @field:WireField(
    tag = 1,
    adapter = "gg.strims.ppspp.proto.NetworkHandshake${'$'}Init#ADAPTER"
  )
  val init: Init? = null,
  @field:WireField(
    tag = 2,
    adapter = "gg.strims.ppspp.proto.NetworkHandshake${'$'}NetworkBindings#ADAPTER",
    jsonName = "networkBindings"
  )
  val network_bindings: NetworkBindings? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<NetworkHandshake, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(init, network_bindings) <= 1) {
      "At most one of init, network_bindings may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is NetworkHandshake) return false
    if (unknownFields != other.unknownFields) return false
    if (init != other.init) return false
    if (network_bindings != other.network_bindings) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + init.hashCode()
      result = result * 37 + network_bindings.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (init != null) result += """init=$init"""
    if (network_bindings != null) result += """network_bindings=$network_bindings"""
    return result.joinToString(prefix = "NetworkHandshake{", separator = ", ", postfix = "}")
  }

  fun copy(
    init: Init? = this.init,
    network_bindings: NetworkBindings? = this.network_bindings,
    unknownFields: ByteString = this.unknownFields
  ): NetworkHandshake = NetworkHandshake(init, network_bindings, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<NetworkHandshake> = object : ProtoAdapter<NetworkHandshake>(
      FieldEncoding.LENGTH_DELIMITED, 
      NetworkHandshake::class, 
      "type.googleapis.com/NetworkHandshake", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: NetworkHandshake): Int {
        var size = value.unknownFields.size
        size += Init.ADAPTER.encodedSizeWithTag(1, value.init)
        size += NetworkBindings.ADAPTER.encodedSizeWithTag(2, value.network_bindings)
        return size
      }

      override fun encode(writer: ProtoWriter, value: NetworkHandshake) {
        Init.ADAPTER.encodeWithTag(writer, 1, value.init)
        NetworkBindings.ADAPTER.encodeWithTag(writer, 2, value.network_bindings)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): NetworkHandshake {
        var init: Init? = null
        var network_bindings: NetworkBindings? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> init = Init.ADAPTER.decode(reader)
            2 -> network_bindings = NetworkBindings.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return NetworkHandshake(
          init = init,
          network_bindings = network_bindings,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: NetworkHandshake): NetworkHandshake = value.copy(
        init = value.init?.let(Init.ADAPTER::redact),
        network_bindings = value.network_bindings?.let(NetworkBindings.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  class Init(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "keyCount"
    )
    val key_count: Int = 0,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Init, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Init) return false
      if (unknownFields != other.unknownFields) return false
      if (key_count != other.key_count) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + key_count.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """key_count=$key_count"""
      return result.joinToString(prefix = "Init{", separator = ", ", postfix = "}")
    }

    fun copy(key_count: Int = this.key_count, unknownFields: ByteString = this.unknownFields): Init
        = Init(key_count, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Init> = object : ProtoAdapter<Init>(
        FieldEncoding.LENGTH_DELIMITED, 
        Init::class, 
        "type.googleapis.com/NetworkHandshake.Init", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Init): Int {
          var size = value.unknownFields.size
          if (value.key_count != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(1,
              value.key_count)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Init) {
          if (value.key_count != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.key_count)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Init {
          var key_count: Int = 0
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> key_count = ProtoAdapter.INT32.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Init(
            key_count = key_count,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Init): Init = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class NetworkBinding(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.OMIT_IDENTITY
    )
    val port: Int = 0,
    @field:WireField(
      tag = 2,
      adapter = "gg.strims.ppspp.proto.Certificate#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
    )
    val certificate: Certificate? = null,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<NetworkBinding, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is NetworkBinding) return false
      if (unknownFields != other.unknownFields) return false
      if (port != other.port) return false
      if (certificate != other.certificate) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + port.hashCode()
        result = result * 37 + certificate.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """port=$port"""
      if (certificate != null) result += """certificate=$certificate"""
      return result.joinToString(prefix = "NetworkBinding{", separator = ", ", postfix = "}")
    }

    fun copy(
      port: Int = this.port,
      certificate: Certificate? = this.certificate,
      unknownFields: ByteString = this.unknownFields
    ): NetworkBinding = NetworkBinding(port, certificate, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<NetworkBinding> = object : ProtoAdapter<NetworkBinding>(
        FieldEncoding.LENGTH_DELIMITED, 
        NetworkBinding::class, 
        "type.googleapis.com/NetworkHandshake.NetworkBinding", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: NetworkBinding): Int {
          var size = value.unknownFields.size
          if (value.port != 0) size += ProtoAdapter.UINT32.encodedSizeWithTag(1, value.port)
          if (value.certificate != null) size += Certificate.ADAPTER.encodedSizeWithTag(2,
              value.certificate)
          return size
        }

        override fun encode(writer: ProtoWriter, value: NetworkBinding) {
          if (value.port != 0) ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.port)
          if (value.certificate != null) Certificate.ADAPTER.encodeWithTag(writer, 2,
              value.certificate)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): NetworkBinding {
          var port: Int = 0
          var certificate: Certificate? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> port = ProtoAdapter.UINT32.decode(reader)
              2 -> certificate = Certificate.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return NetworkBinding(
            port = port,
            certificate = certificate,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: NetworkBinding): NetworkBinding = value.copy(
          certificate = value.certificate?.let(Certificate.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class NetworkBindings(
    network_bindings: List<NetworkBinding> = emptyList(),
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<NetworkBindings, Nothing>(ADAPTER, unknownFields) {
    @field:WireField(
      tag = 2,
      adapter = "gg.strims.ppspp.proto.NetworkHandshake${'$'}NetworkBinding#ADAPTER",
      label = WireField.Label.REPEATED,
      jsonName = "networkBindings"
    )
    val network_bindings: List<NetworkBinding> = immutableCopyOf("network_bindings",
        network_bindings)

    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is NetworkBindings) return false
      if (unknownFields != other.unknownFields) return false
      if (network_bindings != other.network_bindings) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + network_bindings.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (network_bindings.isNotEmpty()) result += """network_bindings=$network_bindings"""
      return result.joinToString(prefix = "NetworkBindings{", separator = ", ", postfix = "}")
    }

    fun copy(network_bindings: List<NetworkBinding> = this.network_bindings,
        unknownFields: ByteString = this.unknownFields): NetworkBindings =
        NetworkBindings(network_bindings, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<NetworkBindings> = object : ProtoAdapter<NetworkBindings>(
        FieldEncoding.LENGTH_DELIMITED, 
        NetworkBindings::class, 
        "type.googleapis.com/NetworkHandshake.NetworkBindings", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: NetworkBindings): Int {
          var size = value.unknownFields.size
          size += NetworkBinding.ADAPTER.asRepeated().encodedSizeWithTag(2, value.network_bindings)
          return size
        }

        override fun encode(writer: ProtoWriter, value: NetworkBindings) {
          NetworkBinding.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.network_bindings)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): NetworkBindings {
          val network_bindings = mutableListOf<NetworkBinding>()
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              2 -> network_bindings.add(NetworkBinding.ADAPTER.decode(reader))
              else -> reader.readUnknownField(tag)
            }
          }
          return NetworkBindings(
            network_bindings = network_bindings,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: NetworkBindings): NetworkBindings = value.copy(
          network_bindings = value.network_bindings.redactElements(NetworkBinding.ADAPTER),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
