// Code generated by Wire protocol buffer compiler, do not edit.
// Source: strims.network.v1.BrokerProxyEvent in network/v1/broker_proxy.proto
package gg.strims.network.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.countNonNull
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class BrokerProxyEvent(
  @field:WireField(
    tag = 1,
    adapter = "gg.strims.network.v1.BrokerProxyEvent${'$'}Open#ADAPTER"
  )
  val open: Open? = null,
  @field:WireField(
    tag = 2,
    adapter = "gg.strims.network.v1.BrokerProxyEvent${'$'}Data#ADAPTER"
  )
  val data: Data? = null,
  @field:WireField(
    tag = 3,
    adapter = "gg.strims.network.v1.BrokerProxyEvent${'$'}Read#ADAPTER"
  )
  val read: Read? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<BrokerProxyEvent, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(open, data, read) <= 1) {
      "At most one of open, data, read may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is BrokerProxyEvent) return false
    if (unknownFields != other.unknownFields) return false
    if (open != other.open) return false
    if (data != other.data) return false
    if (read != other.read) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + open.hashCode()
      result = result * 37 + data.hashCode()
      result = result * 37 + read.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (open != null) result += """open=$open"""
    if (data != null) result += """data=$data"""
    if (read != null) result += """read=$read"""
    return result.joinToString(prefix = "BrokerProxyEvent{", separator = ", ", postfix = "}")
  }

  fun copy(
    open: Open? = this.open,
    data: Data? = this.data,
    read: Read? = this.read,
    unknownFields: ByteString = this.unknownFields
  ): BrokerProxyEvent = BrokerProxyEvent(open, data, read, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<BrokerProxyEvent> = object : ProtoAdapter<BrokerProxyEvent>(
      FieldEncoding.LENGTH_DELIMITED, 
      BrokerProxyEvent::class, 
      "type.googleapis.com/strims.network.v1.BrokerProxyEvent", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: BrokerProxyEvent): Int {
        var size = value.unknownFields.size
        size += Open.ADAPTER.encodedSizeWithTag(1, value.open)
        size += Data.ADAPTER.encodedSizeWithTag(2, value.data)
        size += Read.ADAPTER.encodedSizeWithTag(3, value.read)
        return size
      }

      override fun encode(writer: ProtoWriter, value: BrokerProxyEvent) {
        Open.ADAPTER.encodeWithTag(writer, 1, value.open)
        Data.ADAPTER.encodeWithTag(writer, 2, value.data)
        Read.ADAPTER.encodeWithTag(writer, 3, value.read)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): BrokerProxyEvent {
        var open: Open? = null
        var data: Data? = null
        var read: Read? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> open = Open.ADAPTER.decode(reader)
            2 -> data = Data.ADAPTER.decode(reader)
            3 -> read = Read.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return BrokerProxyEvent(
          open = open,
          data = data,
          read = read,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: BrokerProxyEvent): BrokerProxyEvent = value.copy(
        open = value.open?.let(Open.ADAPTER::redact),
        data = value.data?.let(Data.ADAPTER::redact),
        read = value.read?.let(Read.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  class Open(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "proxyId"
    )
    val proxy_id: Long = 0L,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Open, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Open) return false
      if (unknownFields != other.unknownFields) return false
      if (proxy_id != other.proxy_id) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + proxy_id.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """proxy_id=$proxy_id"""
      return result.joinToString(prefix = "Open{", separator = ", ", postfix = "}")
    }

    fun copy(proxy_id: Long = this.proxy_id, unknownFields: ByteString = this.unknownFields): Open =
        Open(proxy_id, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Open> = object : ProtoAdapter<Open>(
        FieldEncoding.LENGTH_DELIMITED, 
        Open::class, 
        "type.googleapis.com/strims.network.v1.BrokerProxyEvent.Open", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Open): Int {
          var size = value.unknownFields.size
          if (value.proxy_id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1,
              value.proxy_id)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Open) {
          if (value.proxy_id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.proxy_id)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Open {
          var proxy_id: Long = 0L
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> proxy_id = ProtoAdapter.UINT64.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Open(
            proxy_id = proxy_id,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Open): Open = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Data(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.OMIT_IDENTITY
    )
    val data: ByteString = ByteString.EMPTY,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Data, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Data) return false
      if (unknownFields != other.unknownFields) return false
      if (data != other.data) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + data.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """data=$data"""
      return result.joinToString(prefix = "Data{", separator = ", ", postfix = "}")
    }

    fun copy(data: ByteString = this.data, unknownFields: ByteString = this.unknownFields): Data =
        Data(data, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Data> = object : ProtoAdapter<Data>(
        FieldEncoding.LENGTH_DELIMITED, 
        Data::class, 
        "type.googleapis.com/strims.network.v1.BrokerProxyEvent.Data", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Data): Int {
          var size = value.unknownFields.size
          if (value.data != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(1,
              value.data)
          return size
        }

        override fun encode(writer: ProtoWriter, value: Data) {
          if (value.data != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 1,
              value.data)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Data {
          var data: ByteString = ByteString.EMPTY
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> data = ProtoAdapter.BYTES.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Data(
            data = data,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Data): Data = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class Read(
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Read, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Read) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    override fun hashCode(): Int = unknownFields.hashCode()

    override fun toString(): String = "Read{}"

    fun copy(unknownFields: ByteString = this.unknownFields): Read = Read(unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Read> = object : ProtoAdapter<Read>(
        FieldEncoding.LENGTH_DELIMITED, 
        Read::class, 
        "type.googleapis.com/strims.network.v1.BrokerProxyEvent.Read", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: Read): Int {
          var size = value.unknownFields.size
          return size
        }

        override fun encode(writer: ProtoWriter, value: Read) {
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Read {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return Read(
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Read): Read = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
