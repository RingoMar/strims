// Code generated by Wire protocol buffer compiler, do not edit.
// Source: strims.network.v1.bootstrap.BootstrapClient in network/v1/bootstrap/bootstrap.proto
package gg.strims.network.v1.bootstrap

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class BootstrapClient(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  val id: Long = 0L,
  @field:WireField(
    tag = 2,
    adapter = "gg.strims.network.v1.bootstrap.BootstrapClientWebSocketOptions#ADAPTER",
    jsonName = "websocketOptions"
  )
  val websocket_options: BootstrapClientWebSocketOptions? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<BootstrapClient, Nothing>(ADAPTER, unknownFields) {
  init {
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is BootstrapClient) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (websocket_options != other.websocket_options) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + websocket_options.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=$id"""
    if (websocket_options != null) result += """websocket_options=$websocket_options"""
    return result.joinToString(prefix = "BootstrapClient{", separator = ", ", postfix = "}")
  }

  fun copy(
    id: Long = this.id,
    websocket_options: BootstrapClientWebSocketOptions? = this.websocket_options,
    unknownFields: ByteString = this.unknownFields
  ): BootstrapClient = BootstrapClient(id, websocket_options, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<BootstrapClient> = object : ProtoAdapter<BootstrapClient>(
      FieldEncoding.LENGTH_DELIMITED, 
      BootstrapClient::class, 
      "type.googleapis.com/strims.network.v1.bootstrap.BootstrapClient", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: BootstrapClient): Int {
        var size = value.unknownFields.size
        if (value.id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id)
        size += BootstrapClientWebSocketOptions.ADAPTER.encodedSizeWithTag(2,
            value.websocket_options)
        return size
      }

      override fun encode(writer: ProtoWriter, value: BootstrapClient) {
        if (value.id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id)
        BootstrapClientWebSocketOptions.ADAPTER.encodeWithTag(writer, 2, value.websocket_options)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): BootstrapClient {
        var id: Long = 0L
        var websocket_options: BootstrapClientWebSocketOptions? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.UINT64.decode(reader)
            2 -> websocket_options = BootstrapClientWebSocketOptions.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return BootstrapClient(
          id = id,
          websocket_options = websocket_options,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: BootstrapClient): BootstrapClient = value.copy(
        websocket_options =
            value.websocket_options?.let(BootstrapClientWebSocketOptions.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
