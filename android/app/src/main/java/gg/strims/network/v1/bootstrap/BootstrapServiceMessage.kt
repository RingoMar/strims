// Code generated by Wire protocol buffer compiler, do not edit.
// Source: strims.network.v1.bootstrap.BootstrapServiceMessage in network/v1/bootstrap/bootstrap.proto
package gg.strims.network.v1.bootstrap

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.internal.countNonNull
import com.squareup.wire.internal.sanitize
import gg.strims.type.Certificate
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class BootstrapServiceMessage(
  @field:WireField(
    tag = 1,
    adapter = "gg.strims.network.v1.bootstrap.BootstrapServiceMessage${'$'}BrokerOffer#ADAPTER",
    jsonName = "brokerOffer"
  )
  val broker_offer: BrokerOffer? = null,
  @field:WireField(
    tag = 2,
    adapter = "gg.strims.network.v1.bootstrap.BootstrapServiceMessage${'$'}PublishRequest#ADAPTER",
    jsonName = "publishRequest"
  )
  val publish_request: PublishRequest? = null,
  @field:WireField(
    tag = 3,
    adapter = "gg.strims.network.v1.bootstrap.BootstrapServiceMessage${'$'}PublishResponse#ADAPTER",
    jsonName = "publishResponse"
  )
  val publish_response: PublishResponse? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<BootstrapServiceMessage, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(broker_offer, publish_request, publish_response) <= 1) {
      "At most one of broker_offer, publish_request, publish_response may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is BootstrapServiceMessage) return false
    if (unknownFields != other.unknownFields) return false
    if (broker_offer != other.broker_offer) return false
    if (publish_request != other.publish_request) return false
    if (publish_response != other.publish_response) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + broker_offer.hashCode()
      result = result * 37 + publish_request.hashCode()
      result = result * 37 + publish_response.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (broker_offer != null) result += """broker_offer=$broker_offer"""
    if (publish_request != null) result += """publish_request=$publish_request"""
    if (publish_response != null) result += """publish_response=$publish_response"""
    return result.joinToString(prefix = "BootstrapServiceMessage{", separator = ", ", postfix = "}")
  }

  fun copy(
    broker_offer: BrokerOffer? = this.broker_offer,
    publish_request: PublishRequest? = this.publish_request,
    publish_response: PublishResponse? = this.publish_response,
    unknownFields: ByteString = this.unknownFields
  ): BootstrapServiceMessage = BootstrapServiceMessage(broker_offer, publish_request,
      publish_response, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<BootstrapServiceMessage> = object :
        ProtoAdapter<BootstrapServiceMessage>(
      FieldEncoding.LENGTH_DELIMITED, 
      BootstrapServiceMessage::class, 
      "type.googleapis.com/strims.network.v1.bootstrap.BootstrapServiceMessage", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: BootstrapServiceMessage): Int {
        var size = value.unknownFields.size
        size += BrokerOffer.ADAPTER.encodedSizeWithTag(1, value.broker_offer)
        size += PublishRequest.ADAPTER.encodedSizeWithTag(2, value.publish_request)
        size += PublishResponse.ADAPTER.encodedSizeWithTag(3, value.publish_response)
        return size
      }

      override fun encode(writer: ProtoWriter, value: BootstrapServiceMessage) {
        BrokerOffer.ADAPTER.encodeWithTag(writer, 1, value.broker_offer)
        PublishRequest.ADAPTER.encodeWithTag(writer, 2, value.publish_request)
        PublishResponse.ADAPTER.encodeWithTag(writer, 3, value.publish_response)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): BootstrapServiceMessage {
        var broker_offer: BrokerOffer? = null
        var publish_request: PublishRequest? = null
        var publish_response: PublishResponse? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> broker_offer = BrokerOffer.ADAPTER.decode(reader)
            2 -> publish_request = PublishRequest.ADAPTER.decode(reader)
            3 -> publish_response = PublishResponse.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return BootstrapServiceMessage(
          broker_offer = broker_offer,
          publish_request = publish_request,
          publish_response = publish_response,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: BootstrapServiceMessage): BootstrapServiceMessage = value.copy(
        broker_offer = value.broker_offer?.let(BrokerOffer.ADAPTER::redact),
        publish_request = value.publish_request?.let(PublishRequest.ADAPTER::redact),
        publish_response = value.publish_response?.let(PublishResponse.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  class BrokerOffer(
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<BrokerOffer, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is BrokerOffer) return false
      if (unknownFields != other.unknownFields) return false
      return true
    }

    override fun hashCode(): Int = unknownFields.hashCode()

    override fun toString(): String = "BrokerOffer{}"

    fun copy(unknownFields: ByteString = this.unknownFields): BrokerOffer =
        BrokerOffer(unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<BrokerOffer> = object : ProtoAdapter<BrokerOffer>(
        FieldEncoding.LENGTH_DELIMITED, 
        BrokerOffer::class, 
        "type.googleapis.com/strims.network.v1.bootstrap.BootstrapServiceMessage.BrokerOffer", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: BrokerOffer): Int {
          var size = value.unknownFields.size
          return size
        }

        override fun encode(writer: ProtoWriter, value: BrokerOffer) {
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): BrokerOffer {
          val unknownFields = reader.forEachTag(reader::readUnknownField)
          return BrokerOffer(
            unknownFields = unknownFields
          )
        }

        override fun redact(value: BrokerOffer): BrokerOffer = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class PublishRequest(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
    )
    val name: String = "",
    @field:WireField(
      tag = 2,
      adapter = "gg.strims.type.Certificate#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
    )
    val certificate: Certificate? = null,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<PublishRequest, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is PublishRequest) return false
      if (unknownFields != other.unknownFields) return false
      if (name != other.name) return false
      if (certificate != other.certificate) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + name.hashCode()
        result = result * 37 + certificate.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      result += """name=${sanitize(name)}"""
      if (certificate != null) result += """certificate=$certificate"""
      return result.joinToString(prefix = "PublishRequest{", separator = ", ", postfix = "}")
    }

    fun copy(
      name: String = this.name,
      certificate: Certificate? = this.certificate,
      unknownFields: ByteString = this.unknownFields
    ): PublishRequest = PublishRequest(name, certificate, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<PublishRequest> = object : ProtoAdapter<PublishRequest>(
        FieldEncoding.LENGTH_DELIMITED, 
        PublishRequest::class, 
        "type.googleapis.com/strims.network.v1.bootstrap.BootstrapServiceMessage.PublishRequest", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: PublishRequest): Int {
          var size = value.unknownFields.size
          if (value.name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.name)
          if (value.certificate != null) size += Certificate.ADAPTER.encodedSizeWithTag(2,
              value.certificate)
          return size
        }

        override fun encode(writer: ProtoWriter, value: PublishRequest) {
          if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
          if (value.certificate != null) Certificate.ADAPTER.encodeWithTag(writer, 2,
              value.certificate)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): PublishRequest {
          var name: String = ""
          var certificate: Certificate? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> name = ProtoAdapter.STRING.decode(reader)
              2 -> certificate = Certificate.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return PublishRequest(
            name = name,
            certificate = certificate,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: PublishRequest): PublishRequest = value.copy(
          certificate = value.certificate?.let(Certificate.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  class PublishResponse(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    val error: String? = null,
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<PublishResponse, Nothing>(ADAPTER, unknownFields) {
    init {
    }

    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is PublishResponse) return false
      if (unknownFields != other.unknownFields) return false
      if (error != other.error) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + error.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (error != null) result += """error=${sanitize(error)}"""
      return result.joinToString(prefix = "PublishResponse{", separator = ", ", postfix = "}")
    }

    fun copy(error: String? = this.error, unknownFields: ByteString = this.unknownFields):
        PublishResponse = PublishResponse(error, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<PublishResponse> = object : ProtoAdapter<PublishResponse>(
        FieldEncoding.LENGTH_DELIMITED, 
        PublishResponse::class, 
        "type.googleapis.com/strims.network.v1.bootstrap.BootstrapServiceMessage.PublishResponse", 
        PROTO_3, 
        null
      ) {
        override fun encodedSize(value: PublishResponse): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.error)
          return size
        }

        override fun encode(writer: ProtoWriter, value: PublishResponse) {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.error)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): PublishResponse {
          var error: String? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> error = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return PublishResponse(
            error = error,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: PublishResponse): PublishResponse = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
