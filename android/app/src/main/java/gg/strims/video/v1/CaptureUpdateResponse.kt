// Code generated by Wire protocol buffer compiler, do not edit.
// Source: strims.video.v1.CaptureUpdateResponse in video/v1/capture.proto
package gg.strims.video.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.jvm.JvmField
import okio.ByteString

class CaptureUpdateResponse(
  unknownFields: ByteString = ByteString.EMPTY
) : Message<CaptureUpdateResponse, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CaptureUpdateResponse) return false
    if (unknownFields != other.unknownFields) return false
    return true
  }

  override fun hashCode(): Int = unknownFields.hashCode()

  override fun toString(): String = "CaptureUpdateResponse{}"

  fun copy(unknownFields: ByteString = this.unknownFields): CaptureUpdateResponse =
      CaptureUpdateResponse(unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<CaptureUpdateResponse> = object : ProtoAdapter<CaptureUpdateResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      CaptureUpdateResponse::class, 
      "type.googleapis.com/strims.video.v1.CaptureUpdateResponse", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: CaptureUpdateResponse): Int {
        var size = value.unknownFields.size
        return size
      }

      override fun encode(writer: ProtoWriter, value: CaptureUpdateResponse) {
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): CaptureUpdateResponse {
        val unknownFields = reader.forEachTag(reader::readUnknownField)
        return CaptureUpdateResponse(
          unknownFields = unknownFields
        )
      }

      override fun redact(value: CaptureUpdateResponse): CaptureUpdateResponse = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
