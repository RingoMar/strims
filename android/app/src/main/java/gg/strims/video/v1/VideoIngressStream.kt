// Code generated by Wire protocol buffer compiler, do not edit.
// Source: strims.video.v1.VideoIngressStream in video/v1/ingress.proto
package gg.strims.video.v1

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class VideoIngressStream(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY
  )
  val id: Long = 0L,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "channelId"
  )
  val channel_id: Long = 0L,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "createdAt"
  )
  val created_at: Long = 0L,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "updatedAt"
  )
  val updated_at: Long = 0L,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<VideoIngressStream, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is VideoIngressStream) return false
    if (unknownFields != other.unknownFields) return false
    if (id != other.id) return false
    if (channel_id != other.channel_id) return false
    if (created_at != other.created_at) return false
    if (updated_at != other.updated_at) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + channel_id.hashCode()
      result = result * 37 + created_at.hashCode()
      result = result * 37 + updated_at.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """id=$id"""
    result += """channel_id=$channel_id"""
    result += """created_at=$created_at"""
    result += """updated_at=$updated_at"""
    return result.joinToString(prefix = "VideoIngressStream{", separator = ", ", postfix = "}")
  }

  fun copy(
    id: Long = this.id,
    channel_id: Long = this.channel_id,
    created_at: Long = this.created_at,
    updated_at: Long = this.updated_at,
    unknownFields: ByteString = this.unknownFields
  ): VideoIngressStream = VideoIngressStream(id, channel_id, created_at, updated_at, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<VideoIngressStream> = object : ProtoAdapter<VideoIngressStream>(
      FieldEncoding.LENGTH_DELIMITED, 
      VideoIngressStream::class, 
      "type.googleapis.com/strims.video.v1.VideoIngressStream", 
      PROTO_3, 
      null
    ) {
      override fun encodedSize(value: VideoIngressStream): Int {
        var size = value.unknownFields.size
        if (value.id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id)
        if (value.channel_id != 0L) size += ProtoAdapter.UINT64.encodedSizeWithTag(2,
            value.channel_id)
        if (value.created_at != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(3,
            value.created_at)
        if (value.updated_at != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(4,
            value.updated_at)
        return size
      }

      override fun encode(writer: ProtoWriter, value: VideoIngressStream) {
        if (value.id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id)
        if (value.channel_id != 0L) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.channel_id)
        if (value.created_at != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 3, value.created_at)
        if (value.updated_at != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.updated_at)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): VideoIngressStream {
        var id: Long = 0L
        var channel_id: Long = 0L
        var created_at: Long = 0L
        var updated_at: Long = 0L
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> id = ProtoAdapter.UINT64.decode(reader)
            2 -> channel_id = ProtoAdapter.UINT64.decode(reader)
            3 -> created_at = ProtoAdapter.INT64.decode(reader)
            4 -> updated_at = ProtoAdapter.INT64.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return VideoIngressStream(
          id = id,
          channel_id = channel_id,
          created_at = created_at,
          updated_at = updated_at,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: VideoIngressStream): VideoIngressStream = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
