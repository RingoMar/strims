// Copyright 2022 Strims contributors
// SPDX-License-Identifier: AGPL-3.0-only

syntax = "proto3";

package strims.profile.v1;

option go_package = "github.com/MemeLabs/strims/pkg/apis/profile/v1;profilev1";
option java_package = "gg.strims.profile.v1";
option swift_prefix = "SPF";

import "type/key.proto";
import "dao/v1/dao.proto";

message UpdateProfileRequest {
  string name = 1;
  string password = 2;
}

message UpdateProfileResponse {
  Profile profile = 1;
}

message GetProfileRequest {}

message GetProfileResponse {
  Profile profile = 2;
}

message StorageKey {
  KDFType kdf_type = 1;
  oneof kdf_options {
    PBKDF2Options pbkdf2_options = 2;
  }

  message PBKDF2Options {
    uint32 iterations = 1;
    uint32 key_size = 2;
    bytes salt = 3;
  }
}

enum KDFType {
  KDF_TYPE_UNDEFINED = 0;
  KDF_TYPE_PBKDF2_SHA256 = 1;
}

message Device {
  uint64 id = 1;
  dao.v1.VersionVector version = 2;
  string device = 3;
  string os = 4;
}

message Profile {
  uint64 id = 1;
  string name = 2;
  bytes secret = 3;
  strims.type.Key key = 4;
  uint64 device_id = 5;
}

message ProfileID {
  uint64 next_id = 1;
  uint64 last_id = 2;
  ProfileID next_range = 3;
}

message DeleteDeviceRequest {
  uint64 id = 1;
}

message DeleteDeviceResponse {}

message GetDeviceRequest {
  uint64 id = 1;
}

message GetDeviceResponse {
  Device device = 1;
}

message ListDevicesRequest {}

message ListDevicesResponse {
  repeated Device devices = 1;
  Device current_device = 2;
}

service ProfileFrontend {
  rpc Get(GetProfileRequest) returns (GetProfileResponse);
  rpc Update(UpdateProfileRequest) returns (UpdateProfileResponse);
  rpc DeleteDevice(DeleteDeviceRequest) returns (DeleteDeviceResponse);
  rpc GetDevice(GetDeviceRequest) returns (GetDeviceResponse);
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse);
}
