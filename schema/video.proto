syntax = "proto3";

option go_package = "github.com/MemeLabs/go-ppspp/pkg/pb;pb";
option java_package = "gg.strims.ppspp.proto";
option swift_prefix = "PB";

import "profile.proto";
import "directory.proto";

message VideoChannel {
  message Local {
    bytes auth_key = 1;
    bytes network_key = 2;
  }

  message LocalShare {
    Certificate certificate = 1;
  }

  message RemoteShare {
    uint64 id = 1;
    bytes network_key = 2;
    bytes service_key = 3;
    bytes service_salt = 4;
    string server_addr = 5;
  }

  uint64 id = 1;
  oneof owner {
    Local local = 1001;
    LocalShare local_share = 1002;
    RemoteShare remote_share = 1003;
  }
  Key key = 2;
  bytes token = 3;
  DirectoryListingSnippet directory_listing_snippet = 4;
}

message VideoChannelListRequest {}

message VideoChannelListResponse {
  repeated VideoChannel channels = 1;
}

message VideoChannelCreateRequest {
  DirectoryListingSnippet directory_listing_snippet = 1;
  bytes network_key = 2;
}

message VideoChannelCreateResponse {
  VideoChannel channel = 1;
}

message VideoChannelUpdateRequest {
  uint64 id = 1;
  DirectoryListingSnippet directory_listing_snippet = 2;
  bytes network_key = 3;
}

message VideoChannelUpdateResponse {
  VideoChannel channel = 1;
}

message VideoChannelDeleteRequest {
  uint64 id = 1;
}

message VideoChannelDeleteResponse {}

service VideoChannel {
  rpc List(VideoChannelListRequest) returns (VideoChannelListResponse);
  rpc Create(VideoChannelCreateRequest) returns (VideoChannelCreateResponse);
  rpc Update(VideoChannelUpdateRequest) returns (VideoChannelUpdateResponse);
  rpc Delete(VideoChannelDeleteRequest) returns (VideoChannelDeleteResponse);
}

message VideoIngressConfig {
  bool enabled = 1;
  string server_addr = 2;
  string public_server_addr = 3;
  repeated bytes service_network_keys = 4;
}

message VideoIngressStream {
  uint64 id = 1;
  uint64 channel_id = 2;
  int64 created_at = 3;
  int64 updated_at = 4;
}

message VideoIngressIsSupportedRequest {}

message VideoIngressIsSupportedResponse {
  bool supported = 1;
}

message VideoIngressGetConfigRequest {}

message VideoIngressGetConfigResponse {
  VideoIngressConfig config = 1;
}

message VideoIngressSetConfigRequest {
  VideoIngressConfig config = 1;
}

message VideoIngressSetConfigResponse {
  VideoIngressConfig config = 1;
}

message VideoIngressListStreamsRequest {}

message VideoIngressListStreamsResponse {
  repeated VideoIngressStream streams = 1;
}

message VideoIngressGetChannelURLRequest {
  uint64 id = 1;
}

message VideoIngressGetChannelURLResponse {
  string url = 1;
  string server_addr = 2;
  string stream_key = 3;
}

service VideoIngress {
  rpc IsSupported(VideoIngressIsSupportedRequest) returns (VideoIngressIsSupportedResponse);
  rpc GetConfig(VideoIngressGetConfigRequest) returns (VideoIngressGetConfigResponse);
  rpc SetConfig(VideoIngressSetConfigRequest) returns (VideoIngressSetConfigResponse);
  rpc ListStreams(VideoIngressListStreamsRequest) returns (VideoIngressListStreamsResponse);
  rpc GetChannelURL(VideoIngressGetChannelURLRequest) returns (VideoIngressGetChannelURLResponse);
}

message VideoIngressShareCreateChannelRequest {
  DirectoryListingSnippet directory_listing_snippet = 1;
}

message VideoIngressShareCreateChannelResponse {
  VideoChannel channel = 1;
}

message VideoIngressShareUpdateChannelRequest {
  DirectoryListingSnippet directory_listing_snippet = 1;
}

message VideoIngressShareUpdateChannelResponse {
  VideoChannel channel = 1;
}

message VideoIngressShareDeleteChannelRequest {}

message VideoIngressShareDeleteChannelResponse {}

service VideoIngressShare {
  rpc CreateChannel(VideoIngressShareCreateChannelRequest) returns (VideoIngressShareCreateChannelResponse);
  rpc UpdateChannel(VideoIngressShareUpdateChannelRequest) returns (VideoIngressShareUpdateChannelResponse);
  rpc DeleteChannel(VideoIngressShareDeleteChannelRequest) returns (VideoIngressShareDeleteChannelResponse);
}

message JoinSwarmRequest {
  string swarm_uri = 1;
}
message JoinSwarmResponse {}
message LeaveSwarmRequest {
  string swarm_uri = 1;
}
message LeaveSwarmResponse {}
message GetIngressStreamsRequest {}
message GetIngressStreamsResponse {
  string swarm_uri = 1;
}
message StartRTMPIngressRequest {}
message StartRTMPIngressResponse {}
message StartHLSEgressRequest {
  uint64 video_id = 1;
  string address = 2;
}
message StartHLSEgressResponse {
  uint64 id = 1;
  string url = 2;
}
message StopHLSEgressRequest {
  uint64 id = 1;
}
message StopHLSEgressResponse {}

message StartSwarmRequest {}
message StartSwarmResponse {
  uint64 id = 1;
}
message WriteToSwarmRequest {
  uint64 id = 1;
  bytes data = 2;
}
message WriteToSwarmResponse {
  string error = 1;
}
message StopSwarmRequest {
  uint64 id = 1;
}
message StopSwarmResponse {}
message PublishSwarmRequest {
  uint64 id = 1;
  bytes network_key = 2;
}
message PublishSwarmResponse {}

message OpenVideoServerRequest {}
message VideoServerOpenResponse {
  uint64 id = 1;
}

message WriteToVideoServerRequest {
  uint64 id = 1;
  bytes data = 2;
  bool flush = 3;
}
message WriteToVideoServerResponse {}

message OpenVideoClientRequest {
  bytes swarm_key = 1;
  bool emit_data = 2;
}

message VideoClientEvent {
  message Data {
    bytes data = 1;
    bool flush = 2;
  }

  message Open {
    uint64 id = 1;
  }

  message Close {}

  oneof body {
    Data data = 1;
    Open open = 2;
    Close close = 3;
  }
}

message VideoClientCallRequest {
  message Data {
    bytes body = 1;
  }

  message RunServer {}

  message RunClient {}

  uint32 id = 1;
  oneof body {
    Data data = 2;
    RunClient run_client = 3;
    RunServer run_server = 4;
  }
}

message SwarmThingMessage {
  message Open {
    bytes swarm_id = 1;
    uint32 port = 2;
  }

  message Close {
    bytes swarm_id = 1;
  }

  oneof body {
    Open open = 1;
    Close close = 2;
  }
}

service Video {
  rpc OpenClient(OpenVideoClientRequest) returns (stream VideoClientEvent);
  rpc OpenServer(OpenVideoServerRequest) returns (VideoServerOpenResponse);
  rpc WriteToServer(WriteToVideoServerRequest) returns (WriteToVideoServerResponse);
  rpc PublishSwarm(PublishSwarmRequest) returns (PublishSwarmResponse);
  // rpc GetIngressStreams(GetIngressStreamsRequest) returns (stream GetIngressStreamsResponse);
  rpc StartRTMPIngress(StartRTMPIngressRequest) returns (StartRTMPIngressResponse);
  // rpc StopRTMPIngress(StartRTMPIngressRequest) returns (StartRTMPIngressResponse);
  rpc StartHLSEgress(StartHLSEgressRequest) returns (StartHLSEgressResponse);
  rpc StopHLSEgress(StopHLSEgressRequest) returns (StopHLSEgressResponse);
}
