syntax = "proto3";

option go_package = "github.com/MemeLabs/go-ppspp/pkg/pb;pb";
option java_package = "gg.strims.ppspp.proto";
option swift_prefix = "PB";

message JoinSwarmRequest {
  string swarm_uri = 1;
}
message JoinSwarmResponse {}
message LeaveSwarmRequest {
  string swarm_uri = 1;
}
message LeaveSwarmResponse {}
message GetIngressStreamsRequest {}
message GetIngressStreamsResponse {
  string swarm_uri = 1;
}
message StartRTMPIngressRequest {}
message StartRTMPIngressResponse {}
message StartHLSEgressRequest {
  uint64 video_id = 1;
  string address = 2;
}
message StartHLSEgressResponse {
  uint64 id = 1;
  string url = 2;
}
message StopHLSEgressRequest {
  uint64 id = 1;
}
message StopHLSEgressResponse {}

message StartSwarmRequest {}
message StartSwarmResponse {
  uint64 id = 1;
}
message WriteToSwarmRequest {
  uint64 id = 1;
  bytes data = 2;
}
message WriteToSwarmResponse {
  string error = 1;
}
message StopSwarmRequest {
  uint64 id = 1;
}
message StopSwarmResponse {}
message PublishSwarmRequest {
  uint64 id = 1;
  bytes network_key = 2;
}
message PublishSwarmResponse {}

message OpenVideoServerRequest {}
message VideoServerOpenResponse {
  uint64 id = 1;
}

message WriteToVideoServerRequest {
  uint64 id = 1;
  bytes data = 2;
  bool flush = 3;
}
message WriteToVideoServerResponse {}

message OpenVideoClientRequest {
  bytes swarm_key = 1;
  bool emit_data = 2;
}

message VideoClientEvent {
  message Data {
    bytes data = 1;
    bool flush = 2;
  }

  message Open {
    uint64 id = 1;
  }

  message Close {}

  oneof body {
    Data data = 1;
    Open open = 2;
    Close close = 3;
  }
}

message VideoClientCallRequest {
  message Data {
    bytes body = 1;
  }

  message RunServer {}

  message RunClient {}

  uint32 id = 1;
  oneof body {
    Data data = 2;
    RunClient run_client = 3;
    RunServer run_server = 4;
  }
}

message SwarmThingMessage {
  message Open {
    bytes swarm_id = 1;
    uint32 port = 2;
  }

  message Close {
    bytes swarm_id = 1;
  }

  oneof body {
    Open open = 1;
    Close close = 2;
  }
}

service Video {
  rpc OpenClient(OpenVideoClientRequest) returns (stream VideoClientEvent);
  rpc OpenServer(OpenVideoServerRequest) returns (VideoServerOpenResponse);
  rpc WriteToServer(WriteToVideoServerRequest) returns (WriteToVideoServerResponse);
  rpc PublishSwarm(PublishSwarmRequest) returns (PublishSwarmResponse);
  // rpc GetIngressStreams(GetIngressStreamsRequest) returns (stream GetIngressStreamsResponse);
  rpc StartRTMPIngress(StartRTMPIngressRequest) returns (StartRTMPIngressResponse);
  // rpc StopRTMPIngress(StartRTMPIngressRequest) returns (StartRTMPIngressResponse);
  rpc StartHLSEgress(StartHLSEgressRequest) returns (StartHLSEgressResponse);
  rpc StopHLSEgress(StopHLSEgressRequest) returns (StopHLSEgressResponse);
}

// message RTMPConfig {
//   string address = 1;
//   uint32 port = 2;
//   repeated uint64 networks = 3;
// }

// message RTMPHostStream {
//   uint64 id = 1;
//   Key stream_key = 2;
//   Certificate owner_certificate = 3;
//   string title = 4;
//   string description = 5;
//   repeated string tags = 6;
// }

// message RTMPUpsertStreamRequest {
//   RTMPConfig config = 1;
// }

// message RTMPUpsertStreamResponse {
//   RTMPConfig config = 1;
// }

// message RTMPDeleteStreamRequest {
//   uint64 id = 1;
// }

// message RTMPDeleteStreamResponse {}

// message RTMPDeleteStreamRequest {
//   uint64 id = 1;
// }

// message RTMPDeleteStreamResponse {}

// service RTMPHostConfig {
//   rpc UpsertStream(RTMPUpsertStreamRequest) returns (RTMPUpsertStreamResponse);
//   rpc DeleteStream(RTMPDeleteStreamRequest) returns (RTMPDeleteStreamResponse);
// }

// message RTMPHostUpsertStreamRequest {
//   uint64 id = 1;
//   Certificate certificate = 2;
//   string title = 3;
//   string description = 4;
//   repeated string tags = 5;
// }

// message RTMPHostUpsertStreamRequest {
//   bytes id = 1;
//   bytes stream_key = 1;
// }

// message RTMPHostDeleteStreamRequest {

// }

// message RTMPHostDeleteStreamRequest {

// }

// service RTMPHost {
//   rpc UpsertStream(RTMPHostUpsertStreamRequest) returns (RTMPHostUpsertStreamRequest);
//   rpc DeleteStream(RTMPHostDeleteStreamRequest) returns (RTMPHostDeleteStreamRequest);
// }

// message RTMPStream {
//   uint64 id = 1;
//   bytes server_key = 2;
//   uint64 server_id = 3;
//   bytes stream_key = 4;
//   string uri = 4;
//   string title = 5;
//   string description = 6;
//   repeated string tags = 7;
// }

// message RTMPConfigCreateStreamRequest {
//   string title = 5;
//   string description = 6;
//   repeated string tags = 7;
// }

// message RTMPConfigCreateStreamResponse {

// }

// message RTMPConfigUpdateStreamRequest {
//   string title = 5;
//   string description = 6;
//   repeated string tags = 7;
// }

// message RTMPConfigUpdateStreamResponse {

// }

// message RTMPConfigDeleteStreamRequest {
//   uint64 id = 1;
// }

// message RTMPConfigDeleteStreamResponse {}

// service RTMPConfig {
//   rpc UpsertStream(RTMPConfigUpsertStreamRequest) returns (RTMPConfigUpsertStreamResponse);
//   rpc DeleteStream(RTMPConfigDeleteStreamRequest) returns (RTMPConfigDeleteStreamResponse);
// }
