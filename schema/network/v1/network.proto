// Copyright 2022 Strims contributors
// SPDX-License-Identifier: AGPL-3.0-only

syntax = "proto3";

package strims.network.v1;

option go_package = "github.com/MemeLabs/strims/pkg/apis/network/v1;networkv1";
option java_package = "gg.strims.network.v1";
option swift_prefix = "SNT";

import "type/key.proto";
import "type/image.proto";
import "type/certificate.proto";
import "network/v1/bootstrap/bootstrap.proto";
import "network/v1/directory/directory.proto";
import "network/v1/errors/errors.proto";
import "dao/v1/dao.proto";

message CreateServerRequest {
  string name = 1;
  type.Image icon = 2;
  string alias = 3;
}

message CreateServerResponse {
  Network network = 1;
}

message UpdateServerConfigRequest {
  uint64 network_id = 1;
  ServerConfig server_config = 2;
}

message UpdateServerConfigResponse {
  Network network = 1;
}

message DeleteNetworkRequest {
  uint64 id = 1;
}

message DeleteNetworkResponse {}

message GetNetworkRequest {
  uint64 id = 1;
}

message GetNetworkResponse {
  Network network = 1;
}

message ListNetworksRequest {}

message ListNetworksResponse {
  repeated Network networks = 1;
}

message ServerConfig {
  string name = 2;
  strims.type.Key key = 3;

  uint64 root_cert_ttl_secs = 4;
  uint64 peer_cert_ttl_secs = 5;

  directory.ServerConfig directory = 6;

  type.Image icon = 7;

  // per user invite limit
  // per group invite limit
  // groups/roles?
  // default chat
}

message Network {
  uint64 id = 1;
  dao.v1.VersionVector version = 7;
  strims.type.Certificate certificate = 2;
  string alias = 4;
  ServerConfig server_config = 5;
  errors.ErrorCode certificate_renewal_error = 6;
}

message Peer {
  uint64 id = 1;
  uint64 network_id = 2;
  bytes public_key = 3;
  uint64 inviter_peer_id = 4;
  uint32 invite_quota = 5;
}

message CreateInvitationRequest {
  uint64 network_id = 1;
  uint64 bootstrap_client_id = 2;
}

message CreateInvitationResponse {
  Invitation invitation = 1;
}

message Invitation {
  uint32 version = 1;
  bytes data = 2;
}

message InvitationV0 {
  strims.type.Key key = 1;
  strims.type.Certificate certificate = 2;
  string network_name = 4;
  repeated bootstrap.BootstrapClient bootstrap_clients = 5;
}

message CreateNetworkFromInvitationRequest {
  string alias = 1;

  oneof invitation {
    string invitation_b64 = 1001;
    bytes invitation_bytes = 1002;
  }
}

message CreateNetworkFromInvitationResponse {
  Network network = 1;
}

message NetworkEvent {
  message NetworkStart {
    Network network = 1;
    uint32 peer_count = 2;
  }

  message NetworkStop {
    uint64 network_id = 1;
  }

  message NetworkPeerCountUpdate {
    uint64 network_id = 1;
    uint32 peer_count = 2;
  }

  oneof body {
    NetworkStart network_start = 1001;
    NetworkStop network_stop = 1002;
    NetworkPeerCountUpdate network_peer_count_update = 1003;
    UIConfig ui_config_update = 1004;
    Network network_update = 1005;
  }
}

message UIConfig {
  repeated uint64 network_display_order = 1;
}

message WatchNetworksRequest {}

message WatchNetworksResponse {
  NetworkEvent event = 1;
}

message UpdateDisplayOrderRequest {
  repeated uint64 network_ids = 1;
}

message UpdateDisplayOrderResponse {}

message UpdateAliasRequest {
  uint64 id = 1;
  string alias = 2;
}

message UpdateAliasResponse {
  Network network = 1;
}

message GetUIConfigRequest {}

message GetUIConfigResponse {
  UIConfig config = 1;
}

service NetworkFrontend {
  rpc CreateServer(CreateServerRequest) returns (CreateServerResponse);
  rpc UpdateServerConfig(UpdateServerConfigRequest) returns (UpdateServerConfigResponse);
  rpc Delete(DeleteNetworkRequest) returns (DeleteNetworkResponse);
  rpc Get(GetNetworkRequest) returns (GetNetworkResponse);
  rpc List(ListNetworksRequest) returns (ListNetworksResponse);
  rpc CreateInvitation(CreateInvitationRequest) returns (CreateInvitationResponse);
  rpc CreateNetworkFromInvitation(CreateNetworkFromInvitationRequest) returns (CreateNetworkFromInvitationResponse);
  rpc Watch(WatchNetworksRequest) returns (stream WatchNetworksResponse);
  rpc UpdateDisplayOrder(UpdateDisplayOrderRequest) returns (UpdateDisplayOrderResponse);
  rpc UpdateAlias(UpdateAliasRequest) returns (UpdateAliasResponse);
  rpc GetUIConfig(GetUIConfigRequest) returns (GetUIConfigResponse);
}
