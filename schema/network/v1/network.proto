syntax = "proto3";

package strims.network.v1;

option go_package = "github.com/MemeLabs/go-ppspp/pkg/apis/network/v1;network";
option java_package = "gg.strims.network.v1";
option swift_prefix = "SNT";

import "type/key.proto";
import "type/certificate.proto";

message NetworkIcon {
  bytes data = 1;
  string type = 2;
}

message CreateNetworkRequest {
  string name = 1;
  NetworkIcon icon = 2;
}

message CreateNetworkResponse {
  Network network = 1;
}

message UpdateNetworkRequest {
  uint64 id = 1;
  string name = 2;
}

message UpdateNetworkResponse {
  Network network = 1;
}

message DeleteNetworkRequest {
  uint64 id = 1;
}

message DeleteNetworkResponse {}

message GetNetworkRequest {
  uint64 id = 1;
}

message GetNetworkResponse {
  Network network = 1;
}

message ListNetworksRequest {}

message ListNetworksResponse {
  repeated Network networks = 1;
}

message Network {
  uint64 id = 1;
  string name = 2;
  strims.type.Key key = 3;
  strims.type.Certificate certificate = 4;
  NetworkIcon icon = 5;
  string alt_profile_name = 6;
  uint32 display_order = 7;
}

enum KeyUsage {
  KEY_USAGE_UNDEFINED = 0;
  // PEER allows bearer to connect with members of the signator's network
  KEY_USAGE_PEER = 1;
  // BOOTSTRAP allows the bearer to connect to a network's signators. Invites
  // including transient keys with bootstrap certs allow new members to request
  // peer certs.
  KEY_USAGE_BOOTSTRAP = 2;
  // SIGN allows the bearer to sign certificates.
  KEY_USAGE_SIGN = 4;
  // BROKER allows the bearer to negotiate connections between a network's
  // members.
  KEY_USAGE_BROKER = 8;
  // ENCIPHERMENT allows the key to be used for encrypting messages.
  KEY_USAGE_ENCIPHERMENT = 16;
}

message CreateNetworkInvitationRequest {
  strims.type.Key signing_key = 1;
  strims.type.Certificate signing_cert = 2;
  string network_name = 3;
}

message CreateNetworkInvitationResponse {
  Invitation invitation = 1;
  string invitation_b64 = 2;
  bytes invitation_bytes = 3;
}

message Invitation {
  uint32 version = 1;
  bytes data = 2;
}

message InvitationV0 {
  strims.type.Key key = 1;
  strims.type.Certificate certificate = 2;
  string network_name = 4;
}

message CreateNetworkFromInvitationRequest {
  oneof invitation {
    string invitation_b64 = 1;
    bytes invitation_bytes = 2;
  }
}

message CreateNetworkFromInvitationResponse {
  Network network = 1;
}

message NetworkEvent {
  message NetworkStart {
    Network network = 1;
    uint32 peer_count = 2;
  }

  message NetworkStop {
    uint64 network_id = 1;
  }

  message NetworkPeerCountUpdate {
    uint64 network_id = 1;
    uint32 peer_count = 2;
  }

  oneof body {
    NetworkStart network_start = 1001;
    NetworkStop network_stop = 1002;
    NetworkPeerCountUpdate network_peer_count_update = 1003;
  }
}

message WatchNetworksRequest {}

message WatchNetworksResponse {
  NetworkEvent event = 1;
}

message SetDisplayOrderRequest {
  repeated uint64 network_ids = 1;
}

message SetDisplayOrderResponse {}

service NetworkService {
  rpc Create(CreateNetworkRequest) returns (CreateNetworkResponse);
  rpc Update(UpdateNetworkRequest) returns (UpdateNetworkResponse);
  rpc Delete(DeleteNetworkRequest) returns (DeleteNetworkResponse);
  rpc Get(GetNetworkRequest) returns (GetNetworkResponse);
  rpc List(ListNetworksRequest) returns (ListNetworksResponse);
  rpc CreateInvitation(CreateNetworkInvitationRequest) returns (CreateNetworkInvitationResponse);
  rpc CreateFromInvitation(CreateNetworkFromInvitationRequest) returns (CreateNetworkFromInvitationResponse);
  rpc Watch(WatchNetworksRequest) returns (stream WatchNetworksResponse);
  rpc SetDisplayOrder(SetDisplayOrderRequest) returns (SetDisplayOrderResponse);
}
