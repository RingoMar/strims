// Copyright 2022 Strims contributors
// SPDX-License-Identifier: AGPL-3.0-only

syntax = "proto3";

package strims.network.v1.directory;

option go_package = "github.com/MemeLabs/strims/pkg/apis/network/v1/directory;networkv1directory";
option java_package = "gg.strims.network.v1.directory";
option swift_prefix = "SND";

import "type/image.proto";
import "google/protobuf/wrappers.proto";

message ServerConfig {
  message Integrations {
    message AngelThump {
      bool enable = 1;
    }

    message Twitch {
      bool enable = 1;
      string client_id = 2;
      string client_secret = 3;
    }

    message YouTube {
      bool enable = 1;
      string public_api_key = 2;
    }

    message Swarm {
      bool enable = 1;
    }

    AngelThump angelthump = 1;
    Twitch twitch = 2;
    YouTube youtube = 3;
    Swarm swarm = 4;
  }

  Integrations integrations = 1;
  uint32 publish_quota= 2;
  uint32 join_quota= 3;
  uint32 broadcast_interval = 4;
  uint32 refresh_interval = 5;
  uint32 session_timeout = 6;
  uint32 min_ping_interval = 7;
  uint32 max_ping_interval = 8;
  uint32 embed_load_interval = 9;
  uint32 load_media_embed_timeout = 10;
}

message ClientConfig {
  message Integrations {
    bool angelthump = 1;
    bool twitch = 2;
    bool youtube = 3;
    bool swarm = 4;
  }

  Integrations integrations = 1;
  uint32 publish_quota= 2;
  uint32 join_quota= 3;
  uint32 min_ping_interval = 4;
  uint32 max_ping_interval = 5;
}

message GetEventsRequest {
  bytes network_key = 1;
}

message TestPublishRequest {
  bytes network_key = 1;
}
message TestPublishResponse {}

enum ListingContentType {
  LISTING_CONTENT_TYPE_UNDEFINED = 0;
  LISTING_CONTENT_TYPE_MEDIA = 1;
  LISTING_CONTENT_TYPE_SERVICE = 2;
  LISTING_CONTENT_TYPE_EMBED = 3;
  LISTING_CONTENT_TYPE_CHAT = 4;
}

message Listing {
  message Media {
    string mime_type = 1;
    string swarm_uri = 2;
  }

  message Service {
    string type = 1;
    string swarm_uri = 2;
  }

  message Embed {
    enum Service {
      DIRECTORY_LISTING_EMBED_SERVICE_UNDEFINED = 0;
      DIRECTORY_LISTING_EMBED_SERVICE_ANGELTHUMP = 1;
      DIRECTORY_LISTING_EMBED_SERVICE_TWITCH_STREAM = 2;
      DIRECTORY_LISTING_EMBED_SERVICE_TWITCH_VOD = 3;
      DIRECTORY_LISTING_EMBED_SERVICE_YOUTUBE = 4;
    }

    Service service = 1;
    string id = 2;
    map<string, string> query_params = 3;
  }

  message Chat {
    bytes key = 1;
    string name = 2;
  }

  oneof content {
    Media media = 1001;
    Service service = 1002;
    Embed embed = 1003;
    Chat chat = 1004;
  }
}

message ListingSnippetImage {
  oneof source_oneof {
    string url = 1001;
    strims.type.Image image = 1002;
  }
}

message ListingSnippet {
  string title = 1;
  string description = 2;
  repeated string tags = 3;
  string category = 4;
  string channel_name = 5;
  uint64 user_count = 6;
  bool live = 7;
  bool is_mature = 8;
  ListingSnippetImage thumbnail = 9;
  ListingSnippetImage channel_logo = 10;
  uint32 video_height = 11;
  uint32 video_width = 12;
  fixed32 theme_color = 13;
  int64 start_time = 14;

  bytes key = 10001;
  bytes signature = 10002;
}

message ListingSnippetDelta {
  message Tags {
    repeated string tags = 1001;
  }

  google.protobuf.StringValue title = 1;
  google.protobuf.StringValue description = 2;
  google.protobuf.StringValue category = 3;
  google.protobuf.StringValue channel_name = 4;
  google.protobuf.UInt64Value user_count = 5;
  google.protobuf.BoolValue live = 6;
  google.protobuf.BoolValue is_mature = 7;
  google.protobuf.BytesValue key = 8;
  google.protobuf.BytesValue signature = 9;
  google.protobuf.UInt32Value video_height = 10;
  google.protobuf.UInt32Value video_width = 11;
  google.protobuf.UInt32Value theme_color = 12;
  google.protobuf.Int64Value start_time = 13;

  oneof tags_oneof {
    Tags tags = 1001;
  }

  oneof thumbnail_oneof {
    ListingSnippetImage thumbnail = 2001;
  }

  oneof channel_logo_oneof {
    ListingSnippetImage  channel_logo = 3001;
  }
}

message Event {
  message ListingChange {
    uint64 id = 1;
    Listing listing = 2;
    ListingSnippet snippet = 3;
    ListingModeration moderation = 4;
  }

  message Unpublish {
    uint64 id = 1;
  }

  message UserCountChange {
    uint64 id = 1;
    uint32 user_count = 2;
    uint32 recent_user_count = 3;
  }

  message UserPresenceChange {
    uint64 id = 1;
    string alias = 2;
    bytes peer_key = 3;
    bool online = 4;
    repeated uint64 listing_ids = 5;
  }

  message Ping {
    int64 time = 1;
  }

  oneof body {
    ListingChange listing_change = 1001;
    Unpublish unpublish = 1002;
    UserCountChange user_count_change = 1003;
    UserPresenceChange user_presence_change = 1004;
    Ping ping = 1005;
  }
}

message ListingModeration {
  google.protobuf.BoolValue is_mature = 2;
  google.protobuf.BoolValue is_banned = 3;
  google.protobuf.StringValue category = 4;
}

message ListingQuery {
  oneof query {
    uint64 id = 1001;
    Listing listing = 1002;
  }
}

message ListingRecord {
  uint64 id = 1;
  uint64 network_id = 2;
  Listing listing = 3;
  ListingModeration moderation = 4;
  string notes = 5;
}

message UserModeration {
  google.protobuf.BoolValue disable_join = 1;
  google.protobuf.BoolValue disable_publish = 2;
  google.protobuf.BoolValue is_moderator = 3;
  google.protobuf.BoolValue is_admin = 4;
}

message UserRecord {
  uint64 id = 1;
  uint64 network_id = 2;
  bytes peer_key = 3;
  UserModeration moderation = 4;
}

message EventBroadcast {
  repeated Event events = 1;
}

message PublishRequest {
  Listing listing = 1;
}

message PublishResponse {
  uint64 id = 1;
}

message UnpublishRequest {
  uint64 id = 1;
}

message UnpublishResponse {}

message JoinRequest {
  ListingQuery query = 1;
}

message JoinResponse {
  uint64 id = 1;
}

message PartRequest {
  uint64 id = 1;
}

message PartResponse {}

message PingRequest {}

message PingResponse {}

message ModerateListingRequest {
  uint64 id = 1;
  ListingModeration moderation = 2;
}

message ModerateListingResponse {}

message ModerateUserRequest {
  bytes peer_key = 1;
  UserModeration moderation = 2;
}

message ModerateUserResponse {}

service Directory {
  rpc Publish(PublishRequest) returns (PublishResponse);
  rpc Unpublish(UnpublishRequest) returns (UnpublishResponse);
  rpc Join(JoinRequest) returns (JoinResponse);
  rpc Part(PartRequest) returns (PartResponse);
  rpc Ping(PingRequest) returns (PingResponse);

  rpc ModerateListing(ModerateListingRequest) returns (ModerateListingResponse);
  rpc ModerateUser(ModerateUserRequest) returns (ModerateUserResponse);
}

message Network {
  uint64 id = 1;
  string name = 2;
  bytes key = 3;
}

message NetworkListingsItem {
  uint64 id = 1;
  Listing listing = 2;
  ListingSnippet snippet = 3;
  ListingModeration moderation = 4;
  uint32 user_count = 5;
  uint32 recent_user_count = 6;
}

message NetworkListings {
  Network network = 1;
  repeated NetworkListingsItem listings = 2;
}

message FrontendPublishRequest {
  bytes network_key = 1;
  Listing listing = 2;
}

message FrontendPublishResponse {
  uint64 id = 1;
}

message FrontendUnpublishRequest {
  bytes network_key = 1;
  uint64 id = 2;
}

message FrontendUnpublishResponse {}

message FrontendJoinRequest {
  bytes network_key = 1;
  ListingQuery query = 2;
}

message FrontendJoinResponse {
  uint64 id = 1;
}

message FrontendPartRequest {
  bytes network_key = 1;
  uint64 id = 2;
}

message FrontendPartResponse {}

message FrontendTestRequest {
  bytes network_key = 1;
}

message FrontendTestResponse {}

message FrontendModerateListingRequest {
  bytes network_key = 1;
  uint64 id = 2;
  ListingModeration moderation = 3;
}

message FrontendModerateListingResponse {}

message FrontendModerateUserRequest {
  bytes network_key = 1;
  string alias = 2;
  UserModeration moderation = 3;
}

message FrontendModerateUserResponse {}

message FrontendGetUsersRequest {}

message FrontendGetUsersResponse {
  message Alias {
    string alias = 1;
    repeated uint64 network_ids = 2;
  }

  message User {
    repeated Alias aliases = 1;
    bytes peer_key = 2;
  }

  repeated User users = 1;
  map<uint64, Network> networks = 2;
}

message FrontendGetListingRequest {
  ListingQuery query = 1;
  bytes network_key = 2;
}

message FrontendGetListingResponse {
  uint64 id = 1;
  Listing listing = 2;
  ListingSnippet snippet = 3;
  ListingModeration moderation = 4;
  uint32 user_count = 5;
  uint32 recent_user_count = 6;
}

message FrontendGetListingsRequest {
  repeated ListingContentType content_types = 1;
  repeated bytes network_keys = 2;
}

message FrontendGetListingsResponse {
  repeated NetworkListings listings = 1;
}

message FrontendWatchListingsRequest {
  repeated ListingContentType content_types = 1;
  repeated bytes network_keys = 2;
  uint64 listing_id = 3;
}

message FrontendWatchListingsResponse {
  message Change {
    NetworkListings listings = 1;
  }

  message Unpublish {
    uint64 network_id = 1;
    uint64 listing_id = 2;
  }

  message UserCountChange {
    uint64 network_id = 1;
    uint64 listing_id = 2;
    uint32 user_count = 3;
    uint32 recent_user_count = 4;
  }

  message Event {
    oneof event {
      Change change = 1001;
      Unpublish unpublish = 1002;
      UserCountChange user_count_change = 1003;
    }
  }

  repeated Event events = 1;
}

message FrontendWatchListingUsersRequest {
  bytes network_key = 1;
  ListingQuery query = 2;
}

message FrontendWatchListingUsersResponse {
  enum UserEventType {
    USER_EVENT_TYPE_JOIN = 0;
    USER_EVENT_TYPE_PART = 1;
    USER_EVENT_TYPE_RENAME = 2;
  }

  message User {
    uint64 id = 1;
    string Alias = 2;
    bytes peer_key = 3;
  }

  UserEventType type = 1;
  repeated User users = 2;
}

service DirectoryFrontend {
  rpc Publish(FrontendPublishRequest) returns (FrontendPublishResponse);
  rpc Unpublish(FrontendUnpublishRequest) returns (FrontendUnpublishResponse);
  rpc Join(FrontendJoinRequest) returns (FrontendJoinResponse);
  rpc Part(FrontendPartRequest) returns (FrontendPartResponse);
  rpc Test(FrontendTestRequest) returns (FrontendTestResponse);

  rpc ModerateListing(FrontendModerateListingRequest) returns (FrontendModerateListingResponse);
  rpc ModerateUser(FrontendModerateUserRequest) returns (FrontendModerateUserResponse);

  rpc GetUsers(FrontendGetUsersRequest) returns (FrontendGetUsersResponse);
  rpc GetListing(FrontendGetListingRequest) returns (FrontendGetListingResponse);
  rpc GetListings(FrontendGetListingsRequest) returns (FrontendGetListingsResponse);
  rpc WatchListings(FrontendWatchListingsRequest) returns (stream FrontendWatchListingsResponse);
  rpc WatchListingUsers(FrontendWatchListingUsersRequest) returns (stream FrontendWatchListingUsersResponse);
}

message SnippetSubscribeRequest {
  bytes swarm_id = 1;
}

message SnippetSubscribeResponse {
  ListingSnippetDelta snippet_delta = 1;
}

service DirectorySnippet {
  rpc Subscribe(SnippetSubscribeRequest) returns (stream SnippetSubscribeResponse);
}
