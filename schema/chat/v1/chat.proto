syntax = "proto3";

package strims.chat.v1;

option go_package = "github.com/MemeLabs/go-ppspp/pkg/apis/chat/v1;chat";
option java_package = "gg.strims.ppspp.proto";
option swift_prefix = "SCH";

import "type/key.proto";

message CreateServerRequest {
  bytes network_key = 2;
  Room room = 3;
}
message CreateServerResponse {
  Server server = 1;
}
message UpdateServerRequest {
  uint64 id = 1;
  bytes network_key = 2;
  Room room = 3;
}
message UpdateServerResponse {
  Server server = 1;
}
message DeleteServerRequest {
  uint64 id = 1;
}
message DeleteServerResponse {}
message GetServerRequest {
  uint64 id = 1;
}
message GetServerResponse {
  Server server = 1;
}
message ListServersRequest {}
message ListServersResponse {
  repeated Server servers = 1;
}

message CreateEmoteRequest {
  uint64 server_id = 1;
  string name = 2;
  repeated EmoteImage images = 3;
  string css = 4;
  EmoteAnimation animation = 5;
}
message CreateEmoteResponse {
  Emote emote = 1;
}
message UpdateEmoteRequest {
  uint64 server_id = 1;
  uint64 id = 2;
  string name = 3;
  repeated EmoteImage images = 4;
  string css = 5;
  EmoteAnimation animation = 6;
}
message UpdateEmoteResponse {
  Emote emote = 1;
}
message DeleteEmoteRequest {
  uint64 server_id = 1;
  uint64 id = 2;
}
message DeleteEmoteResponse {}
message GetEmoteRequest {
  uint64 id = 1;
}
message GetEmoteResponse {
  Emote emote = 1;
}
message ListEmotesRequest {
  uint64 server_id = 1;
}
message ListEmotesResponse {
  repeated Emote emotes = 1;
}

message OpenServerRequest {
  Server server = 1;
}

message ServerEvent {
  message Open {
    uint64 server_id = 1;
  }

  message Close {}

  oneof body {
    Open open = 1;
    Close close = 2;
  }
}

message CallServerRequest {
  message Close {}

  uint64 server_id = 1;
  oneof body {
    Close close = 2;
  }
}

message OpenClientRequest {
  bytes network_key = 1;
  bytes server_key = 2;
}

message ClientEvent {
  message Open {
    uint64 client_id = 1;
  }

  message Message {
    int64 sent_time = 1;
    int64 server_time = 2;
    string nick = 3;
    string body = 4;
    MessageEntities entities = 5;
  }

  message Close {}

  oneof body {
    Open open = 1;
    Message message = 2;
    Close close = 3;
  }
}

message Room {
  string name = 1;
}

message Server {
  uint64 id = 1;
  bytes network_key = 2;
  strims.type.Key key = 3;
  Room room = 4;
}

enum EmoteFileType {
  FILE_TYPE_UNDEFINED = 0;
  FILE_TYPE_PNG = 1;
  FILE_TYPE_GIF = 2;
}

enum EmoteScale {
  EMOTE_SCALE_1X = 0;
  EMOTE_SCALE_2X = 1;
  EMOTE_SCALE_4X = 2;
}

message EmoteImage {
  bytes data = 3;
  EmoteFileType file_type = 4;
  uint32 height = 5;
  uint32 width = 6;
  EmoteScale scale = 7;
}

message EmoteAnimation {
  uint32 frame_count = 10;
  uint32 Duration = 11;
  uint32 iteration_count = 12;
}

message Emote {
  uint64 id = 1;
  string name = 2;
  repeated EmoteImage images = 3;
  string css = 4;
  EmoteAnimation animation = 5;
}

message MessageEntities {
  message Bounds {
    uint32 start = 1;
    uint32 end = 2;
  }

  message Link {
    Bounds bounds = 1;
    string url = 2;
  }

  message Emote {
    Bounds bounds = 1;
    string name = 2;
    repeated string modifiers = 3;
    uint32 combo = 4;
  }

  message Nick {
    Bounds bounds = 1;
    string nick = 2;
  }

  message Tag {
    Bounds bounds = 1;
    string name = 2;
  }

  message CodeBlock {
    Bounds bounds = 1;
  }

  message Spoiler {
    Bounds bounds = 1;
  }

  message GenericEntity {
    Bounds bounds = 1;
  }

  repeated Link links = 1;
  repeated Emote emotes = 2;
  repeated Nick nicks = 3;
  repeated Tag tags = 4;
  repeated CodeBlock code_blocks = 5;
  repeated Spoiler spoilers = 6;
  GenericEntity green_text = 7;
  GenericEntity self_message = 8;
}

message CallClientRequest {
  message Message {
    int64 time = 1;
    string body = 2;
  }

  message Close {}

  uint64 client_id = 1;
  oneof body {
    Message message = 2;
    Close close = 3;
  }
}

message CallClientResponse {}

service Chat {
  rpc CreateServer(CreateServerRequest) returns (CreateServerResponse);
  rpc UpdateServer(UpdateServerRequest) returns (UpdateServerResponse);
  rpc DeleteServer(DeleteServerRequest) returns (DeleteServerResponse);
  rpc GetServer(GetServerRequest) returns (GetServerResponse);
  rpc ListServers(ListServersRequest) returns (ListServersResponse);

  rpc CreateEmote(CreateEmoteRequest) returns (CreateEmoteResponse);
  rpc UpdateEmote(UpdateEmoteRequest) returns (UpdateEmoteResponse);
  rpc DeleteEmote(DeleteEmoteRequest) returns (DeleteEmoteResponse);
  rpc GetEmote(GetEmoteRequest) returns (GetEmoteResponse);
  rpc ListEmotes(ListEmotesRequest) returns (ListEmotesResponse);

  rpc OpenServer(OpenServerRequest) returns (stream ServerEvent);
  rpc OpenClient(OpenClientRequest) returns (stream ClientEvent);
  rpc CallClient(CallClientRequest) returns (CallClientResponse);
}
