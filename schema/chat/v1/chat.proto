syntax = "proto3";

package strims.chat.v1;

option go_package = "github.com/MemeLabs/go-ppspp/pkg/apis/chat/v1;chat";
option java_package = "gg.strims.ppspp.proto";
option swift_prefix = "SCH";

import "type/key.proto";


message ServerEvent {
  oneof body {
    Message message = 1001;
  }
}

message Room {
  string name = 1;
  string css = 2;
}

message Server {
  uint64 id = 1;
  bytes network_key = 2;
  strims.type.Key key = 3;
  Room room = 4;
}

enum EmoteFileType {
  FILE_TYPE_UNDEFINED = 0;
  FILE_TYPE_PNG = 1;
  FILE_TYPE_GIF = 2;
}

enum EmoteScale {
  EMOTE_SCALE_1X = 0;
  EMOTE_SCALE_2X = 1;
  EMOTE_SCALE_4X = 2;
}

message EmoteImage {
  bytes data = 3;
  EmoteFileType file_type = 4;
  uint32 height = 5;
  uint32 width = 6;
  EmoteScale scale = 7;
}

message EmoteEffect {
  message CustomCSS {
    string css = 1;
  }

  message SpriteAnimation {
    uint32 frame_count = 1;
    uint32 duration_ms = 2;
    uint32 iteration_count = 3;
    uint32 end_on_frame = 4;
    bool loop_forever = 5;
    bool alternate_direction = 6;
  }

  message DefaultModifiers {
    repeated string modifiers = 1;
  }

  oneof effect {
    CustomCSS custom_css = 1001;
    SpriteAnimation sprite_animation = 1002;
    DefaultModifiers default_modifiers = 1003;
  }
}

message EmoteContributor {
  string name = 1;
  string link = 2;
}

message Emote {
  uint64 id = 1;
  string name = 2;
  repeated EmoteImage images = 3;
  repeated EmoteEffect effects = 4;
  EmoteContributor contributor = 5;
}

message Modifier {
  uint64 id = 1;
  string name = 2;
  uint32 priority = 3;
  bool internal = 4;
}

message Tag {
  uint64 id = 1;
  string name = 2;
  string color = 3;
  bool sensitive = 4;
}

message AssetBundle {
  bool is_delta = 1;
  repeated uint64 removed_ids = 2;
  Room room = 3;
  repeated Emote emotes = 4;
  repeated Modifier modifiers = 5;
  repeated Tag tags = 6;
}

message Message {
  message Entities {
    message Bounds {
      uint32 start = 1;
      uint32 end = 2;
    }

    message Link {
      Bounds bounds = 1;
      string url = 2;
    }

    message Emote {
      Bounds bounds = 1;
      string name = 2;
      repeated string modifiers = 3;
      uint32 combo = 4;
    }

    message Nick {
      Bounds bounds = 1;
      string nick = 2;
    }

    message Tag {
      Bounds bounds = 1;
      string name = 2;
    }

    message CodeBlock {
      Bounds bounds = 1;
    }

    message Spoiler {
      Bounds bounds = 1;
    }

    message GenericEntity {
      Bounds bounds = 1;
    }

    repeated Link links = 1;
    repeated Emote emotes = 2;
    repeated Nick nicks = 3;
    repeated Tag tags = 4;
    repeated CodeBlock code_blocks = 5;
    repeated Spoiler spoilers = 6;
    GenericEntity green_text = 7;
    GenericEntity self_message = 8;
  }

  int64 server_time = 1;
  bytes host_id = 2;
  string nick = 3;
  string body = 4;
  Entities entities = 5;
}

message UIConfig {
  enum ShowRemoved {
    SHOW_REMOVED_REMOVE = 0;
    SHOW_REMOVED_CENSOR = 1;
    SHOW_REMOVED_DO_NOTHING = 2;
  }

  enum ViewerStateIndicator {
    VIEWER_STATE_INDICATOR_DISABLED = 0;
    VIEWER_STATE_INDICATOR_BAR = 1;
    VIEWER_STATE_INDICATOR_DOT = 2;
    VIEWER_STATE_INDICATOR_ARRAY = 3;
  }

  message SoundFile {
    string file_type = 1;
    bytes data = 2;
  }

  bool show_time = 1;
  bool show_flair_icons = 2;
  string timestamp_format = 3;
  uint32 max_lines = 4;
  bool notification_whisper = 5;
  bool sound_notification_whisper = 6;
  bool notification_highlight = 7;
  bool sound_notification_highlight = 8;
  SoundFile notification_sound_file = 9;
  bool highlight = 10;
  string custom_highlight = 11;
  repeated string highlight_nicks = 12;
  repeated string tagged_nicks = 13;
  ShowRemoved show_removed = 14;
  bool show_whispers_in_chat = 15;
  repeated string ignore_nicks = 16;
  bool focus_mentioned = 17;
  bool notification_timeout = 18;
  bool ignore_mentions = 19;
  bool autocomplete_helper = 20;
  bool autocomplete_emote_preview = 21;
  bool tagged_visibility = 22;
  bool hide_nsfw = 23;
  bool animate_forever = 24;
  bool formatter_green = 25;
  bool formatter_emote = 26;
  bool formatter_combo = 27;
  bool emote_modifiers = 28;
  bool disable_spoilers = 29;
  ViewerStateIndicator viewer_state_indicator = 30;
  repeated string hidden_emotes = 31;
  bool shorten_links = 32;
}

message CreateServerRequest {
  bytes network_key = 2;
  Room room = 3;
}
message CreateServerResponse {
  Server server = 1;
}
message UpdateServerRequest {
  uint64 id = 1;
  bytes network_key = 2;
  Room room = 3;
}
message UpdateServerResponse {
  Server server = 1;
}
message DeleteServerRequest {
  uint64 id = 1;
}
message DeleteServerResponse {}
message GetServerRequest {
  uint64 id = 1;
}
message GetServerResponse {
  Server server = 1;
}
message ListServersRequest {}
message ListServersResponse {
  repeated Server servers = 1;
}

message CreateEmoteRequest {
  uint64 server_id = 1;
  string name = 2;
  repeated EmoteImage images = 3;
  string css = 4;
  repeated EmoteEffect effects = 5;
  EmoteContributor contributor = 6;
}
message CreateEmoteResponse {
  Emote emote = 1;
}
message UpdateEmoteRequest {
  uint64 server_id = 1;
  uint64 id = 2;
  string name = 3;
  repeated EmoteImage images = 4;
  string css = 5;
  repeated EmoteEffect effects = 6;
  EmoteContributor contributor = 7;
}
message UpdateEmoteResponse {
  Emote emote = 1;
}
message DeleteEmoteRequest {
  uint64 server_id = 1;
  uint64 id = 2;
}
message DeleteEmoteResponse {}
message GetEmoteRequest {
  uint64 id = 1;
}
message GetEmoteResponse {
  Emote emote = 1;
}
message ListEmotesRequest {
  uint64 server_id = 1;
}
message ListEmotesResponse {
  repeated Emote emotes = 1;
}

message CreateModifierRequest {
  uint64 server_id = 1;
  string name = 2;
  uint32 priority = 3;
  bool internal = 4;
}
message CreateModifierResponse {
  Modifier modifier = 1;
}
message UpdateModifierRequest {
  uint64 server_id = 1;
  uint64 id = 2;
  string name = 3;
  uint32 priority = 4;
  bool internal = 5;
}
message UpdateModifierResponse {
  Modifier modifier = 1;
}
message DeleteModifierRequest {
  uint64 server_id = 1;
  uint64 id = 2;
}
message DeleteModifierResponse {}
message GetModifierRequest {
  uint64 id = 1;
}
message GetModifierResponse {
  Modifier modifier = 1;
}
message ListModifiersRequest {
  uint64 server_id = 1;
}
message ListModifiersResponse {
  repeated Modifier modifiers = 1;
}

message CreateTagRequest {
  uint64 server_id = 1;
  string name = 2;
  string color = 3;
  bool sensitive = 4;
}
message CreateTagResponse {
  Tag tag = 1;
}
message UpdateTagRequest {
  uint64 server_id = 1;
  uint64 id = 2;
  string name = 3;
  string color = 4;
  bool sensitive = 5;
}
message UpdateTagResponse {
  Tag tag = 1;
}
message DeleteTagRequest {
  uint64 server_id = 1;
  uint64 id = 2;
}
message DeleteTagResponse {}
message GetTagRequest {
  uint64 id = 1;
}
message GetTagResponse {
  Tag tag = 1;
}
message ListTagsRequest {
  uint64 server_id = 1;
}
message ListTagsResponse {
  repeated Tag tags = 1;
}

message SyncAssetsRequest {
  uint64 server_id = 1;
  bool force_unified_update = 2;
}
message SyncAssetsResponse {
  uint64 version = 1;
  uint32 update_size = 2;
}

message OpenClientRequest {
  bytes network_key = 1;
  bytes server_key = 2;
}

message OpenClientResponse {
  message Open {
    uint64 client_id = 1;
  }

  oneof body {
    Open open = 1001;
    Message message = 1002;
    AssetBundle asset_bundle = 1003;
  }
}

message ClientSendMessageRequest {
  uint64 client_id = 1;
  string body = 2;
}

message ClientSendMessageResponse {}

message CallClientResponse {}

message SetUIConfigRequest {
  UIConfig ui_config = 1;
}
message SetUIConfigResponse {}

message GetUIConfigRequest {}
message GetUIConfigResponse {
  UIConfig ui_config = 1;
}

service ChatServerFrontend {
  rpc CreateServer(CreateServerRequest) returns (CreateServerResponse);
  rpc UpdateServer(UpdateServerRequest) returns (UpdateServerResponse);
  rpc DeleteServer(DeleteServerRequest) returns (DeleteServerResponse);
  rpc GetServer(GetServerRequest) returns (GetServerResponse);
  rpc ListServers(ListServersRequest) returns (ListServersResponse);

  rpc CreateEmote(CreateEmoteRequest) returns (CreateEmoteResponse);
  rpc UpdateEmote(UpdateEmoteRequest) returns (UpdateEmoteResponse);
  rpc DeleteEmote(DeleteEmoteRequest) returns (DeleteEmoteResponse);
  rpc GetEmote(GetEmoteRequest) returns (GetEmoteResponse);
  rpc ListEmotes(ListEmotesRequest) returns (ListEmotesResponse);

  rpc CreateModifier(CreateModifierRequest) returns (CreateModifierResponse);
  rpc UpdateModifier(UpdateModifierRequest) returns (UpdateModifierResponse);
  rpc DeleteModifier(DeleteModifierRequest) returns (DeleteModifierResponse);
  rpc GetModifier(GetModifierRequest) returns (GetModifierResponse);
  rpc ListModifiers(ListModifiersRequest) returns (ListModifiersResponse);

  rpc CreateTag(CreateTagRequest) returns (CreateTagResponse);
  rpc UpdateTag(UpdateTagRequest) returns (UpdateTagResponse);
  rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse);
  rpc GetTag(GetTagRequest) returns (GetTagResponse);
  rpc ListTags(ListTagsRequest) returns (ListTagsResponse);

  rpc SyncAssets(SyncAssetsRequest) returns (SyncAssetsResponse);
}

service ChatFrontend {
  rpc OpenClient(OpenClientRequest) returns (stream OpenClientResponse);
  rpc ClientSendMessage(ClientSendMessageRequest) returns (ClientSendMessageResponse);

  rpc SetUIConfig(SetUIConfigRequest) returns (SetUIConfigResponse);
  rpc GetUIConfig(GetUIConfigRequest) returns (GetUIConfigResponse);
}

message SendMessageRequest {
  string body = 1;
}
message SendMessageResponse {}

service Chat {
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
}
