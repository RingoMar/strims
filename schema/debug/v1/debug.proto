// Copyright 2022 Strims contributors
// SPDX-License-Identifier: AGPL-3.0-only

syntax = "proto3";

package strims.debug.v1;

option go_package = "github.com/MemeLabs/strims/pkg/apis/debug/v1;debugv1";
option java_package = "gg.strims.debug.v1";
option swift_prefix = "SDG";

message PProfRequest {
  string name = 1;
  bool debug = 2;
  bool gc = 3;
}
message PProfResponse {
  string name = 1;
  bytes data = 2;
}

message ReadMetricsRequest {
  MetricsFormat format = 1;
}

message ReadMetricsResponse {
  bytes data = 1;
}

message WatchMetricsRequest {
  MetricsFormat format = 1;
  int32 interval_ms = 2;
}

message WatchMetricsResponse {
  bytes data = 1;
}

enum MetricsFormat {
  METRICS_FORMAT_TEXT = 0;
  METRICS_FORMAT_PROTO_DELIM = 1;
  METRICS_FORMAT_PROTO_TEXT = 2;
  METRICS_FORMAT_PROTO_COMPACT = 3;
  METRICS_FORMAT_OPEN_METRICS = 4;
}

message GetConfigRequest {}
message GetConfigResponse {
  Config config = 1;
}

message SetConfigRequest {
  Config config = 1;
}
message SetConfigResponse {
  Config config = 1;
}

message Config {
  bool enable_mock_streams = 1;
  bytes mock_stream_network_key = 2;
}

message MockStreamSegment {
  uint64 id = 1;
  int64 timestamp = 2;
  bytes padding = 3;
}

message StartMockStreamRequest {
  uint32 bitrate_kbps = 1;
  uint32 segment_interval_ms = 2;
  uint32 timeout_ms = 3;
  bytes network_key = 4;
}

message StartMockStreamResponse {
  uint64 id = 1;
}

message StopMockStreamRequest {
  uint64 id = 1;
}

message StopMockStreamResponse {}


service Debug {
  rpc PProf(PProfRequest) returns (PProfResponse);
  rpc ReadMetrics(ReadMetricsRequest) returns (ReadMetricsResponse);
  rpc WatchMetrics(WatchMetricsRequest) returns (stream WatchMetricsResponse);
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);
  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse);
  rpc StartMockStream(StartMockStreamRequest) returns (StartMockStreamResponse);
  rpc StopMockStream(StopMockStreamRequest) returns (StopMockStreamResponse);
}
