// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iface.proto

package iface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProtocolOptions int32

const (
	ProtocolOptions_VERSION                             ProtocolOptions = 0
	ProtocolOptions_MINIMUM_VERSION                     ProtocolOptions = 1
	ProtocolOptions_SWARM_IDENTIFIER                    ProtocolOptions = 2
	ProtocolOptions_CONTENT_INTEGRITY_PROTECTION_METHOD ProtocolOptions = 3
	ProtocolOptions_MERKLE_HASH_TREE_FUNCTION           ProtocolOptions = 4
	ProtocolOptions_LIVE_SIGNATURE_ALGORITHM            ProtocolOptions = 5
	ProtocolOptions_CHUNK_ADDRESSING_METHOD             ProtocolOptions = 6
	ProtocolOptions_LIVE_DISCARD_WINDOW                 ProtocolOptions = 7
	ProtocolOptions_SUPPORTED_MESSAGES                  ProtocolOptions = 8
	ProtocolOptions_CHUNK_SIZE                          ProtocolOptions = 9
	ProtocolOptions_END_OPTION                          ProtocolOptions = 255
)

var ProtocolOptions_name = map[int32]string{
	0:   "VERSION",
	1:   "MINIMUM_VERSION",
	2:   "SWARM_IDENTIFIER",
	3:   "CONTENT_INTEGRITY_PROTECTION_METHOD",
	4:   "MERKLE_HASH_TREE_FUNCTION",
	5:   "LIVE_SIGNATURE_ALGORITHM",
	6:   "CHUNK_ADDRESSING_METHOD",
	7:   "LIVE_DISCARD_WINDOW",
	8:   "SUPPORTED_MESSAGES",
	9:   "CHUNK_SIZE",
	255: "END_OPTION",
}

var ProtocolOptions_value = map[string]int32{
	"VERSION":                             0,
	"MINIMUM_VERSION":                     1,
	"SWARM_IDENTIFIER":                    2,
	"CONTENT_INTEGRITY_PROTECTION_METHOD": 3,
	"MERKLE_HASH_TREE_FUNCTION":           4,
	"LIVE_SIGNATURE_ALGORITHM":            5,
	"CHUNK_ADDRESSING_METHOD":             6,
	"LIVE_DISCARD_WINDOW":                 7,
	"SUPPORTED_MESSAGES":                  8,
	"CHUNK_SIZE":                          9,
	"END_OPTION":                          255,
}

func (x ProtocolOptions) String() string {
	return proto.EnumName(ProtocolOptions_name, int32(x))
}

func (ProtocolOptions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{0}
}

type Version int32

const (
	Version_VERSION_RFC7574 Version = 0
)

var Version_name = map[int32]string{
	0: "VERSION_RFC7574",
}

var Version_value = map[string]int32{
	"VERSION_RFC7574": 0,
}

func (x Version) String() string {
	return proto.EnumName(Version_name, int32(x))
}

func (Version) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{1}
}

type ContentIntegrityProtectionMethod int32

const (
	ContentIntegrityProtectionMethod_NONE                ContentIntegrityProtectionMethod = 0
	ContentIntegrityProtectionMethod_MERKLE_HASH_TREE    ContentIntegrityProtectionMethod = 1
	ContentIntegrityProtectionMethod_SIGN_ALL            ContentIntegrityProtectionMethod = 2
	ContentIntegrityProtectionMethod_UNIFIED_MERKLE_TREE ContentIntegrityProtectionMethod = 3
)

var ContentIntegrityProtectionMethod_name = map[int32]string{
	0: "NONE",
	1: "MERKLE_HASH_TREE",
	2: "SIGN_ALL",
	3: "UNIFIED_MERKLE_TREE",
}

var ContentIntegrityProtectionMethod_value = map[string]int32{
	"NONE":                0,
	"MERKLE_HASH_TREE":    1,
	"SIGN_ALL":            2,
	"UNIFIED_MERKLE_TREE": 3,
}

func (x ContentIntegrityProtectionMethod) String() string {
	return proto.EnumName(ContentIntegrityProtectionMethod_name, int32(x))
}

func (ContentIntegrityProtectionMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{2}
}

type MerkleHashTreeFunction int32

const (
	MerkleHashTreeFunction_SHA1   MerkleHashTreeFunction = 0
	MerkleHashTreeFunction_SHA224 MerkleHashTreeFunction = 1
	MerkleHashTreeFunction_SHA256 MerkleHashTreeFunction = 2
	MerkleHashTreeFunction_SHA384 MerkleHashTreeFunction = 3
	MerkleHashTreeFunction_SHA512 MerkleHashTreeFunction = 4
)

var MerkleHashTreeFunction_name = map[int32]string{
	0: "SHA1",
	1: "SHA224",
	2: "SHA256",
	3: "SHA384",
	4: "SHA512",
}

var MerkleHashTreeFunction_value = map[string]int32{
	"SHA1":   0,
	"SHA224": 1,
	"SHA256": 2,
	"SHA384": 3,
	"SHA512": 4,
}

func (x MerkleHashTreeFunction) String() string {
	return proto.EnumName(MerkleHashTreeFunction_name, int32(x))
}

func (MerkleHashTreeFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{3}
}

type LiveSignatureAlgorithm int32

const (
	LiveSignatureAlgorithm_RSASHA1         LiveSignatureAlgorithm = 0
	LiveSignatureAlgorithm_RSASHA256       LiveSignatureAlgorithm = 1
	LiveSignatureAlgorithm_ECDSAP256SHA256 LiveSignatureAlgorithm = 2
	LiveSignatureAlgorithm_ECDSAP384SHA384 LiveSignatureAlgorithm = 3
)

var LiveSignatureAlgorithm_name = map[int32]string{
	0: "RSASHA1",
	1: "RSASHA256",
	2: "ECDSAP256SHA256",
	3: "ECDSAP384SHA384",
}

var LiveSignatureAlgorithm_value = map[string]int32{
	"RSASHA1":         0,
	"RSASHA256":       1,
	"ECDSAP256SHA256": 2,
	"ECDSAP384SHA384": 3,
}

func (x LiveSignatureAlgorithm) String() string {
	return proto.EnumName(LiveSignatureAlgorithm_name, int32(x))
}

func (LiveSignatureAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{4}
}

type ChunkAddressingMethod int32

const (
	ChunkAddressingMethod_BIN32         ChunkAddressingMethod = 0
	ChunkAddressingMethod_BYTE_RANGE64  ChunkAddressingMethod = 1
	ChunkAddressingMethod_CHUNK_RANGE32 ChunkAddressingMethod = 2
	ChunkAddressingMethod_BIN64         ChunkAddressingMethod = 3
	ChunkAddressingMethod_CHUNK_RANGE64 ChunkAddressingMethod = 4
)

var ChunkAddressingMethod_name = map[int32]string{
	0: "BIN32",
	1: "BYTE_RANGE64",
	2: "CHUNK_RANGE32",
	3: "BIN64",
	4: "CHUNK_RANGE64",
}

var ChunkAddressingMethod_value = map[string]int32{
	"BIN32":         0,
	"BYTE_RANGE64":  1,
	"CHUNK_RANGE32": 2,
	"BIN64":         3,
	"CHUNK_RANGE64": 4,
}

func (x ChunkAddressingMethod) String() string {
	return proto.EnumName(ChunkAddressingMethod_name, int32(x))
}

func (ChunkAddressingMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{5}
}

type MessageTypes int32

const (
	MessageTypes_HANDSHAKE        MessageTypes = 0
	MessageTypes_DATA             MessageTypes = 1
	MessageTypes_ACK              MessageTypes = 2
	MessageTypes_HAVE             MessageTypes = 3
	MessageTypes_INTEGRITY        MessageTypes = 4
	MessageTypes_PEX_RESV4        MessageTypes = 5
	MessageTypes_PEX_REQ          MessageTypes = 6
	MessageTypes_SIGNED_INTEGRITY MessageTypes = 7
	MessageTypes_REQUEST          MessageTypes = 8
	MessageTypes_CANCEL           MessageTypes = 9
	MessageTypes_CHOKE            MessageTypes = 10
	MessageTypes_UNCHOKE          MessageTypes = 11
	MessageTypes_PEX_RESV6        MessageTypes = 12
	MessageTypes_PEX_RESCERT      MessageTypes = 13
)

var MessageTypes_name = map[int32]string{
	0:  "HANDSHAKE",
	1:  "DATA",
	2:  "ACK",
	3:  "HAVE",
	4:  "INTEGRITY",
	5:  "PEX_RESV4",
	6:  "PEX_REQ",
	7:  "SIGNED_INTEGRITY",
	8:  "REQUEST",
	9:  "CANCEL",
	10: "CHOKE",
	11: "UNCHOKE",
	12: "PEX_RESV6",
	13: "PEX_RESCERT",
}

var MessageTypes_value = map[string]int32{
	"HANDSHAKE":        0,
	"DATA":             1,
	"ACK":              2,
	"HAVE":             3,
	"INTEGRITY":        4,
	"PEX_RESV4":        5,
	"PEX_REQ":          6,
	"SIGNED_INTEGRITY": 7,
	"REQUEST":          8,
	"CANCEL":           9,
	"CHOKE":            10,
	"UNCHOKE":          11,
	"PEX_RESV6":        12,
	"PEX_RESCERT":      13,
}

func (x MessageTypes) String() string {
	return proto.EnumName(MessageTypes_name, int32(x))
}

func (MessageTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{6}
}

type Bin32ChunkAddress struct {
	Value                uint32   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bin32ChunkAddress) Reset()         { *m = Bin32ChunkAddress{} }
func (m *Bin32ChunkAddress) String() string { return proto.CompactTextString(m) }
func (*Bin32ChunkAddress) ProtoMessage()    {}
func (*Bin32ChunkAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{0}
}

func (m *Bin32ChunkAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bin32ChunkAddress.Unmarshal(m, b)
}
func (m *Bin32ChunkAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bin32ChunkAddress.Marshal(b, m, deterministic)
}
func (m *Bin32ChunkAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bin32ChunkAddress.Merge(m, src)
}
func (m *Bin32ChunkAddress) XXX_Size() int {
	return xxx_messageInfo_Bin32ChunkAddress.Size(m)
}
func (m *Bin32ChunkAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_Bin32ChunkAddress.DiscardUnknown(m)
}

var xxx_messageInfo_Bin32ChunkAddress proto.InternalMessageInfo

func (m *Bin32ChunkAddress) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type LiveSignature struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveSignature) Reset()         { *m = LiveSignature{} }
func (m *LiveSignature) String() string { return proto.CompactTextString(m) }
func (*LiveSignature) ProtoMessage()    {}
func (*LiveSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{1}
}

func (m *LiveSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveSignature.Unmarshal(m, b)
}
func (m *LiveSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveSignature.Marshal(b, m, deterministic)
}
func (m *LiveSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveSignature.Merge(m, src)
}
func (m *LiveSignature) XXX_Size() int {
	return xxx_messageInfo_LiveSignature.Size(m)
}
func (m *LiveSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveSignature.DiscardUnknown(m)
}

var xxx_messageInfo_LiveSignature proto.InternalMessageInfo

func (m *LiveSignature) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type IntegrityHash struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntegrityHash) Reset()         { *m = IntegrityHash{} }
func (m *IntegrityHash) String() string { return proto.CompactTextString(m) }
func (*IntegrityHash) ProtoMessage()    {}
func (*IntegrityHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{2}
}

func (m *IntegrityHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegrityHash.Unmarshal(m, b)
}
func (m *IntegrityHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegrityHash.Marshal(b, m, deterministic)
}
func (m *IntegrityHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegrityHash.Merge(m, src)
}
func (m *IntegrityHash) XXX_Size() int {
	return xxx_messageInfo_IntegrityHash.Size(m)
}
func (m *IntegrityHash) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegrityHash.DiscardUnknown(m)
}

var xxx_messageInfo_IntegrityHash proto.InternalMessageInfo

func (m *IntegrityHash) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SupportedMessages struct {
	Values               []ProtocolOptions `protobuf:"varint,1,rep,packed,name=values,proto3,enum=iface.ProtocolOptions" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SupportedMessages) Reset()         { *m = SupportedMessages{} }
func (m *SupportedMessages) String() string { return proto.CompactTextString(m) }
func (*SupportedMessages) ProtoMessage()    {}
func (*SupportedMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{3}
}

func (m *SupportedMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SupportedMessages.Unmarshal(m, b)
}
func (m *SupportedMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SupportedMessages.Marshal(b, m, deterministic)
}
func (m *SupportedMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupportedMessages.Merge(m, src)
}
func (m *SupportedMessages) XXX_Size() int {
	return xxx_messageInfo_SupportedMessages.Size(m)
}
func (m *SupportedMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_SupportedMessages.DiscardUnknown(m)
}

var xxx_messageInfo_SupportedMessages proto.InternalMessageInfo

func (m *SupportedMessages) GetValues() []ProtocolOptions {
	if m != nil {
		return m.Values
	}
	return nil
}

type Handshake struct {
	ChannelId            uint32             `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Options              *SupportedMessages `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Handshake) Reset()         { *m = Handshake{} }
func (m *Handshake) String() string { return proto.CompactTextString(m) }
func (*Handshake) ProtoMessage()    {}
func (*Handshake) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{4}
}

func (m *Handshake) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Handshake.Unmarshal(m, b)
}
func (m *Handshake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Handshake.Marshal(b, m, deterministic)
}
func (m *Handshake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Handshake.Merge(m, src)
}
func (m *Handshake) XXX_Size() int {
	return xxx_messageInfo_Handshake.Size(m)
}
func (m *Handshake) XXX_DiscardUnknown() {
	xxx_messageInfo_Handshake.DiscardUnknown(m)
}

var xxx_messageInfo_Handshake proto.InternalMessageInfo

func (m *Handshake) GetChannelId() uint32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *Handshake) GetOptions() *SupportedMessages {
	if m != nil {
		return m.Options
	}
	return nil
}

type Data struct {
	Address              *Bin32ChunkAddress   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Data                 []byte               `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{5}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetAddress() *Bin32ChunkAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Data) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type Ack struct {
	Address              *Bin32ChunkAddress   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	DelaySample          *timestamp.Timestamp `protobuf:"bytes,2,opt,name=delay_sample,json=delaySample,proto3" json:"delay_sample,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{6}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetAddress() *Bin32ChunkAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Ack) GetDelaySample() *timestamp.Timestamp {
	if m != nil {
		return m.DelaySample
	}
	return nil
}

type Have struct {
	Address              *Bin32ChunkAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Have) Reset()         { *m = Have{} }
func (m *Have) String() string { return proto.CompactTextString(m) }
func (*Have) ProtoMessage()    {}
func (*Have) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{7}
}

func (m *Have) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Have.Unmarshal(m, b)
}
func (m *Have) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Have.Marshal(b, m, deterministic)
}
func (m *Have) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Have.Merge(m, src)
}
func (m *Have) XXX_Size() int {
	return xxx_messageInfo_Have.Size(m)
}
func (m *Have) XXX_DiscardUnknown() {
	xxx_messageInfo_Have.DiscardUnknown(m)
}

var xxx_messageInfo_Have proto.InternalMessageInfo

func (m *Have) GetAddress() *Bin32ChunkAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

type Integrity struct {
	Address              *Bin32ChunkAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Hash                 []byte             `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Integrity) Reset()         { *m = Integrity{} }
func (m *Integrity) String() string { return proto.CompactTextString(m) }
func (*Integrity) ProtoMessage()    {}
func (*Integrity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{8}
}

func (m *Integrity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Integrity.Unmarshal(m, b)
}
func (m *Integrity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Integrity.Marshal(b, m, deterministic)
}
func (m *Integrity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Integrity.Merge(m, src)
}
func (m *Integrity) XXX_Size() int {
	return xxx_messageInfo_Integrity.Size(m)
}
func (m *Integrity) XXX_DiscardUnknown() {
	xxx_messageInfo_Integrity.DiscardUnknown(m)
}

var xxx_messageInfo_Integrity proto.InternalMessageInfo

func (m *Integrity) GetAddress() *Bin32ChunkAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Integrity) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type SignedIntegrity struct {
	Address              *Bin32ChunkAddress   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature            []byte               `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SignedIntegrity) Reset()         { *m = SignedIntegrity{} }
func (m *SignedIntegrity) String() string { return proto.CompactTextString(m) }
func (*SignedIntegrity) ProtoMessage()    {}
func (*SignedIntegrity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{9}
}

func (m *SignedIntegrity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedIntegrity.Unmarshal(m, b)
}
func (m *SignedIntegrity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedIntegrity.Marshal(b, m, deterministic)
}
func (m *SignedIntegrity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedIntegrity.Merge(m, src)
}
func (m *SignedIntegrity) XXX_Size() int {
	return xxx_messageInfo_SignedIntegrity.Size(m)
}
func (m *SignedIntegrity) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedIntegrity.DiscardUnknown(m)
}

var xxx_messageInfo_SignedIntegrity proto.InternalMessageInfo

func (m *SignedIntegrity) GetAddress() *Bin32ChunkAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *SignedIntegrity) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *SignedIntegrity) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Request struct {
	Address              *Bin32ChunkAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{10}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetAddress() *Bin32ChunkAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

type Cancel struct {
	Address              *Bin32ChunkAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Cancel) Reset()         { *m = Cancel{} }
func (m *Cancel) String() string { return proto.CompactTextString(m) }
func (*Cancel) ProtoMessage()    {}
func (*Cancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{11}
}

func (m *Cancel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cancel.Unmarshal(m, b)
}
func (m *Cancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cancel.Marshal(b, m, deterministic)
}
func (m *Cancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cancel.Merge(m, src)
}
func (m *Cancel) XXX_Size() int {
	return xxx_messageInfo_Cancel.Size(m)
}
func (m *Cancel) XXX_DiscardUnknown() {
	xxx_messageInfo_Cancel.DiscardUnknown(m)
}

var xxx_messageInfo_Cancel proto.InternalMessageInfo

func (m *Cancel) GetAddress() *Bin32ChunkAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

type Choke struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Choke) Reset()         { *m = Choke{} }
func (m *Choke) String() string { return proto.CompactTextString(m) }
func (*Choke) ProtoMessage()    {}
func (*Choke) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{12}
}

func (m *Choke) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Choke.Unmarshal(m, b)
}
func (m *Choke) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Choke.Marshal(b, m, deterministic)
}
func (m *Choke) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Choke.Merge(m, src)
}
func (m *Choke) XXX_Size() int {
	return xxx_messageInfo_Choke.Size(m)
}
func (m *Choke) XXX_DiscardUnknown() {
	xxx_messageInfo_Choke.DiscardUnknown(m)
}

var xxx_messageInfo_Choke proto.InternalMessageInfo

type Unchoke struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Unchoke) Reset()         { *m = Unchoke{} }
func (m *Unchoke) String() string { return proto.CompactTextString(m) }
func (*Unchoke) ProtoMessage()    {}
func (*Unchoke) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{13}
}

func (m *Unchoke) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Unchoke.Unmarshal(m, b)
}
func (m *Unchoke) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Unchoke.Marshal(b, m, deterministic)
}
func (m *Unchoke) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unchoke.Merge(m, src)
}
func (m *Unchoke) XXX_Size() int {
	return xxx_messageInfo_Unchoke.Size(m)
}
func (m *Unchoke) XXX_DiscardUnknown() {
	xxx_messageInfo_Unchoke.DiscardUnknown(m)
}

var xxx_messageInfo_Unchoke proto.InternalMessageInfo

type Datagram struct {
	ChannelId            uint32              `protobuf:"varint,11,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Messages             []*Datagram_Message `protobuf:"bytes,12,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Datagram) Reset()         { *m = Datagram{} }
func (m *Datagram) String() string { return proto.CompactTextString(m) }
func (*Datagram) ProtoMessage()    {}
func (*Datagram) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{14}
}

func (m *Datagram) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Datagram.Unmarshal(m, b)
}
func (m *Datagram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Datagram.Marshal(b, m, deterministic)
}
func (m *Datagram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Datagram.Merge(m, src)
}
func (m *Datagram) XXX_Size() int {
	return xxx_messageInfo_Datagram.Size(m)
}
func (m *Datagram) XXX_DiscardUnknown() {
	xxx_messageInfo_Datagram.DiscardUnknown(m)
}

var xxx_messageInfo_Datagram proto.InternalMessageInfo

func (m *Datagram) GetChannelId() uint32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *Datagram) GetMessages() []*Datagram_Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Datagram_Message struct {
	// Types that are valid to be assigned to DataOneof:
	//	*Datagram_Message_Handshake
	//	*Datagram_Message_Data
	//	*Datagram_Message_Ack
	//	*Datagram_Message_Have
	//	*Datagram_Message_Integrity
	//	*Datagram_Message_SignedIntegrity
	//	*Datagram_Message_Request
	//	*Datagram_Message_Cancel
	//	*Datagram_Message_Choke
	//	*Datagram_Message_Unchoke
	DataOneof            isDatagram_Message_DataOneof `protobuf_oneof:"data_oneof"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Datagram_Message) Reset()         { *m = Datagram_Message{} }
func (m *Datagram_Message) String() string { return proto.CompactTextString(m) }
func (*Datagram_Message) ProtoMessage()    {}
func (*Datagram_Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{14, 0}
}

func (m *Datagram_Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Datagram_Message.Unmarshal(m, b)
}
func (m *Datagram_Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Datagram_Message.Marshal(b, m, deterministic)
}
func (m *Datagram_Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Datagram_Message.Merge(m, src)
}
func (m *Datagram_Message) XXX_Size() int {
	return xxx_messageInfo_Datagram_Message.Size(m)
}
func (m *Datagram_Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Datagram_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Datagram_Message proto.InternalMessageInfo

type isDatagram_Message_DataOneof interface {
	isDatagram_Message_DataOneof()
}

type Datagram_Message_Handshake struct {
	Handshake *Handshake `protobuf:"bytes,1,opt,name=Handshake,proto3,oneof"`
}

type Datagram_Message_Data struct {
	Data *Data `protobuf:"bytes,2,opt,name=Data,proto3,oneof"`
}

type Datagram_Message_Ack struct {
	Ack *Ack `protobuf:"bytes,3,opt,name=Ack,proto3,oneof"`
}

type Datagram_Message_Have struct {
	Have *Have `protobuf:"bytes,4,opt,name=Have,proto3,oneof"`
}

type Datagram_Message_Integrity struct {
	Integrity *Integrity `protobuf:"bytes,5,opt,name=Integrity,proto3,oneof"`
}

type Datagram_Message_SignedIntegrity struct {
	SignedIntegrity *SignedIntegrity `protobuf:"bytes,6,opt,name=SignedIntegrity,proto3,oneof"`
}

type Datagram_Message_Request struct {
	Request *Request `protobuf:"bytes,7,opt,name=Request,proto3,oneof"`
}

type Datagram_Message_Cancel struct {
	Cancel *Cancel `protobuf:"bytes,8,opt,name=Cancel,proto3,oneof"`
}

type Datagram_Message_Choke struct {
	Choke *Choke `protobuf:"bytes,9,opt,name=Choke,proto3,oneof"`
}

type Datagram_Message_Unchoke struct {
	Unchoke *Unchoke `protobuf:"bytes,10,opt,name=Unchoke,proto3,oneof"`
}

func (*Datagram_Message_Handshake) isDatagram_Message_DataOneof() {}

func (*Datagram_Message_Data) isDatagram_Message_DataOneof() {}

func (*Datagram_Message_Ack) isDatagram_Message_DataOneof() {}

func (*Datagram_Message_Have) isDatagram_Message_DataOneof() {}

func (*Datagram_Message_Integrity) isDatagram_Message_DataOneof() {}

func (*Datagram_Message_SignedIntegrity) isDatagram_Message_DataOneof() {}

func (*Datagram_Message_Request) isDatagram_Message_DataOneof() {}

func (*Datagram_Message_Cancel) isDatagram_Message_DataOneof() {}

func (*Datagram_Message_Choke) isDatagram_Message_DataOneof() {}

func (*Datagram_Message_Unchoke) isDatagram_Message_DataOneof() {}

func (m *Datagram_Message) GetDataOneof() isDatagram_Message_DataOneof {
	if m != nil {
		return m.DataOneof
	}
	return nil
}

func (m *Datagram_Message) GetHandshake() *Handshake {
	if x, ok := m.GetDataOneof().(*Datagram_Message_Handshake); ok {
		return x.Handshake
	}
	return nil
}

func (m *Datagram_Message) GetData() *Data {
	if x, ok := m.GetDataOneof().(*Datagram_Message_Data); ok {
		return x.Data
	}
	return nil
}

func (m *Datagram_Message) GetAck() *Ack {
	if x, ok := m.GetDataOneof().(*Datagram_Message_Ack); ok {
		return x.Ack
	}
	return nil
}

func (m *Datagram_Message) GetHave() *Have {
	if x, ok := m.GetDataOneof().(*Datagram_Message_Have); ok {
		return x.Have
	}
	return nil
}

func (m *Datagram_Message) GetIntegrity() *Integrity {
	if x, ok := m.GetDataOneof().(*Datagram_Message_Integrity); ok {
		return x.Integrity
	}
	return nil
}

func (m *Datagram_Message) GetSignedIntegrity() *SignedIntegrity {
	if x, ok := m.GetDataOneof().(*Datagram_Message_SignedIntegrity); ok {
		return x.SignedIntegrity
	}
	return nil
}

func (m *Datagram_Message) GetRequest() *Request {
	if x, ok := m.GetDataOneof().(*Datagram_Message_Request); ok {
		return x.Request
	}
	return nil
}

func (m *Datagram_Message) GetCancel() *Cancel {
	if x, ok := m.GetDataOneof().(*Datagram_Message_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (m *Datagram_Message) GetChoke() *Choke {
	if x, ok := m.GetDataOneof().(*Datagram_Message_Choke); ok {
		return x.Choke
	}
	return nil
}

func (m *Datagram_Message) GetUnchoke() *Unchoke {
	if x, ok := m.GetDataOneof().(*Datagram_Message_Unchoke); ok {
		return x.Unchoke
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Datagram_Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Datagram_Message_OneofMarshaler, _Datagram_Message_OneofUnmarshaler, _Datagram_Message_OneofSizer, []interface{}{
		(*Datagram_Message_Handshake)(nil),
		(*Datagram_Message_Data)(nil),
		(*Datagram_Message_Ack)(nil),
		(*Datagram_Message_Have)(nil),
		(*Datagram_Message_Integrity)(nil),
		(*Datagram_Message_SignedIntegrity)(nil),
		(*Datagram_Message_Request)(nil),
		(*Datagram_Message_Cancel)(nil),
		(*Datagram_Message_Choke)(nil),
		(*Datagram_Message_Unchoke)(nil),
	}
}

func _Datagram_Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Datagram_Message)
	// data_oneof
	switch x := m.DataOneof.(type) {
	case *Datagram_Message_Handshake:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Handshake); err != nil {
			return err
		}
	case *Datagram_Message_Data:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case *Datagram_Message_Ack:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {
			return err
		}
	case *Datagram_Message_Have:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Have); err != nil {
			return err
		}
	case *Datagram_Message_Integrity:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Integrity); err != nil {
			return err
		}
	case *Datagram_Message_SignedIntegrity:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SignedIntegrity); err != nil {
			return err
		}
	case *Datagram_Message_Request:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Request); err != nil {
			return err
		}
	case *Datagram_Message_Cancel:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cancel); err != nil {
			return err
		}
	case *Datagram_Message_Choke:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Choke); err != nil {
			return err
		}
	case *Datagram_Message_Unchoke:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unchoke); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Datagram_Message.DataOneof has unexpected type %T", x)
	}
	return nil
}

func _Datagram_Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Datagram_Message)
	switch tag {
	case 1: // data_oneof.Handshake
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Handshake)
		err := b.DecodeMessage(msg)
		m.DataOneof = &Datagram_Message_Handshake{msg}
		return true, err
	case 2: // data_oneof.Data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Data)
		err := b.DecodeMessage(msg)
		m.DataOneof = &Datagram_Message_Data{msg}
		return true, err
	case 3: // data_oneof.Ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ack)
		err := b.DecodeMessage(msg)
		m.DataOneof = &Datagram_Message_Ack{msg}
		return true, err
	case 4: // data_oneof.Have
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Have)
		err := b.DecodeMessage(msg)
		m.DataOneof = &Datagram_Message_Have{msg}
		return true, err
	case 5: // data_oneof.Integrity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Integrity)
		err := b.DecodeMessage(msg)
		m.DataOneof = &Datagram_Message_Integrity{msg}
		return true, err
	case 6: // data_oneof.SignedIntegrity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SignedIntegrity)
		err := b.DecodeMessage(msg)
		m.DataOneof = &Datagram_Message_SignedIntegrity{msg}
		return true, err
	case 7: // data_oneof.Request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Request)
		err := b.DecodeMessage(msg)
		m.DataOneof = &Datagram_Message_Request{msg}
		return true, err
	case 8: // data_oneof.Cancel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cancel)
		err := b.DecodeMessage(msg)
		m.DataOneof = &Datagram_Message_Cancel{msg}
		return true, err
	case 9: // data_oneof.Choke
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Choke)
		err := b.DecodeMessage(msg)
		m.DataOneof = &Datagram_Message_Choke{msg}
		return true, err
	case 10: // data_oneof.Unchoke
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Unchoke)
		err := b.DecodeMessage(msg)
		m.DataOneof = &Datagram_Message_Unchoke{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Datagram_Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Datagram_Message)
	// data_oneof
	switch x := m.DataOneof.(type) {
	case *Datagram_Message_Handshake:
		s := proto.Size(x.Handshake)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datagram_Message_Data:
		s := proto.Size(x.Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datagram_Message_Ack:
		s := proto.Size(x.Ack)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datagram_Message_Have:
		s := proto.Size(x.Have)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datagram_Message_Integrity:
		s := proto.Size(x.Integrity)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datagram_Message_SignedIntegrity:
		s := proto.Size(x.SignedIntegrity)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datagram_Message_Request:
		s := proto.Size(x.Request)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datagram_Message_Cancel:
		s := proto.Size(x.Cancel)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datagram_Message_Choke:
		s := proto.Size(x.Choke)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Datagram_Message_Unchoke:
		s := proto.Size(x.Unchoke)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Signal struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signal) Reset()         { *m = Signal{} }
func (m *Signal) String() string { return proto.CompactTextString(m) }
func (*Signal) ProtoMessage()    {}
func (*Signal) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ac32d09acae4b8b, []int{15}
}

func (m *Signal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signal.Unmarshal(m, b)
}
func (m *Signal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signal.Marshal(b, m, deterministic)
}
func (m *Signal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signal.Merge(m, src)
}
func (m *Signal) XXX_Size() int {
	return xxx_messageInfo_Signal.Size(m)
}
func (m *Signal) XXX_DiscardUnknown() {
	xxx_messageInfo_Signal.DiscardUnknown(m)
}

var xxx_messageInfo_Signal proto.InternalMessageInfo

func (m *Signal) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Signal) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("iface.ProtocolOptions", ProtocolOptions_name, ProtocolOptions_value)
	proto.RegisterEnum("iface.Version", Version_name, Version_value)
	proto.RegisterEnum("iface.ContentIntegrityProtectionMethod", ContentIntegrityProtectionMethod_name, ContentIntegrityProtectionMethod_value)
	proto.RegisterEnum("iface.MerkleHashTreeFunction", MerkleHashTreeFunction_name, MerkleHashTreeFunction_value)
	proto.RegisterEnum("iface.LiveSignatureAlgorithm", LiveSignatureAlgorithm_name, LiveSignatureAlgorithm_value)
	proto.RegisterEnum("iface.ChunkAddressingMethod", ChunkAddressingMethod_name, ChunkAddressingMethod_value)
	proto.RegisterEnum("iface.MessageTypes", MessageTypes_name, MessageTypes_value)
	proto.RegisterType((*Bin32ChunkAddress)(nil), "iface.Bin32ChunkAddress")
	proto.RegisterType((*LiveSignature)(nil), "iface.LiveSignature")
	proto.RegisterType((*IntegrityHash)(nil), "iface.IntegrityHash")
	proto.RegisterType((*SupportedMessages)(nil), "iface.SupportedMessages")
	proto.RegisterType((*Handshake)(nil), "iface.Handshake")
	proto.RegisterType((*Data)(nil), "iface.Data")
	proto.RegisterType((*Ack)(nil), "iface.Ack")
	proto.RegisterType((*Have)(nil), "iface.Have")
	proto.RegisterType((*Integrity)(nil), "iface.Integrity")
	proto.RegisterType((*SignedIntegrity)(nil), "iface.SignedIntegrity")
	proto.RegisterType((*Request)(nil), "iface.Request")
	proto.RegisterType((*Cancel)(nil), "iface.Cancel")
	proto.RegisterType((*Choke)(nil), "iface.Choke")
	proto.RegisterType((*Unchoke)(nil), "iface.Unchoke")
	proto.RegisterType((*Datagram)(nil), "iface.Datagram")
	proto.RegisterType((*Datagram_Message)(nil), "iface.Datagram.Message")
	proto.RegisterType((*Signal)(nil), "iface.Signal")
}

func init() { proto.RegisterFile("iface.proto", fileDescriptor_0ac32d09acae4b8b) }

var fileDescriptor_0ac32d09acae4b8b = []byte{
	// 1256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xed, 0x72, 0xda, 0x46,
	0x17, 0xe6, 0xcb, 0x7c, 0x1c, 0x70, 0xbc, 0xd9, 0xe4, 0x75, 0xf4, 0xa6, 0x49, 0xea, 0xd0, 0x76,
	0xe2, 0x32, 0x2d, 0x4e, 0xf0, 0x47, 0x32, 0x6d, 0xf3, 0x43, 0x96, 0xd6, 0x96, 0xc6, 0x20, 0xc8,
	0x4a, 0x38, 0x4d, 0x7e, 0x44, 0x23, 0xc3, 0x06, 0x18, 0x40, 0xa2, 0x48, 0x64, 0x9a, 0x3b, 0xe8,
	0x4d, 0xb4, 0x77, 0xd0, 0x3b, 0xc9, 0x3d, 0xb5, 0xb3, 0xab, 0x15, 0x06, 0xbb, 0xed, 0x4c, 0xdd,
	0x3f, 0x9e, 0xdd, 0xa3, 0xe7, 0x7c, 0xec, 0x73, 0x9e, 0x73, 0x30, 0x94, 0x47, 0xef, 0xbd, 0x1e,
	0xab, 0xcf, 0xe6, 0x41, 0x14, 0xe0, 0x0d, 0x71, 0xb9, 0xff, 0xf9, 0x20, 0x08, 0x06, 0x13, 0xb6,
	0x27, 0x8c, 0x17, 0x8b, 0xf7, 0x7b, 0xd1, 0x68, 0xca, 0xc2, 0xc8, 0x9b, 0xce, 0x62, 0x5c, 0xf5,
	0x6b, 0xb8, 0x7d, 0x3c, 0xf2, 0xf7, 0x1b, 0xda, 0x70, 0xe1, 0x8f, 0xd5, 0x7e, 0x7f, 0xce, 0xc2,
	0x10, 0xdf, 0x85, 0x8d, 0x0f, 0xde, 0x64, 0xc1, 0x94, 0xf4, 0x4e, 0x7a, 0x77, 0x93, 0xc6, 0x97,
	0xea, 0x57, 0xb0, 0xd9, 0x1c, 0x7d, 0x60, 0xf6, 0x68, 0xe0, 0x7b, 0xd1, 0x62, 0xce, 0xd6, 0x61,
	0x95, 0x15, 0x98, 0xe9, 0x47, 0x6c, 0x30, 0x1f, 0x45, 0x1f, 0x0d, 0x2f, 0x1c, 0xfe, 0x0d, 0x4c,
	0x83, 0xdb, 0xf6, 0x62, 0x36, 0x0b, 0xe6, 0x11, 0xeb, 0xb7, 0x58, 0x18, 0x7a, 0x03, 0x16, 0xe2,
	0x3a, 0xe4, 0xc5, 0xd7, 0x50, 0x49, 0xef, 0x64, 0x77, 0x6f, 0x35, 0xb6, 0xeb, 0xf1, 0x9b, 0x3a,
	0xbc, 0xd6, 0x5e, 0x30, 0x69, 0xcf, 0xa2, 0x51, 0xe0, 0x87, 0x54, 0xa2, 0xaa, 0xef, 0xa0, 0x64,
	0x78, 0x7e, 0x3f, 0x1c, 0x7a, 0x63, 0x86, 0x1f, 0x02, 0xf4, 0x86, 0x9e, 0xef, 0xb3, 0x89, 0x3b,
	0xea, 0xcb, 0xd2, 0x4b, 0xd2, 0x62, 0xf6, 0x71, 0x03, 0x0a, 0x41, 0xec, 0xae, 0x64, 0x76, 0xd2,
	0xbb, 0xe5, 0x86, 0x22, 0x83, 0x5f, 0x2b, 0x83, 0x26, 0xc0, 0xea, 0x2f, 0x69, 0xc8, 0xe9, 0x5e,
	0xe4, 0x71, 0x67, 0x2f, 0x26, 0x47, 0x04, 0xbe, 0x74, 0xbe, 0x46, 0x1e, 0x4d, 0x80, 0x18, 0x43,
	0xae, 0xef, 0x45, 0x9e, 0xc8, 0x56, 0xa1, 0xe2, 0x8c, 0x5f, 0x40, 0x69, 0xd9, 0x01, 0x25, 0x2b,
	0x22, 0xdd, 0xaf, 0xc7, 0x3d, 0xaa, 0x27, 0x3d, 0xaa, 0x3b, 0x09, 0x82, 0x5e, 0x82, 0xab, 0x3f,
	0x43, 0x56, 0xed, 0x8d, 0x6f, 0x54, 0xc8, 0x4b, 0xa8, 0xf4, 0xd9, 0xc4, 0xfb, 0xe8, 0x86, 0xde,
	0x74, 0x36, 0x61, 0xf2, 0xf9, 0xff, 0x94, 0xb7, 0x2c, 0xf0, 0xb6, 0x80, 0x57, 0xbf, 0x83, 0x9c,
	0xe1, 0x7d, 0x60, 0x37, 0x49, 0x5d, 0xb5, 0xa1, 0xb4, 0x14, 0xc3, 0x4d, 0x49, 0x1c, 0x7a, 0xe1,
	0x30, 0x21, 0x91, 0x9f, 0xab, 0xbf, 0xa6, 0x61, 0x8b, 0xab, 0x90, 0xf5, 0xff, 0x5b, 0xec, 0xb5,
	0x66, 0x64, 0xfe, 0x45, 0x33, 0xf0, 0x03, 0x28, 0x85, 0xc9, 0x18, 0x88, 0x36, 0x56, 0xe8, 0xa5,
	0xa1, 0xfa, 0x12, 0x0a, 0x94, 0xfd, 0xb4, 0x60, 0x61, 0x74, 0x23, 0xce, 0x7e, 0x80, 0xbc, 0xe6,
	0xf9, 0x3d, 0x36, 0xb9, 0x91, 0x77, 0x01, 0x36, 0xb4, 0x61, 0x30, 0x66, 0xd5, 0x12, 0x14, 0xba,
	0x7e, 0x4f, 0x1c, 0x7f, 0xcf, 0x41, 0x91, 0xcb, 0x78, 0x30, 0xf7, 0xa6, 0x57, 0xc6, 0xa4, 0x7c,
	0x75, 0x4c, 0xf6, 0xa1, 0x38, 0x95, 0x73, 0xa0, 0x54, 0x76, 0xb2, 0xbb, 0xe5, 0xc6, 0x3d, 0x99,
	0x34, 0x89, 0x50, 0x97, 0x73, 0x42, 0x97, 0xc0, 0xfb, 0x9f, 0xb2, 0x50, 0x90, 0x56, 0xfc, 0x74,
	0x65, 0x26, 0x65, 0xd9, 0x48, 0x46, 0x58, 0xda, 0x8d, 0x14, 0x5d, 0x19, 0xdc, 0xc7, 0xf1, 0x90,
	0xc9, 0x16, 0x94, 0x57, 0xd2, 0x19, 0x29, 0x1a, 0xcf, 0xdf, 0x23, 0xa1, 0x7e, 0x39, 0x31, 0x20,
	0x11, 0x6a, 0x6f, 0x6c, 0xa4, 0xa8, 0x18, 0x8b, 0xc7, 0xb1, 0x46, 0x95, 0xdc, 0x5a, 0x08, 0x6e,
	0xe2, 0x21, 0x84, 0x7c, 0x9f, 0xae, 0x48, 0x51, 0xd9, 0x58, 0xab, 0xeb, 0x72, 0x5f, 0xa5, 0xe8,
	0x8a, 0x5e, 0x8f, 0xaf, 0xc9, 0x4c, 0xc9, 0x0b, 0xbf, 0x64, 0x2d, 0x5d, 0xf9, 0x6a, 0xa4, 0xe8,
	0x35, 0x5d, 0xd6, 0x96, 0x5a, 0x50, 0x0a, 0xc2, 0xf7, 0x96, 0xf4, 0x95, 0x56, 0x23, 0x45, 0x97,
	0x62, 0x79, 0x92, 0x34, 0x5e, 0x29, 0x0a, 0xe8, 0xa6, 0x84, 0xc6, 0x46, 0x23, 0x45, 0x13, 0x5d,
	0x7c, 0x29, 0x7b, 0xac, 0x94, 0x04, 0xae, 0x92, 0xe0, 0xb8, 0xcd, 0x48, 0xd1, 0xf8, 0x23, 0x4f,
	0x2d, 0x05, 0xa0, 0xc0, 0x5a, 0x6a, 0x69, 0xe5, 0xa9, 0xe5, 0xf1, 0xb8, 0x02, 0xc0, 0xf7, 0x93,
	0x1b, 0xf8, 0x2c, 0x78, 0x5f, 0xad, 0x43, 0x5e, 0x6c, 0xf9, 0x09, 0x46, 0x90, 0x5d, 0xc8, 0x65,
	0x5a, 0xa2, 0xfc, 0xf8, 0x57, 0x5b, 0xad, 0xf6, 0x5b, 0x06, 0xb6, 0xae, 0xac, 0x68, 0x5c, 0x86,
	0xc2, 0x39, 0xa1, 0xb6, 0xd9, 0xb6, 0x50, 0x0a, 0xdf, 0x81, 0xad, 0x96, 0x69, 0x99, 0xad, 0x6e,
	0xcb, 0x4d, 0x8c, 0x69, 0x7c, 0x17, 0x90, 0xfd, 0x5a, 0xa5, 0x2d, 0xd7, 0xd4, 0x89, 0xe5, 0x98,
	0x27, 0x26, 0xa1, 0x28, 0x83, 0x9f, 0xc0, 0x17, 0x5a, 0xdb, 0x72, 0x88, 0xe5, 0xb8, 0xa6, 0xe5,
	0x90, 0x53, 0x6a, 0x3a, 0x6f, 0xdc, 0x0e, 0x6d, 0x3b, 0x44, 0x73, 0xcc, 0xb6, 0xe5, 0xb6, 0x88,
	0x63, 0xb4, 0x75, 0x94, 0xc5, 0x0f, 0xe1, 0xff, 0x2d, 0x42, 0xcf, 0x9a, 0xc4, 0x35, 0x54, 0xdb,
	0x70, 0x1d, 0x4a, 0x88, 0x7b, 0xd2, 0xb5, 0x04, 0x0a, 0xe5, 0xf0, 0x03, 0x50, 0x9a, 0xe6, 0x39,
	0x71, 0x6d, 0xf3, 0xd4, 0x52, 0x9d, 0x2e, 0x25, 0xae, 0xda, 0x3c, 0x6d, 0x53, 0xd3, 0x31, 0x5a,
	0x68, 0x03, 0x7f, 0x06, 0xf7, 0x34, 0xa3, 0x6b, 0x9d, 0xb9, 0xaa, 0xae, 0x53, 0x62, 0xdb, 0xa6,
	0x75, 0x9a, 0x44, 0xce, 0xe3, 0x7b, 0x70, 0x47, 0xb8, 0xea, 0xa6, 0xad, 0xa9, 0x54, 0x77, 0x5f,
	0x9b, 0x96, 0xde, 0x7e, 0x8d, 0x0a, 0x78, 0x1b, 0xb0, 0xdd, 0xed, 0x74, 0xda, 0xd4, 0x21, 0xba,
	0xdb, 0x22, 0xb6, 0xad, 0x9e, 0x12, 0x1b, 0x15, 0xf1, 0x2d, 0x80, 0x38, 0x9a, 0x6d, 0xbe, 0x25,
	0xa8, 0x84, 0xb7, 0x00, 0x88, 0xa5, 0xbb, 0xed, 0x8e, 0xa8, 0xe5, 0x8f, 0x74, 0xed, 0x11, 0x14,
	0xce, 0xd9, 0x3c, 0x1c, 0x05, 0x3e, 0xa7, 0x42, 0x52, 0xe0, 0xd2, 0x13, 0xed, 0xf9, 0xe1, 0xf3,
	0x03, 0x94, 0xaa, 0x8d, 0x60, 0x47, 0x0b, 0xfc, 0x88, 0xf9, 0xd1, 0x52, 0x39, 0x9c, 0x4f, 0xd6,
	0xe3, 0x5c, 0xb6, 0x58, 0x34, 0x0c, 0xfa, 0xb8, 0x08, 0x39, 0xab, 0x6d, 0x11, 0x94, 0xe2, 0xc4,
	0x5d, 0x7d, 0x39, 0x4a, 0xe3, 0x0a, 0x14, 0xf9, 0x5b, 0x5d, 0xb5, 0xd9, 0x44, 0x19, 0xfe, 0x86,
	0xae, 0xc5, 0x39, 0xe5, 0x85, 0x0a, 0xac, 0x80, 0x65, 0x6b, 0x14, 0xb6, 0x5b, 0x6c, 0x3e, 0x9e,
	0x30, 0xfe, 0xdb, 0xec, 0xcc, 0x19, 0x3b, 0x59, 0xf8, 0x22, 0x0d, 0x4f, 0x60, 0x1b, 0xea, 0x33,
	0x94, 0xc2, 0x00, 0x79, 0xdb, 0x50, 0x1b, 0x8d, 0x03, 0x94, 0x4e, 0xce, 0x87, 0x47, 0x28, 0x23,
	0xcf, 0xfb, 0x2f, 0x0e, 0x50, 0x56, 0x9e, 0x0f, 0x9f, 0x35, 0x50, 0xae, 0xf6, 0x0e, 0xb6, 0xd7,
	0xfe, 0x33, 0x50, 0x27, 0x83, 0x60, 0x3e, 0x8a, 0x86, 0x53, 0xae, 0x02, 0x6a, 0xab, 0x32, 0xec,
	0x26, 0x94, 0xe2, 0x0b, 0x8f, 0x96, 0xe6, 0x4c, 0x10, 0x4d, 0xb7, 0xd5, 0x4e, 0xe3, 0xf0, 0x68,
	0x99, 0x62, 0x69, 0xdc, 0x7f, 0x71, 0x90, 0xe4, 0xaa, 0x31, 0xf8, 0xdf, 0xea, 0xb2, 0x1b, 0xf9,
	0x03, 0xc9, 0x49, 0x09, 0x36, 0x8e, 0x4d, 0x6b, 0xbf, 0x81, 0x52, 0x18, 0x41, 0xe5, 0xf8, 0x8d,
	0x43, 0x5c, 0xaa, 0x5a, 0xa7, 0xe4, 0x88, 0x57, 0x7e, 0x1b, 0x36, 0xe3, 0xae, 0x08, 0xd3, 0x7e,
	0x03, 0x65, 0x24, 0xfe, 0x88, 0xd7, 0xbf, 0xfe, 0xf5, 0xe8, 0x00, 0xe5, 0x6a, 0x9f, 0xd2, 0x50,
	0x91, 0x5b, 0xcc, 0xf9, 0x38, 0x63, 0x21, 0x2f, 0xd8, 0x50, 0x2d, 0xdd, 0x36, 0xd4, 0x33, 0xce,
	0x7b, 0x11, 0x72, 0xba, 0xea, 0xa8, 0x28, 0x8d, 0x0b, 0x90, 0x55, 0xb5, 0x33, 0x94, 0xe1, 0x26,
	0x43, 0x3d, 0x27, 0x28, 0xcb, 0xb1, 0x4b, 0xbd, 0xa2, 0x1c, 0xbf, 0x76, 0xc8, 0x8f, 0x2e, 0x25,
	0xf6, 0xf9, 0x01, 0xda, 0xe0, 0x3c, 0xc4, 0xd7, 0x57, 0x28, 0x2f, 0x84, 0x6f, 0x9e, 0x5a, 0x44,
	0xbf, 0x54, 0x38, 0x2a, 0x08, 0xaa, 0xc8, 0xab, 0x2e, 0xb1, 0x1d, 0x54, 0xe4, 0xec, 0x6a, 0xaa,
	0xa5, 0x91, 0x26, 0x2a, 0xf1, 0xa2, 0x35, 0xa3, 0x7d, 0x46, 0x10, 0x70, 0x4c, 0xd7, 0x8a, 0x2f,
	0xe5, 0xd5, 0x14, 0x47, 0xa8, 0x82, 0xb7, 0xa0, 0x2c, 0xaf, 0x1a, 0xa1, 0x0e, 0xda, 0x3c, 0xae,
	0xbf, 0xfd, 0x66, 0x30, 0x8a, 0x86, 0x8b, 0x8b, 0x7a, 0x2f, 0x98, 0xee, 0xb5, 0xd8, 0x94, 0x35,
	0xbd, 0x8b, 0x70, 0x6f, 0x10, 0x7c, 0x3b, 0x9b, 0x85, 0xb3, 0xd9, 0xde, 0x6c, 0x3c, 0xd8, 0x13,
	0x0b, 0xe1, 0x7b, 0xf1, 0xf7, 0x22, 0x2f, 0x7e, 0xf3, 0xf6, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0x33, 0xd1, 0x4b, 0x8a, 0x48, 0x0a, 0x00, 0x00,
}
