// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: video/v1/channel.proto

package video

import (
	directory "github.com/MemeLabs/go-ppspp/pkg/apis/network/v1/directory"
	certificate "github.com/MemeLabs/go-ppspp/pkg/apis/type/certificate"
	key "github.com/MemeLabs/go-ppspp/pkg/apis/type/key"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Owner:
	//	*VideoChannel_Local_
	//	*VideoChannel_LocalShare_
	//	*VideoChannel_RemoteShare_
	Owner                   isVideoChannel_Owner      `protobuf_oneof:"owner"`
	Key                     *key.Key                  `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Token                   []byte                    `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	DirectoryListingSnippet *directory.ListingSnippet `protobuf:"bytes,4,opt,name=directory_listing_snippet,json=directoryListingSnippet,proto3" json:"directory_listing_snippet,omitempty"`
}

func (x *VideoChannel) Reset() {
	*x = VideoChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChannel) ProtoMessage() {}

func (x *VideoChannel) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChannel.ProtoReflect.Descriptor instead.
func (*VideoChannel) Descriptor() ([]byte, []int) {
	return file_video_v1_channel_proto_rawDescGZIP(), []int{0}
}

func (x *VideoChannel) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *VideoChannel) GetOwner() isVideoChannel_Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (x *VideoChannel) GetLocal() *VideoChannel_Local {
	if x, ok := x.GetOwner().(*VideoChannel_Local_); ok {
		return x.Local
	}
	return nil
}

func (x *VideoChannel) GetLocalShare() *VideoChannel_LocalShare {
	if x, ok := x.GetOwner().(*VideoChannel_LocalShare_); ok {
		return x.LocalShare
	}
	return nil
}

func (x *VideoChannel) GetRemoteShare() *VideoChannel_RemoteShare {
	if x, ok := x.GetOwner().(*VideoChannel_RemoteShare_); ok {
		return x.RemoteShare
	}
	return nil
}

func (x *VideoChannel) GetKey() *key.Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *VideoChannel) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *VideoChannel) GetDirectoryListingSnippet() *directory.ListingSnippet {
	if x != nil {
		return x.DirectoryListingSnippet
	}
	return nil
}

type isVideoChannel_Owner interface {
	isVideoChannel_Owner()
}

type VideoChannel_Local_ struct {
	Local *VideoChannel_Local `protobuf:"bytes,1001,opt,name=local,proto3,oneof"`
}

type VideoChannel_LocalShare_ struct {
	LocalShare *VideoChannel_LocalShare `protobuf:"bytes,1002,opt,name=local_share,json=localShare,proto3,oneof"`
}

type VideoChannel_RemoteShare_ struct {
	RemoteShare *VideoChannel_RemoteShare `protobuf:"bytes,1003,opt,name=remote_share,json=remoteShare,proto3,oneof"`
}

func (*VideoChannel_Local_) isVideoChannel_Owner() {}

func (*VideoChannel_LocalShare_) isVideoChannel_Owner() {}

func (*VideoChannel_RemoteShare_) isVideoChannel_Owner() {}

type VideoChannelListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VideoChannelListRequest) Reset() {
	*x = VideoChannelListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChannelListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChannelListRequest) ProtoMessage() {}

func (x *VideoChannelListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChannelListRequest.ProtoReflect.Descriptor instead.
func (*VideoChannelListRequest) Descriptor() ([]byte, []int) {
	return file_video_v1_channel_proto_rawDescGZIP(), []int{1}
}

type VideoChannelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []*VideoChannel `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *VideoChannelListResponse) Reset() {
	*x = VideoChannelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChannelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChannelListResponse) ProtoMessage() {}

func (x *VideoChannelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChannelListResponse.ProtoReflect.Descriptor instead.
func (*VideoChannelListResponse) Descriptor() ([]byte, []int) {
	return file_video_v1_channel_proto_rawDescGZIP(), []int{2}
}

func (x *VideoChannelListResponse) GetChannels() []*VideoChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

type VideoChannelCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectoryListingSnippet *directory.ListingSnippet `protobuf:"bytes,1,opt,name=directory_listing_snippet,json=directoryListingSnippet,proto3" json:"directory_listing_snippet,omitempty"`
	NetworkKey              []byte                    `protobuf:"bytes,2,opt,name=network_key,json=networkKey,proto3" json:"network_key,omitempty"`
}

func (x *VideoChannelCreateRequest) Reset() {
	*x = VideoChannelCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_channel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChannelCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChannelCreateRequest) ProtoMessage() {}

func (x *VideoChannelCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_channel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChannelCreateRequest.ProtoReflect.Descriptor instead.
func (*VideoChannelCreateRequest) Descriptor() ([]byte, []int) {
	return file_video_v1_channel_proto_rawDescGZIP(), []int{3}
}

func (x *VideoChannelCreateRequest) GetDirectoryListingSnippet() *directory.ListingSnippet {
	if x != nil {
		return x.DirectoryListingSnippet
	}
	return nil
}

func (x *VideoChannelCreateRequest) GetNetworkKey() []byte {
	if x != nil {
		return x.NetworkKey
	}
	return nil
}

type VideoChannelCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *VideoChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *VideoChannelCreateResponse) Reset() {
	*x = VideoChannelCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_channel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChannelCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChannelCreateResponse) ProtoMessage() {}

func (x *VideoChannelCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_channel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChannelCreateResponse.ProtoReflect.Descriptor instead.
func (*VideoChannelCreateResponse) Descriptor() ([]byte, []int) {
	return file_video_v1_channel_proto_rawDescGZIP(), []int{4}
}

func (x *VideoChannelCreateResponse) GetChannel() *VideoChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type VideoChannelUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DirectoryListingSnippet *directory.ListingSnippet `protobuf:"bytes,2,opt,name=directory_listing_snippet,json=directoryListingSnippet,proto3" json:"directory_listing_snippet,omitempty"`
	NetworkKey              []byte                    `protobuf:"bytes,3,opt,name=network_key,json=networkKey,proto3" json:"network_key,omitempty"`
}

func (x *VideoChannelUpdateRequest) Reset() {
	*x = VideoChannelUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_channel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChannelUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChannelUpdateRequest) ProtoMessage() {}

func (x *VideoChannelUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_channel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChannelUpdateRequest.ProtoReflect.Descriptor instead.
func (*VideoChannelUpdateRequest) Descriptor() ([]byte, []int) {
	return file_video_v1_channel_proto_rawDescGZIP(), []int{5}
}

func (x *VideoChannelUpdateRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VideoChannelUpdateRequest) GetDirectoryListingSnippet() *directory.ListingSnippet {
	if x != nil {
		return x.DirectoryListingSnippet
	}
	return nil
}

func (x *VideoChannelUpdateRequest) GetNetworkKey() []byte {
	if x != nil {
		return x.NetworkKey
	}
	return nil
}

type VideoChannelUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *VideoChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *VideoChannelUpdateResponse) Reset() {
	*x = VideoChannelUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_channel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChannelUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChannelUpdateResponse) ProtoMessage() {}

func (x *VideoChannelUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_channel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChannelUpdateResponse.ProtoReflect.Descriptor instead.
func (*VideoChannelUpdateResponse) Descriptor() ([]byte, []int) {
	return file_video_v1_channel_proto_rawDescGZIP(), []int{6}
}

func (x *VideoChannelUpdateResponse) GetChannel() *VideoChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type VideoChannelDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VideoChannelDeleteRequest) Reset() {
	*x = VideoChannelDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_channel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChannelDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChannelDeleteRequest) ProtoMessage() {}

func (x *VideoChannelDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_channel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChannelDeleteRequest.ProtoReflect.Descriptor instead.
func (*VideoChannelDeleteRequest) Descriptor() ([]byte, []int) {
	return file_video_v1_channel_proto_rawDescGZIP(), []int{7}
}

func (x *VideoChannelDeleteRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type VideoChannelDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VideoChannelDeleteResponse) Reset() {
	*x = VideoChannelDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_channel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChannelDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChannelDeleteResponse) ProtoMessage() {}

func (x *VideoChannelDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_channel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChannelDeleteResponse.ProtoReflect.Descriptor instead.
func (*VideoChannelDeleteResponse) Descriptor() ([]byte, []int) {
	return file_video_v1_channel_proto_rawDescGZIP(), []int{8}
}

type VideoChannel_Local struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthKey    []byte `protobuf:"bytes,1,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	NetworkKey []byte `protobuf:"bytes,2,opt,name=network_key,json=networkKey,proto3" json:"network_key,omitempty"`
}

func (x *VideoChannel_Local) Reset() {
	*x = VideoChannel_Local{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_channel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChannel_Local) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChannel_Local) ProtoMessage() {}

func (x *VideoChannel_Local) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_channel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChannel_Local.ProtoReflect.Descriptor instead.
func (*VideoChannel_Local) Descriptor() ([]byte, []int) {
	return file_video_v1_channel_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VideoChannel_Local) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *VideoChannel_Local) GetNetworkKey() []byte {
	if x != nil {
		return x.NetworkKey
	}
	return nil
}

type VideoChannel_LocalShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *certificate.Certificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *VideoChannel_LocalShare) Reset() {
	*x = VideoChannel_LocalShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_channel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChannel_LocalShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChannel_LocalShare) ProtoMessage() {}

func (x *VideoChannel_LocalShare) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_channel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChannel_LocalShare.ProtoReflect.Descriptor instead.
func (*VideoChannel_LocalShare) Descriptor() ([]byte, []int) {
	return file_video_v1_channel_proto_rawDescGZIP(), []int{0, 1}
}

func (x *VideoChannel_LocalShare) GetCertificate() *certificate.Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type VideoChannel_RemoteShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NetworkKey  []byte `protobuf:"bytes,2,opt,name=network_key,json=networkKey,proto3" json:"network_key,omitempty"`
	ServiceKey  []byte `protobuf:"bytes,3,opt,name=service_key,json=serviceKey,proto3" json:"service_key,omitempty"`
	ServiceSalt []byte `protobuf:"bytes,4,opt,name=service_salt,json=serviceSalt,proto3" json:"service_salt,omitempty"`
	ServerAddr  string `protobuf:"bytes,5,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
}

func (x *VideoChannel_RemoteShare) Reset() {
	*x = VideoChannel_RemoteShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_channel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoChannel_RemoteShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChannel_RemoteShare) ProtoMessage() {}

func (x *VideoChannel_RemoteShare) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_channel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChannel_RemoteShare.ProtoReflect.Descriptor instead.
func (*VideoChannel_RemoteShare) Descriptor() ([]byte, []int) {
	return file_video_v1_channel_proto_rawDescGZIP(), []int{0, 2}
}

func (x *VideoChannel_RemoteShare) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VideoChannel_RemoteShare) GetNetworkKey() []byte {
	if x != nil {
		return x.NetworkKey
	}
	return nil
}

func (x *VideoChannel_RemoteShare) GetServiceKey() []byte {
	if x != nil {
		return x.ServiceKey
	}
	return nil
}

func (x *VideoChannel_RemoteShare) GetServiceSalt() []byte {
	if x != nil {
		return x.ServiceSalt
	}
	return nil
}

func (x *VideoChannel_RemoteShare) GetServerAddr() string {
	if x != nil {
		return x.ServerAddr
	}
	return ""
}

var File_video_v1_channel_proto protoreflect.FileDescriptor

var file_video_v1_channel_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x74, 0x79, 0x70, 0x65, 0x2f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x05, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d,
	0x73, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74,
	0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x67, 0x0a, 0x19, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x52,
	0x17, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x1a, 0x43, 0x0a, 0x05, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x1a, 0x48, 0x0a,
	0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0xa3, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x42, 0x07, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x55, 0x0a, 0x18, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x19, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6e, 0x69, 0x70,
	0x70, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x69,
	0x6d, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x52, 0x17, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4b, 0x65, 0x79,
	0x22, 0x55, 0x0a, 0x1a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xb5, 0x01, 0x0a, 0x19, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x19, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x52, 0x17, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x22,
	0x55, 0x0a, 0x1a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2b, 0x0a, 0x19, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x9c, 0x03, 0x0a, 0x14, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x5b, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73,
	0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x50, 0x0a, 0x12, 0x67, 0x67, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4d, 0x65, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x70,
	0x70, 0x73, 0x70, 0x70, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0xba, 0x02, 0x03, 0x53,
	0x56, 0x4f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_v1_channel_proto_rawDescOnce sync.Once
	file_video_v1_channel_proto_rawDescData = file_video_v1_channel_proto_rawDesc
)

func file_video_v1_channel_proto_rawDescGZIP() []byte {
	file_video_v1_channel_proto_rawDescOnce.Do(func() {
		file_video_v1_channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_v1_channel_proto_rawDescData)
	})
	return file_video_v1_channel_proto_rawDescData
}

var file_video_v1_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_video_v1_channel_proto_goTypes = []interface{}{
	(*VideoChannel)(nil),               // 0: strims.video.v1.VideoChannel
	(*VideoChannelListRequest)(nil),    // 1: strims.video.v1.VideoChannelListRequest
	(*VideoChannelListResponse)(nil),   // 2: strims.video.v1.VideoChannelListResponse
	(*VideoChannelCreateRequest)(nil),  // 3: strims.video.v1.VideoChannelCreateRequest
	(*VideoChannelCreateResponse)(nil), // 4: strims.video.v1.VideoChannelCreateResponse
	(*VideoChannelUpdateRequest)(nil),  // 5: strims.video.v1.VideoChannelUpdateRequest
	(*VideoChannelUpdateResponse)(nil), // 6: strims.video.v1.VideoChannelUpdateResponse
	(*VideoChannelDeleteRequest)(nil),  // 7: strims.video.v1.VideoChannelDeleteRequest
	(*VideoChannelDeleteResponse)(nil), // 8: strims.video.v1.VideoChannelDeleteResponse
	(*VideoChannel_Local)(nil),         // 9: strims.video.v1.VideoChannel.Local
	(*VideoChannel_LocalShare)(nil),    // 10: strims.video.v1.VideoChannel.LocalShare
	(*VideoChannel_RemoteShare)(nil),   // 11: strims.video.v1.VideoChannel.RemoteShare
	(*key.Key)(nil),                    // 12: strims.type.Key
	(*directory.ListingSnippet)(nil),   // 13: strims.network.v1.directory.ListingSnippet
	(*certificate.Certificate)(nil),    // 14: strims.type.Certificate
}
var file_video_v1_channel_proto_depIdxs = []int32{
	9,  // 0: strims.video.v1.VideoChannel.local:type_name -> strims.video.v1.VideoChannel.Local
	10, // 1: strims.video.v1.VideoChannel.local_share:type_name -> strims.video.v1.VideoChannel.LocalShare
	11, // 2: strims.video.v1.VideoChannel.remote_share:type_name -> strims.video.v1.VideoChannel.RemoteShare
	12, // 3: strims.video.v1.VideoChannel.key:type_name -> strims.type.Key
	13, // 4: strims.video.v1.VideoChannel.directory_listing_snippet:type_name -> strims.network.v1.directory.ListingSnippet
	0,  // 5: strims.video.v1.VideoChannelListResponse.channels:type_name -> strims.video.v1.VideoChannel
	13, // 6: strims.video.v1.VideoChannelCreateRequest.directory_listing_snippet:type_name -> strims.network.v1.directory.ListingSnippet
	0,  // 7: strims.video.v1.VideoChannelCreateResponse.channel:type_name -> strims.video.v1.VideoChannel
	13, // 8: strims.video.v1.VideoChannelUpdateRequest.directory_listing_snippet:type_name -> strims.network.v1.directory.ListingSnippet
	0,  // 9: strims.video.v1.VideoChannelUpdateResponse.channel:type_name -> strims.video.v1.VideoChannel
	14, // 10: strims.video.v1.VideoChannel.LocalShare.certificate:type_name -> strims.type.Certificate
	1,  // 11: strims.video.v1.VideoChannelFrontend.List:input_type -> strims.video.v1.VideoChannelListRequest
	3,  // 12: strims.video.v1.VideoChannelFrontend.Create:input_type -> strims.video.v1.VideoChannelCreateRequest
	5,  // 13: strims.video.v1.VideoChannelFrontend.Update:input_type -> strims.video.v1.VideoChannelUpdateRequest
	7,  // 14: strims.video.v1.VideoChannelFrontend.Delete:input_type -> strims.video.v1.VideoChannelDeleteRequest
	2,  // 15: strims.video.v1.VideoChannelFrontend.List:output_type -> strims.video.v1.VideoChannelListResponse
	4,  // 16: strims.video.v1.VideoChannelFrontend.Create:output_type -> strims.video.v1.VideoChannelCreateResponse
	6,  // 17: strims.video.v1.VideoChannelFrontend.Update:output_type -> strims.video.v1.VideoChannelUpdateResponse
	8,  // 18: strims.video.v1.VideoChannelFrontend.Delete:output_type -> strims.video.v1.VideoChannelDeleteResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_video_v1_channel_proto_init() }
func file_video_v1_channel_proto_init() {
	if File_video_v1_channel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_v1_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChannelListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChannelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_channel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChannelCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_channel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChannelCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_channel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChannelUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_channel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChannelUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_channel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChannelDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_channel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChannelDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_channel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChannel_Local); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_channel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChannel_LocalShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_channel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoChannel_RemoteShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_video_v1_channel_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*VideoChannel_Local_)(nil),
		(*VideoChannel_LocalShare_)(nil),
		(*VideoChannel_RemoteShare_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_v1_channel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_video_v1_channel_proto_goTypes,
		DependencyIndexes: file_video_v1_channel_proto_depIdxs,
		MessageInfos:      file_video_v1_channel_proto_msgTypes,
	}.Build()
	File_video_v1_channel_proto = out.File
	file_video_v1_channel_proto_rawDesc = nil
	file_video_v1_channel_proto_goTypes = nil
	file_video_v1_channel_proto_depIdxs = nil
}
