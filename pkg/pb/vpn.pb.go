// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: vpn.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StartVPNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableBootstrapPublishing bool `protobuf:"varint,1,opt,name=enable_bootstrap_publishing,json=enableBootstrapPublishing,proto3" json:"enable_bootstrap_publishing,omitempty"`
}

func (x *StartVPNRequest) Reset() {
	*x = StartVPNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVPNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVPNRequest) ProtoMessage() {}

func (x *StartVPNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVPNRequest.ProtoReflect.Descriptor instead.
func (*StartVPNRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{0}
}

func (x *StartVPNRequest) GetEnableBootstrapPublishing() bool {
	if x != nil {
		return x.EnableBootstrapPublishing
	}
	return false
}

type StartVPNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartVPNResponse) Reset() {
	*x = StartVPNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVPNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVPNResponse) ProtoMessage() {}

func (x *StartVPNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVPNResponse.ProtoReflect.Descriptor instead.
func (*StartVPNResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{1}
}

type StopVPNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopVPNRequest) Reset() {
	*x = StopVPNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVPNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVPNRequest) ProtoMessage() {}

func (x *StopVPNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVPNRequest.ProtoReflect.Descriptor instead.
func (*StopVPNRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{2}
}

type StopVPNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopVPNResponse) Reset() {
	*x = StopVPNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVPNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVPNResponse) ProtoMessage() {}

func (x *StopVPNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVPNResponse.ProtoReflect.Descriptor instead.
func (*StopVPNResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{3}
}

type NetworkEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*NetworkEvent_NetworkOpen_
	//	*NetworkEvent_NetworkClose_
	Body isNetworkEvent_Body `protobuf_oneof:"body"`
}

func (x *NetworkEvent) Reset() {
	*x = NetworkEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEvent) ProtoMessage() {}

func (x *NetworkEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEvent.ProtoReflect.Descriptor instead.
func (*NetworkEvent) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{4}
}

func (m *NetworkEvent) GetBody() isNetworkEvent_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *NetworkEvent) GetNetworkOpen() *NetworkEvent_NetworkOpen {
	if x, ok := x.GetBody().(*NetworkEvent_NetworkOpen_); ok {
		return x.NetworkOpen
	}
	return nil
}

func (x *NetworkEvent) GetNetworkClose() *NetworkEvent_NetworkClose {
	if x, ok := x.GetBody().(*NetworkEvent_NetworkClose_); ok {
		return x.NetworkClose
	}
	return nil
}

type isNetworkEvent_Body interface {
	isNetworkEvent_Body()
}

type NetworkEvent_NetworkOpen_ struct {
	NetworkOpen *NetworkEvent_NetworkOpen `protobuf:"bytes,1,opt,name=network_open,json=networkOpen,proto3,oneof"`
}

type NetworkEvent_NetworkClose_ struct {
	NetworkClose *NetworkEvent_NetworkClose `protobuf:"bytes,2,opt,name=network_close,json=networkClose,proto3,oneof"`
}

func (*NetworkEvent_NetworkOpen_) isNetworkEvent_Body() {}

func (*NetworkEvent_NetworkClose_) isNetworkEvent_Body() {}

type NetworkAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId []byte `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Port   uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *NetworkAddress) Reset() {
	*x = NetworkAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkAddress) ProtoMessage() {}

func (x *NetworkAddress) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkAddress.ProtoReflect.Descriptor instead.
func (*NetworkAddress) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkAddress) GetHostId() []byte {
	if x != nil {
		return x.HostId
	}
	return nil
}

func (x *NetworkAddress) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PeerInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion uint32       `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	Certificate     *Certificate `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	NodePlatform    string       `protobuf:"bytes,3,opt,name=node_platform,json=nodePlatform,proto3" json:"node_platform,omitempty"`
	NodeVersion     string       `protobuf:"bytes,4,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
}

func (x *PeerInit) Reset() {
	*x = PeerInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInit) ProtoMessage() {}

func (x *PeerInit) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInit.ProtoReflect.Descriptor instead.
func (*PeerInit) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{6}
}

func (x *PeerInit) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *PeerInit) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *PeerInit) GetNodePlatform() string {
	if x != nil {
		return x.NodePlatform
	}
	return ""
}

func (x *PeerInit) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

type NetworkHandshake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*NetworkHandshake_Init_
	//	*NetworkHandshake_NetworkBindings_
	//	*NetworkHandshake_CertificateUpgradeOffer_
	//	*NetworkHandshake_CertificateUpgradeRequest_
	//	*NetworkHandshake_CertificateUpgradeResponse_
	//	*NetworkHandshake_CertificateUpdate_
	Body isNetworkHandshake_Body `protobuf_oneof:"body"`
}

func (x *NetworkHandshake) Reset() {
	*x = NetworkHandshake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkHandshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkHandshake) ProtoMessage() {}

func (x *NetworkHandshake) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkHandshake.ProtoReflect.Descriptor instead.
func (*NetworkHandshake) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{7}
}

func (m *NetworkHandshake) GetBody() isNetworkHandshake_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *NetworkHandshake) GetInit() *NetworkHandshake_Init {
	if x, ok := x.GetBody().(*NetworkHandshake_Init_); ok {
		return x.Init
	}
	return nil
}

func (x *NetworkHandshake) GetNetworkBindings() *NetworkHandshake_NetworkBindings {
	if x, ok := x.GetBody().(*NetworkHandshake_NetworkBindings_); ok {
		return x.NetworkBindings
	}
	return nil
}

func (x *NetworkHandshake) GetCertificateUpgradeOffer() *NetworkHandshake_CertificateUpgradeOffer {
	if x, ok := x.GetBody().(*NetworkHandshake_CertificateUpgradeOffer_); ok {
		return x.CertificateUpgradeOffer
	}
	return nil
}

func (x *NetworkHandshake) GetCertificateUpgradeRequest() *NetworkHandshake_CertificateUpgradeRequest {
	if x, ok := x.GetBody().(*NetworkHandshake_CertificateUpgradeRequest_); ok {
		return x.CertificateUpgradeRequest
	}
	return nil
}

func (x *NetworkHandshake) GetCertificateUpgradeResponse() *NetworkHandshake_CertificateUpgradeResponse {
	if x, ok := x.GetBody().(*NetworkHandshake_CertificateUpgradeResponse_); ok {
		return x.CertificateUpgradeResponse
	}
	return nil
}

func (x *NetworkHandshake) GetCertificateUpdate() *NetworkHandshake_CertificateUpdate {
	if x, ok := x.GetBody().(*NetworkHandshake_CertificateUpdate_); ok {
		return x.CertificateUpdate
	}
	return nil
}

type isNetworkHandshake_Body interface {
	isNetworkHandshake_Body()
}

type NetworkHandshake_Init_ struct {
	Init *NetworkHandshake_Init `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type NetworkHandshake_NetworkBindings_ struct {
	NetworkBindings *NetworkHandshake_NetworkBindings `protobuf:"bytes,2,opt,name=network_bindings,json=networkBindings,proto3,oneof"`
}

type NetworkHandshake_CertificateUpgradeOffer_ struct {
	CertificateUpgradeOffer *NetworkHandshake_CertificateUpgradeOffer `protobuf:"bytes,3,opt,name=certificate_upgrade_offer,json=certificateUpgradeOffer,proto3,oneof"`
}

type NetworkHandshake_CertificateUpgradeRequest_ struct {
	CertificateUpgradeRequest *NetworkHandshake_CertificateUpgradeRequest `protobuf:"bytes,4,opt,name=certificate_upgrade_request,json=certificateUpgradeRequest,proto3,oneof"`
}

type NetworkHandshake_CertificateUpgradeResponse_ struct {
	CertificateUpgradeResponse *NetworkHandshake_CertificateUpgradeResponse `protobuf:"bytes,5,opt,name=certificate_upgrade_response,json=certificateUpgradeResponse,proto3,oneof"`
}

type NetworkHandshake_CertificateUpdate_ struct {
	CertificateUpdate *NetworkHandshake_CertificateUpdate `protobuf:"bytes,6,opt,name=certificate_update,json=certificateUpdate,proto3,oneof"`
}

func (*NetworkHandshake_Init_) isNetworkHandshake_Body() {}

func (*NetworkHandshake_NetworkBindings_) isNetworkHandshake_Body() {}

func (*NetworkHandshake_CertificateUpgradeOffer_) isNetworkHandshake_Body() {}

func (*NetworkHandshake_CertificateUpgradeRequest_) isNetworkHandshake_Body() {}

func (*NetworkHandshake_CertificateUpgradeResponse_) isNetworkHandshake_Body() {}

func (*NetworkHandshake_CertificateUpdate_) isNetworkHandshake_Body() {}

type BrokerProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnMtu int32 `protobuf:"varint,1,opt,name=conn_mtu,json=connMtu,proto3" json:"conn_mtu,omitempty"`
}

func (x *BrokerProxyRequest) Reset() {
	*x = BrokerProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxyRequest) ProtoMessage() {}

func (x *BrokerProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxyRequest.ProtoReflect.Descriptor instead.
func (*BrokerProxyRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{8}
}

func (x *BrokerProxyRequest) GetConnMtu() int32 {
	if x != nil {
		return x.ConnMtu
	}
	return 0
}

type BrokerProxyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*BrokerProxyEvent_Open_
	//	*BrokerProxyEvent_Data_
	//	*BrokerProxyEvent_Read_
	Body isBrokerProxyEvent_Body `protobuf_oneof:"body"`
}

func (x *BrokerProxyEvent) Reset() {
	*x = BrokerProxyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxyEvent) ProtoMessage() {}

func (x *BrokerProxyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxyEvent.ProtoReflect.Descriptor instead.
func (*BrokerProxyEvent) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{9}
}

func (m *BrokerProxyEvent) GetBody() isBrokerProxyEvent_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *BrokerProxyEvent) GetOpen() *BrokerProxyEvent_Open {
	if x, ok := x.GetBody().(*BrokerProxyEvent_Open_); ok {
		return x.Open
	}
	return nil
}

func (x *BrokerProxyEvent) GetData() *BrokerProxyEvent_Data {
	if x, ok := x.GetBody().(*BrokerProxyEvent_Data_); ok {
		return x.Data
	}
	return nil
}

func (x *BrokerProxyEvent) GetRead() *BrokerProxyEvent_Read {
	if x, ok := x.GetBody().(*BrokerProxyEvent_Read_); ok {
		return x.Read
	}
	return nil
}

type isBrokerProxyEvent_Body interface {
	isBrokerProxyEvent_Body()
}

type BrokerProxyEvent_Open_ struct {
	Open *BrokerProxyEvent_Open `protobuf:"bytes,1,opt,name=open,proto3,oneof"`
}

type BrokerProxyEvent_Data_ struct {
	Data *BrokerProxyEvent_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type BrokerProxyEvent_Read_ struct {
	Read *BrokerProxyEvent_Read `protobuf:"bytes,3,opt,name=read,proto3,oneof"`
}

func (*BrokerProxyEvent_Open_) isBrokerProxyEvent_Body() {}

func (*BrokerProxyEvent_Data_) isBrokerProxyEvent_Body() {}

func (*BrokerProxyEvent_Read_) isBrokerProxyEvent_Body() {}

type BrokerProxySendKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyId uint64   `protobuf:"varint,1,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id,omitempty"`
	Keys    [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *BrokerProxySendKeysRequest) Reset() {
	*x = BrokerProxySendKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxySendKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxySendKeysRequest) ProtoMessage() {}

func (x *BrokerProxySendKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxySendKeysRequest.ProtoReflect.Descriptor instead.
func (*BrokerProxySendKeysRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{10}
}

func (x *BrokerProxySendKeysRequest) GetProxyId() uint64 {
	if x != nil {
		return x.ProxyId
	}
	return 0
}

func (x *BrokerProxySendKeysRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type BrokerProxySendKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BrokerProxySendKeysResponse) Reset() {
	*x = BrokerProxySendKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxySendKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxySendKeysResponse) ProtoMessage() {}

func (x *BrokerProxySendKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxySendKeysResponse.ProtoReflect.Descriptor instead.
func (*BrokerProxySendKeysResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{11}
}

type BrokerProxyReceiveKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyId uint64   `protobuf:"varint,1,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id,omitempty"`
	Keys    [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *BrokerProxyReceiveKeysRequest) Reset() {
	*x = BrokerProxyReceiveKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxyReceiveKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxyReceiveKeysRequest) ProtoMessage() {}

func (x *BrokerProxyReceiveKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxyReceiveKeysRequest.ProtoReflect.Descriptor instead.
func (*BrokerProxyReceiveKeysRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{12}
}

func (x *BrokerProxyReceiveKeysRequest) GetProxyId() uint64 {
	if x != nil {
		return x.ProxyId
	}
	return 0
}

func (x *BrokerProxyReceiveKeysRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type BrokerProxyReceiveKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys [][]byte `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *BrokerProxyReceiveKeysResponse) Reset() {
	*x = BrokerProxyReceiveKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxyReceiveKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxyReceiveKeysResponse) ProtoMessage() {}

func (x *BrokerProxyReceiveKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxyReceiveKeysResponse.ProtoReflect.Descriptor instead.
func (*BrokerProxyReceiveKeysResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{13}
}

func (x *BrokerProxyReceiveKeysResponse) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type BrokerProxyDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyId uint64 `protobuf:"varint,1,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BrokerProxyDataRequest) Reset() {
	*x = BrokerProxyDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxyDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxyDataRequest) ProtoMessage() {}

func (x *BrokerProxyDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxyDataRequest.ProtoReflect.Descriptor instead.
func (*BrokerProxyDataRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{14}
}

func (x *BrokerProxyDataRequest) GetProxyId() uint64 {
	if x != nil {
		return x.ProxyId
	}
	return 0
}

func (x *BrokerProxyDataRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type BrokerProxyDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BrokerProxyDataResponse) Reset() {
	*x = BrokerProxyDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxyDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxyDataResponse) ProtoMessage() {}

func (x *BrokerProxyDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxyDataResponse.ProtoReflect.Descriptor instead.
func (*BrokerProxyDataResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{15}
}

type BrokerProxyCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyId uint64 `protobuf:"varint,1,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id,omitempty"`
}

func (x *BrokerProxyCloseRequest) Reset() {
	*x = BrokerProxyCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxyCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxyCloseRequest) ProtoMessage() {}

func (x *BrokerProxyCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxyCloseRequest.ProtoReflect.Descriptor instead.
func (*BrokerProxyCloseRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{16}
}

func (x *BrokerProxyCloseRequest) GetProxyId() uint64 {
	if x != nil {
		return x.ProxyId
	}
	return 0
}

type BrokerProxyCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BrokerProxyCloseResponse) Reset() {
	*x = BrokerProxyCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxyCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxyCloseResponse) ProtoMessage() {}

func (x *BrokerProxyCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxyCloseResponse.ProtoReflect.Descriptor instead.
func (*BrokerProxyCloseResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{17}
}

type BootstrapClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to ClientOptions:
	//	*BootstrapClient_WebsocketOptions
	ClientOptions isBootstrapClient_ClientOptions `protobuf_oneof:"client_options"`
}

func (x *BootstrapClient) Reset() {
	*x = BootstrapClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapClient) ProtoMessage() {}

func (x *BootstrapClient) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapClient.ProtoReflect.Descriptor instead.
func (*BootstrapClient) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{18}
}

func (x *BootstrapClient) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *BootstrapClient) GetClientOptions() isBootstrapClient_ClientOptions {
	if m != nil {
		return m.ClientOptions
	}
	return nil
}

func (x *BootstrapClient) GetWebsocketOptions() *BootstrapClientWebSocketOptions {
	if x, ok := x.GetClientOptions().(*BootstrapClient_WebsocketOptions); ok {
		return x.WebsocketOptions
	}
	return nil
}

type isBootstrapClient_ClientOptions interface {
	isBootstrapClient_ClientOptions()
}

type BootstrapClient_WebsocketOptions struct {
	WebsocketOptions *BootstrapClientWebSocketOptions `protobuf:"bytes,2,opt,name=websocket_options,json=websocketOptions,proto3,oneof"`
}

func (*BootstrapClient_WebsocketOptions) isBootstrapClient_ClientOptions() {}

type BootstrapClientWebSocketOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url                   string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	InsecureSkipVerifyTls bool   `protobuf:"varint,2,opt,name=insecure_skip_verify_tls,json=insecureSkipVerifyTls,proto3" json:"insecure_skip_verify_tls,omitempty"`
}

func (x *BootstrapClientWebSocketOptions) Reset() {
	*x = BootstrapClientWebSocketOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapClientWebSocketOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapClientWebSocketOptions) ProtoMessage() {}

func (x *BootstrapClientWebSocketOptions) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapClientWebSocketOptions.ProtoReflect.Descriptor instead.
func (*BootstrapClientWebSocketOptions) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{19}
}

func (x *BootstrapClientWebSocketOptions) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BootstrapClientWebSocketOptions) GetInsecureSkipVerifyTls() bool {
	if x != nil {
		return x.InsecureSkipVerifyTls
	}
	return false
}

type CreateBootstrapClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ClientOptions:
	//	*CreateBootstrapClientRequest_WebsocketOptions
	ClientOptions isCreateBootstrapClientRequest_ClientOptions `protobuf_oneof:"client_options"`
}

func (x *CreateBootstrapClientRequest) Reset() {
	*x = CreateBootstrapClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBootstrapClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBootstrapClientRequest) ProtoMessage() {}

func (x *CreateBootstrapClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBootstrapClientRequest.ProtoReflect.Descriptor instead.
func (*CreateBootstrapClientRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{20}
}

func (m *CreateBootstrapClientRequest) GetClientOptions() isCreateBootstrapClientRequest_ClientOptions {
	if m != nil {
		return m.ClientOptions
	}
	return nil
}

func (x *CreateBootstrapClientRequest) GetWebsocketOptions() *BootstrapClientWebSocketOptions {
	if x, ok := x.GetClientOptions().(*CreateBootstrapClientRequest_WebsocketOptions); ok {
		return x.WebsocketOptions
	}
	return nil
}

type isCreateBootstrapClientRequest_ClientOptions interface {
	isCreateBootstrapClientRequest_ClientOptions()
}

type CreateBootstrapClientRequest_WebsocketOptions struct {
	WebsocketOptions *BootstrapClientWebSocketOptions `protobuf:"bytes,1,opt,name=websocket_options,json=websocketOptions,proto3,oneof"`
}

func (*CreateBootstrapClientRequest_WebsocketOptions) isCreateBootstrapClientRequest_ClientOptions() {
}

type CreateBootstrapClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BootstrapClient *BootstrapClient `protobuf:"bytes,1,opt,name=bootstrap_client,json=bootstrapClient,proto3" json:"bootstrap_client,omitempty"`
}

func (x *CreateBootstrapClientResponse) Reset() {
	*x = CreateBootstrapClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBootstrapClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBootstrapClientResponse) ProtoMessage() {}

func (x *CreateBootstrapClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBootstrapClientResponse.ProtoReflect.Descriptor instead.
func (*CreateBootstrapClientResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{21}
}

func (x *CreateBootstrapClientResponse) GetBootstrapClient() *BootstrapClient {
	if x != nil {
		return x.BootstrapClient
	}
	return nil
}

type UpdateBootstrapClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to ClientOptions:
	//	*UpdateBootstrapClientRequest_WebsocketOptions
	ClientOptions isUpdateBootstrapClientRequest_ClientOptions `protobuf_oneof:"client_options"`
}

func (x *UpdateBootstrapClientRequest) Reset() {
	*x = UpdateBootstrapClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBootstrapClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBootstrapClientRequest) ProtoMessage() {}

func (x *UpdateBootstrapClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBootstrapClientRequest.ProtoReflect.Descriptor instead.
func (*UpdateBootstrapClientRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateBootstrapClientRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *UpdateBootstrapClientRequest) GetClientOptions() isUpdateBootstrapClientRequest_ClientOptions {
	if m != nil {
		return m.ClientOptions
	}
	return nil
}

func (x *UpdateBootstrapClientRequest) GetWebsocketOptions() *BootstrapClientWebSocketOptions {
	if x, ok := x.GetClientOptions().(*UpdateBootstrapClientRequest_WebsocketOptions); ok {
		return x.WebsocketOptions
	}
	return nil
}

type isUpdateBootstrapClientRequest_ClientOptions interface {
	isUpdateBootstrapClientRequest_ClientOptions()
}

type UpdateBootstrapClientRequest_WebsocketOptions struct {
	WebsocketOptions *BootstrapClientWebSocketOptions `protobuf:"bytes,2,opt,name=websocket_options,json=websocketOptions,proto3,oneof"`
}

func (*UpdateBootstrapClientRequest_WebsocketOptions) isUpdateBootstrapClientRequest_ClientOptions() {
}

type UpdateBootstrapClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BootstrapClient *BootstrapClient `protobuf:"bytes,1,opt,name=bootstrap_client,json=bootstrapClient,proto3" json:"bootstrap_client,omitempty"`
}

func (x *UpdateBootstrapClientResponse) Reset() {
	*x = UpdateBootstrapClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBootstrapClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBootstrapClientResponse) ProtoMessage() {}

func (x *UpdateBootstrapClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBootstrapClientResponse.ProtoReflect.Descriptor instead.
func (*UpdateBootstrapClientResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateBootstrapClientResponse) GetBootstrapClient() *BootstrapClient {
	if x != nil {
		return x.BootstrapClient
	}
	return nil
}

type DeleteBootstrapClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBootstrapClientRequest) Reset() {
	*x = DeleteBootstrapClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBootstrapClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBootstrapClientRequest) ProtoMessage() {}

func (x *DeleteBootstrapClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBootstrapClientRequest.ProtoReflect.Descriptor instead.
func (*DeleteBootstrapClientRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteBootstrapClientRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteBootstrapClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBootstrapClientResponse) Reset() {
	*x = DeleteBootstrapClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBootstrapClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBootstrapClientResponse) ProtoMessage() {}

func (x *DeleteBootstrapClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBootstrapClientResponse.ProtoReflect.Descriptor instead.
func (*DeleteBootstrapClientResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{25}
}

type GetBootstrapClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBootstrapClientRequest) Reset() {
	*x = GetBootstrapClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBootstrapClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBootstrapClientRequest) ProtoMessage() {}

func (x *GetBootstrapClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBootstrapClientRequest.ProtoReflect.Descriptor instead.
func (*GetBootstrapClientRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{26}
}

func (x *GetBootstrapClientRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetBootstrapClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BootstrapClient *BootstrapClient `protobuf:"bytes,1,opt,name=bootstrap_client,json=bootstrapClient,proto3" json:"bootstrap_client,omitempty"`
}

func (x *GetBootstrapClientResponse) Reset() {
	*x = GetBootstrapClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBootstrapClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBootstrapClientResponse) ProtoMessage() {}

func (x *GetBootstrapClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBootstrapClientResponse.ProtoReflect.Descriptor instead.
func (*GetBootstrapClientResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{27}
}

func (x *GetBootstrapClientResponse) GetBootstrapClient() *BootstrapClient {
	if x != nil {
		return x.BootstrapClient
	}
	return nil
}

type ListBootstrapClientsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBootstrapClientsRequest) Reset() {
	*x = ListBootstrapClientsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBootstrapClientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBootstrapClientsRequest) ProtoMessage() {}

func (x *ListBootstrapClientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBootstrapClientsRequest.ProtoReflect.Descriptor instead.
func (*ListBootstrapClientsRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{28}
}

type ListBootstrapClientsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BootstrapClients []*BootstrapClient `protobuf:"bytes,1,rep,name=bootstrap_clients,json=bootstrapClients,proto3" json:"bootstrap_clients,omitempty"`
}

func (x *ListBootstrapClientsResponse) Reset() {
	*x = ListBootstrapClientsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBootstrapClientsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBootstrapClientsResponse) ProtoMessage() {}

func (x *ListBootstrapClientsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBootstrapClientsResponse.ProtoReflect.Descriptor instead.
func (*ListBootstrapClientsResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{29}
}

func (x *ListBootstrapClientsResponse) GetBootstrapClients() []*BootstrapClient {
	if x != nil {
		return x.BootstrapClients
	}
	return nil
}

type ListBootstrapPeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBootstrapPeersRequest) Reset() {
	*x = ListBootstrapPeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBootstrapPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBootstrapPeersRequest) ProtoMessage() {}

func (x *ListBootstrapPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBootstrapPeersRequest.ProtoReflect.Descriptor instead.
func (*ListBootstrapPeersRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{30}
}

type ListBootstrapPeersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*BootstrapPeer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *ListBootstrapPeersResponse) Reset() {
	*x = ListBootstrapPeersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBootstrapPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBootstrapPeersResponse) ProtoMessage() {}

func (x *ListBootstrapPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBootstrapPeersResponse.ProtoReflect.Descriptor instead.
func (*ListBootstrapPeersResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{31}
}

func (x *ListBootstrapPeersResponse) GetPeers() []*BootstrapPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type BootstrapPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId []byte `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Label  string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *BootstrapPeer) Reset() {
	*x = BootstrapPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapPeer) ProtoMessage() {}

func (x *BootstrapPeer) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapPeer.ProtoReflect.Descriptor instead.
func (*BootstrapPeer) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{32}
}

func (x *BootstrapPeer) GetHostId() []byte {
	if x != nil {
		return x.HostId
	}
	return nil
}

func (x *BootstrapPeer) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type BootstrapServiceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*BootstrapServiceMessage_BrokerOffer_
	//	*BootstrapServiceMessage_PublishRequest_
	//	*BootstrapServiceMessage_PublishResponse_
	Body isBootstrapServiceMessage_Body `protobuf_oneof:"body"`
}

func (x *BootstrapServiceMessage) Reset() {
	*x = BootstrapServiceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapServiceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapServiceMessage) ProtoMessage() {}

func (x *BootstrapServiceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapServiceMessage.ProtoReflect.Descriptor instead.
func (*BootstrapServiceMessage) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{33}
}

func (m *BootstrapServiceMessage) GetBody() isBootstrapServiceMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *BootstrapServiceMessage) GetBrokerOffer() *BootstrapServiceMessage_BrokerOffer {
	if x, ok := x.GetBody().(*BootstrapServiceMessage_BrokerOffer_); ok {
		return x.BrokerOffer
	}
	return nil
}

func (x *BootstrapServiceMessage) GetPublishRequest() *BootstrapServiceMessage_PublishRequest {
	if x, ok := x.GetBody().(*BootstrapServiceMessage_PublishRequest_); ok {
		return x.PublishRequest
	}
	return nil
}

func (x *BootstrapServiceMessage) GetPublishResponse() *BootstrapServiceMessage_PublishResponse {
	if x, ok := x.GetBody().(*BootstrapServiceMessage_PublishResponse_); ok {
		return x.PublishResponse
	}
	return nil
}

type isBootstrapServiceMessage_Body interface {
	isBootstrapServiceMessage_Body()
}

type BootstrapServiceMessage_BrokerOffer_ struct {
	BrokerOffer *BootstrapServiceMessage_BrokerOffer `protobuf:"bytes,1,opt,name=broker_offer,json=brokerOffer,proto3,oneof"`
}

type BootstrapServiceMessage_PublishRequest_ struct {
	PublishRequest *BootstrapServiceMessage_PublishRequest `protobuf:"bytes,2,opt,name=publish_request,json=publishRequest,proto3,oneof"`
}

type BootstrapServiceMessage_PublishResponse_ struct {
	PublishResponse *BootstrapServiceMessage_PublishResponse `protobuf:"bytes,3,opt,name=publish_response,json=publishResponse,proto3,oneof"`
}

func (*BootstrapServiceMessage_BrokerOffer_) isBootstrapServiceMessage_Body() {}

func (*BootstrapServiceMessage_PublishRequest_) isBootstrapServiceMessage_Body() {}

func (*BootstrapServiceMessage_PublishResponse_) isBootstrapServiceMessage_Body() {}

type PublishNetworkToBootstrapPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId  []byte   `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Network *Network `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *PublishNetworkToBootstrapPeerRequest) Reset() {
	*x = PublishNetworkToBootstrapPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishNetworkToBootstrapPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishNetworkToBootstrapPeerRequest) ProtoMessage() {}

func (x *PublishNetworkToBootstrapPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishNetworkToBootstrapPeerRequest.ProtoReflect.Descriptor instead.
func (*PublishNetworkToBootstrapPeerRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{34}
}

func (x *PublishNetworkToBootstrapPeerRequest) GetHostId() []byte {
	if x != nil {
		return x.HostId
	}
	return nil
}

func (x *PublishNetworkToBootstrapPeerRequest) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

type PublishNetworkToBootstrapPeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublishNetworkToBootstrapPeerResponse) Reset() {
	*x = PublishNetworkToBootstrapPeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishNetworkToBootstrapPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishNetworkToBootstrapPeerResponse) ProtoMessage() {}

func (x *PublishNetworkToBootstrapPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishNetworkToBootstrapPeerResponse.ProtoReflect.Descriptor instead.
func (*PublishNetworkToBootstrapPeerResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{35}
}

type PeerExchangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*PeerExchangeMessage_Request_
	//	*PeerExchangeMessage_Response_
	//	*PeerExchangeMessage_Offer_
	//	*PeerExchangeMessage_Answer_
	//	*PeerExchangeMessage_IceCandidate_
	//	*PeerExchangeMessage_CallbackRequest_
	Body isPeerExchangeMessage_Body `protobuf_oneof:"body"`
}

func (x *PeerExchangeMessage) Reset() {
	*x = PeerExchangeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerExchangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerExchangeMessage) ProtoMessage() {}

func (x *PeerExchangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerExchangeMessage.ProtoReflect.Descriptor instead.
func (*PeerExchangeMessage) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{36}
}

func (m *PeerExchangeMessage) GetBody() isPeerExchangeMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *PeerExchangeMessage) GetRequest() *PeerExchangeMessage_Request {
	if x, ok := x.GetBody().(*PeerExchangeMessage_Request_); ok {
		return x.Request
	}
	return nil
}

func (x *PeerExchangeMessage) GetResponse() *PeerExchangeMessage_Response {
	if x, ok := x.GetBody().(*PeerExchangeMessage_Response_); ok {
		return x.Response
	}
	return nil
}

func (x *PeerExchangeMessage) GetOffer() *PeerExchangeMessage_Offer {
	if x, ok := x.GetBody().(*PeerExchangeMessage_Offer_); ok {
		return x.Offer
	}
	return nil
}

func (x *PeerExchangeMessage) GetAnswer() *PeerExchangeMessage_Answer {
	if x, ok := x.GetBody().(*PeerExchangeMessage_Answer_); ok {
		return x.Answer
	}
	return nil
}

func (x *PeerExchangeMessage) GetIceCandidate() *PeerExchangeMessage_IceCandidate {
	if x, ok := x.GetBody().(*PeerExchangeMessage_IceCandidate_); ok {
		return x.IceCandidate
	}
	return nil
}

func (x *PeerExchangeMessage) GetCallbackRequest() *PeerExchangeMessage_CallbackRequest {
	if x, ok := x.GetBody().(*PeerExchangeMessage_CallbackRequest_); ok {
		return x.CallbackRequest
	}
	return nil
}

type isPeerExchangeMessage_Body interface {
	isPeerExchangeMessage_Body()
}

type PeerExchangeMessage_Request_ struct {
	Request *PeerExchangeMessage_Request `protobuf:"bytes,1,opt,name=request,proto3,oneof"`
}

type PeerExchangeMessage_Response_ struct {
	Response *PeerExchangeMessage_Response `protobuf:"bytes,2,opt,name=response,proto3,oneof"`
}

type PeerExchangeMessage_Offer_ struct {
	Offer *PeerExchangeMessage_Offer `protobuf:"bytes,3,opt,name=offer,proto3,oneof"`
}

type PeerExchangeMessage_Answer_ struct {
	Answer *PeerExchangeMessage_Answer `protobuf:"bytes,4,opt,name=answer,proto3,oneof"`
}

type PeerExchangeMessage_IceCandidate_ struct {
	IceCandidate *PeerExchangeMessage_IceCandidate `protobuf:"bytes,5,opt,name=ice_candidate,json=iceCandidate,proto3,oneof"`
}

type PeerExchangeMessage_CallbackRequest_ struct {
	CallbackRequest *PeerExchangeMessage_CallbackRequest `protobuf:"bytes,6,opt,name=callback_request,json=callbackRequest,proto3,oneof"`
}

func (*PeerExchangeMessage_Request_) isPeerExchangeMessage_Body() {}

func (*PeerExchangeMessage_Response_) isPeerExchangeMessage_Body() {}

func (*PeerExchangeMessage_Offer_) isPeerExchangeMessage_Body() {}

func (*PeerExchangeMessage_Answer_) isPeerExchangeMessage_Body() {}

func (*PeerExchangeMessage_IceCandidate_) isPeerExchangeMessage_Body() {}

func (*PeerExchangeMessage_CallbackRequest_) isPeerExchangeMessage_Body() {}

type CARenewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteCertificate  *Certificate        `protobuf:"bytes,1,opt,name=invite_certificate,json=inviteCertificate,proto3" json:"invite_certificate,omitempty"`
	CertificateRequest *CertificateRequest `protobuf:"bytes,2,opt,name=certificate_request,json=certificateRequest,proto3" json:"certificate_request,omitempty"`
}

func (x *CARenewRequest) Reset() {
	*x = CARenewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CARenewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CARenewRequest) ProtoMessage() {}

func (x *CARenewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CARenewRequest.ProtoReflect.Descriptor instead.
func (*CARenewRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{37}
}

func (x *CARenewRequest) GetInviteCertificate() *Certificate {
	if x != nil {
		return x.InviteCertificate
	}
	return nil
}

func (x *CARenewRequest) GetCertificateRequest() *CertificateRequest {
	if x != nil {
		return x.CertificateRequest
	}
	return nil
}

type CARenewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *Certificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *CARenewResponse) Reset() {
	*x = CARenewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CARenewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CARenewResponse) ProtoMessage() {}

func (x *CARenewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CARenewResponse.ProtoReflect.Descriptor instead.
func (*CARenewResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{38}
}

func (x *CARenewResponse) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type NetworkEvent_NetworkOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId  uint64 `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	NetworkKey []byte `protobuf:"bytes,2,opt,name=network_key,json=networkKey,proto3" json:"network_key,omitempty"`
}

func (x *NetworkEvent_NetworkOpen) Reset() {
	*x = NetworkEvent_NetworkOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkEvent_NetworkOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEvent_NetworkOpen) ProtoMessage() {}

func (x *NetworkEvent_NetworkOpen) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEvent_NetworkOpen.ProtoReflect.Descriptor instead.
func (*NetworkEvent_NetworkOpen) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{4, 0}
}

func (x *NetworkEvent_NetworkOpen) GetNetworkId() uint64 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *NetworkEvent_NetworkOpen) GetNetworkKey() []byte {
	if x != nil {
		return x.NetworkKey
	}
	return nil
}

type NetworkEvent_NetworkClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId uint64 `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *NetworkEvent_NetworkClose) Reset() {
	*x = NetworkEvent_NetworkClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkEvent_NetworkClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEvent_NetworkClose) ProtoMessage() {}

func (x *NetworkEvent_NetworkClose) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEvent_NetworkClose.ProtoReflect.Descriptor instead.
func (*NetworkEvent_NetworkClose) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{4, 1}
}

func (x *NetworkEvent_NetworkClose) GetNetworkId() uint64 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

type NetworkHandshake_Init struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyCount int32 `protobuf:"varint,1,opt,name=key_count,json=keyCount,proto3" json:"key_count,omitempty"`
}

func (x *NetworkHandshake_Init) Reset() {
	*x = NetworkHandshake_Init{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkHandshake_Init) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkHandshake_Init) ProtoMessage() {}

func (x *NetworkHandshake_Init) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkHandshake_Init.ProtoReflect.Descriptor instead.
func (*NetworkHandshake_Init) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{7, 0}
}

func (x *NetworkHandshake_Init) GetKeyCount() int32 {
	if x != nil {
		return x.KeyCount
	}
	return 0
}

type NetworkHandshake_NetworkBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port        uint32       `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Certificate *Certificate `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *NetworkHandshake_NetworkBinding) Reset() {
	*x = NetworkHandshake_NetworkBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkHandshake_NetworkBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkHandshake_NetworkBinding) ProtoMessage() {}

func (x *NetworkHandshake_NetworkBinding) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkHandshake_NetworkBinding.ProtoReflect.Descriptor instead.
func (*NetworkHandshake_NetworkBinding) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{7, 1}
}

func (x *NetworkHandshake_NetworkBinding) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NetworkHandshake_NetworkBinding) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type NetworkHandshake_NetworkBindings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkBindings []*NetworkHandshake_NetworkBinding `protobuf:"bytes,2,rep,name=network_bindings,json=networkBindings,proto3" json:"network_bindings,omitempty"`
}

func (x *NetworkHandshake_NetworkBindings) Reset() {
	*x = NetworkHandshake_NetworkBindings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkHandshake_NetworkBindings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkHandshake_NetworkBindings) ProtoMessage() {}

func (x *NetworkHandshake_NetworkBindings) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkHandshake_NetworkBindings.ProtoReflect.Descriptor instead.
func (*NetworkHandshake_NetworkBindings) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{7, 2}
}

func (x *NetworkHandshake_NetworkBindings) GetNetworkBindings() []*NetworkHandshake_NetworkBinding {
	if x != nil {
		return x.NetworkBindings
	}
	return nil
}

type NetworkHandshake_CertificateUpgradeOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkKeys [][]byte `protobuf:"bytes,1,rep,name=network_keys,json=networkKeys,proto3" json:"network_keys,omitempty"`
}

func (x *NetworkHandshake_CertificateUpgradeOffer) Reset() {
	*x = NetworkHandshake_CertificateUpgradeOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkHandshake_CertificateUpgradeOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkHandshake_CertificateUpgradeOffer) ProtoMessage() {}

func (x *NetworkHandshake_CertificateUpgradeOffer) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkHandshake_CertificateUpgradeOffer.ProtoReflect.Descriptor instead.
func (*NetworkHandshake_CertificateUpgradeOffer) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{7, 3}
}

func (x *NetworkHandshake_CertificateUpgradeOffer) GetNetworkKeys() [][]byte {
	if x != nil {
		return x.NetworkKeys
	}
	return nil
}

type NetworkHandshake_CertificateUpgradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkKeys []*Certificate `protobuf:"bytes,1,rep,name=network_keys,json=networkKeys,proto3" json:"network_keys,omitempty"`
}

func (x *NetworkHandshake_CertificateUpgradeRequest) Reset() {
	*x = NetworkHandshake_CertificateUpgradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkHandshake_CertificateUpgradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkHandshake_CertificateUpgradeRequest) ProtoMessage() {}

func (x *NetworkHandshake_CertificateUpgradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkHandshake_CertificateUpgradeRequest.ProtoReflect.Descriptor instead.
func (*NetworkHandshake_CertificateUpgradeRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{7, 4}
}

func (x *NetworkHandshake_CertificateUpgradeRequest) GetNetworkKeys() []*Certificate {
	if x != nil {
		return x.NetworkKeys
	}
	return nil
}

type NetworkHandshake_CertificateUpgradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificates []*Certificate `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
}

func (x *NetworkHandshake_CertificateUpgradeResponse) Reset() {
	*x = NetworkHandshake_CertificateUpgradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkHandshake_CertificateUpgradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkHandshake_CertificateUpgradeResponse) ProtoMessage() {}

func (x *NetworkHandshake_CertificateUpgradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkHandshake_CertificateUpgradeResponse.ProtoReflect.Descriptor instead.
func (*NetworkHandshake_CertificateUpgradeResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{7, 5}
}

func (x *NetworkHandshake_CertificateUpgradeResponse) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

type NetworkHandshake_CertificateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificates []*Certificate `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
}

func (x *NetworkHandshake_CertificateUpdate) Reset() {
	*x = NetworkHandshake_CertificateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkHandshake_CertificateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkHandshake_CertificateUpdate) ProtoMessage() {}

func (x *NetworkHandshake_CertificateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkHandshake_CertificateUpdate.ProtoReflect.Descriptor instead.
func (*NetworkHandshake_CertificateUpdate) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{7, 6}
}

func (x *NetworkHandshake_CertificateUpdate) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

type BrokerProxyEvent_Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyId uint64 `protobuf:"varint,1,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id,omitempty"`
}

func (x *BrokerProxyEvent_Open) Reset() {
	*x = BrokerProxyEvent_Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxyEvent_Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxyEvent_Open) ProtoMessage() {}

func (x *BrokerProxyEvent_Open) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxyEvent_Open.ProtoReflect.Descriptor instead.
func (*BrokerProxyEvent_Open) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{9, 0}
}

func (x *BrokerProxyEvent_Open) GetProxyId() uint64 {
	if x != nil {
		return x.ProxyId
	}
	return 0
}

type BrokerProxyEvent_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BrokerProxyEvent_Data) Reset() {
	*x = BrokerProxyEvent_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxyEvent_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxyEvent_Data) ProtoMessage() {}

func (x *BrokerProxyEvent_Data) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxyEvent_Data.ProtoReflect.Descriptor instead.
func (*BrokerProxyEvent_Data) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{9, 1}
}

func (x *BrokerProxyEvent_Data) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type BrokerProxyEvent_Read struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BrokerProxyEvent_Read) Reset() {
	*x = BrokerProxyEvent_Read{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerProxyEvent_Read) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerProxyEvent_Read) ProtoMessage() {}

func (x *BrokerProxyEvent_Read) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerProxyEvent_Read.ProtoReflect.Descriptor instead.
func (*BrokerProxyEvent_Read) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{9, 2}
}

type BootstrapServiceMessage_BrokerOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BootstrapServiceMessage_BrokerOffer) Reset() {
	*x = BootstrapServiceMessage_BrokerOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapServiceMessage_BrokerOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapServiceMessage_BrokerOffer) ProtoMessage() {}

func (x *BootstrapServiceMessage_BrokerOffer) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapServiceMessage_BrokerOffer.ProtoReflect.Descriptor instead.
func (*BootstrapServiceMessage_BrokerOffer) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{33, 0}
}

type BootstrapServiceMessage_PublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Certificate *Certificate `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *BootstrapServiceMessage_PublishRequest) Reset() {
	*x = BootstrapServiceMessage_PublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapServiceMessage_PublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapServiceMessage_PublishRequest) ProtoMessage() {}

func (x *BootstrapServiceMessage_PublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapServiceMessage_PublishRequest.ProtoReflect.Descriptor instead.
func (*BootstrapServiceMessage_PublishRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{33, 1}
}

func (x *BootstrapServiceMessage_PublishRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BootstrapServiceMessage_PublishRequest) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type BootstrapServiceMessage_PublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*BootstrapServiceMessage_PublishResponse_Error
	Body isBootstrapServiceMessage_PublishResponse_Body `protobuf_oneof:"body"`
}

func (x *BootstrapServiceMessage_PublishResponse) Reset() {
	*x = BootstrapServiceMessage_PublishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapServiceMessage_PublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapServiceMessage_PublishResponse) ProtoMessage() {}

func (x *BootstrapServiceMessage_PublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapServiceMessage_PublishResponse.ProtoReflect.Descriptor instead.
func (*BootstrapServiceMessage_PublishResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{33, 2}
}

func (m *BootstrapServiceMessage_PublishResponse) GetBody() isBootstrapServiceMessage_PublishResponse_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *BootstrapServiceMessage_PublishResponse) GetError() string {
	if x, ok := x.GetBody().(*BootstrapServiceMessage_PublishResponse_Error); ok {
		return x.Error
	}
	return ""
}

type isBootstrapServiceMessage_PublishResponse_Body interface {
	isBootstrapServiceMessage_PublishResponse_Body()
}

type BootstrapServiceMessage_PublishResponse_Error struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

func (*BootstrapServiceMessage_PublishResponse_Error) isBootstrapServiceMessage_PublishResponse_Body() {
}

type PeerExchangeMessage_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PeerExchangeMessage_Request) Reset() {
	*x = PeerExchangeMessage_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerExchangeMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerExchangeMessage_Request) ProtoMessage() {}

func (x *PeerExchangeMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerExchangeMessage_Request.ProtoReflect.Descriptor instead.
func (*PeerExchangeMessage_Request) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{36, 0}
}

func (x *PeerExchangeMessage_Request) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PeerExchangeMessage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids [][]byte `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *PeerExchangeMessage_Response) Reset() {
	*x = PeerExchangeMessage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerExchangeMessage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerExchangeMessage_Response) ProtoMessage() {}

func (x *PeerExchangeMessage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerExchangeMessage_Response.ProtoReflect.Descriptor instead.
func (*PeerExchangeMessage_Response) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{36, 1}
}

func (x *PeerExchangeMessage_Response) GetIds() [][]byte {
	if x != nil {
		return x.Ids
	}
	return nil
}

type PeerExchangeMessage_Offer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediationId uint64 `protobuf:"varint,1,opt,name=mediation_id,json=mediationId,proto3" json:"mediation_id,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PeerExchangeMessage_Offer) Reset() {
	*x = PeerExchangeMessage_Offer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerExchangeMessage_Offer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerExchangeMessage_Offer) ProtoMessage() {}

func (x *PeerExchangeMessage_Offer) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerExchangeMessage_Offer.ProtoReflect.Descriptor instead.
func (*PeerExchangeMessage_Offer) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{36, 2}
}

func (x *PeerExchangeMessage_Offer) GetMediationId() uint64 {
	if x != nil {
		return x.MediationId
	}
	return 0
}

func (x *PeerExchangeMessage_Offer) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PeerExchangeMessage_Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediationId uint64 `protobuf:"varint,1,opt,name=mediation_id,json=mediationId,proto3" json:"mediation_id,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PeerExchangeMessage_Answer) Reset() {
	*x = PeerExchangeMessage_Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerExchangeMessage_Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerExchangeMessage_Answer) ProtoMessage() {}

func (x *PeerExchangeMessage_Answer) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerExchangeMessage_Answer.ProtoReflect.Descriptor instead.
func (*PeerExchangeMessage_Answer) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{36, 3}
}

func (x *PeerExchangeMessage_Answer) GetMediationId() uint64 {
	if x != nil {
		return x.MediationId
	}
	return 0
}

func (x *PeerExchangeMessage_Answer) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PeerExchangeMessage_IceCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediationId uint64 `protobuf:"varint,1,opt,name=mediation_id,json=mediationId,proto3" json:"mediation_id,omitempty"`
	Index       uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Data        []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PeerExchangeMessage_IceCandidate) Reset() {
	*x = PeerExchangeMessage_IceCandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerExchangeMessage_IceCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerExchangeMessage_IceCandidate) ProtoMessage() {}

func (x *PeerExchangeMessage_IceCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerExchangeMessage_IceCandidate.ProtoReflect.Descriptor instead.
func (*PeerExchangeMessage_IceCandidate) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{36, 4}
}

func (x *PeerExchangeMessage_IceCandidate) GetMediationId() uint64 {
	if x != nil {
		return x.MediationId
	}
	return 0
}

func (x *PeerExchangeMessage_IceCandidate) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PeerExchangeMessage_IceCandidate) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PeerExchangeMessage_CallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PeerExchangeMessage_CallbackRequest) Reset() {
	*x = PeerExchangeMessage_CallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerExchangeMessage_CallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerExchangeMessage_CallbackRequest) ProtoMessage() {}

func (x *PeerExchangeMessage_CallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerExchangeMessage_CallbackRequest.ProtoReflect.Descriptor instead.
func (*PeerExchangeMessage_CallbackRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{36, 5}
}

var File_vpn_proto protoreflect.FileDescriptor

var file_vpn_proto_rawDesc = []byte{
	0x0a, 0x09, 0x76, 0x70, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x0f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x56, 0x50, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x12, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x50, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x50, 0x4e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x50, 0x4e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x1a, 0x4d, 0x0a, 0x0b, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x1a, 0x2d, 0x0a, 0x0c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x3d, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0xad, 0x01, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xb6, 0x08, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e,
	0x69, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x48,
	0x00, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x67, 0x0a, 0x19, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x1b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x19, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1c, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x12,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x1a, 0x23, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x54, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x5e, 0x0a,
	0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x4b, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x3c, 0x0a,
	0x17, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x4c, 0x0a, 0x19, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x4e, 0x0a, 0x1a, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x45, 0x0a, 0x11, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x2f, 0x0a, 0x12, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x74, 0x75, 0x22, 0xeb, 0x01, 0x0a, 0x10, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x1a, 0x21, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x1a, 0x1a, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x06, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x42,
	0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x4b, 0x0a, 0x1a, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x1d, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x47, 0x0a, 0x16, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x19, 0x0a, 0x17, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a,
	0x17, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x84, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x11, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x10, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6c, 0x0a, 0x1f, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x54, 0x6c, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x10, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x62, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x11, 0x77, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x10, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x5d, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x22, 0x3e, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x50, 0x65, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0xaf, 0x03, 0x0a, 0x17, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0c,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x10, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0x0d, 0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x1a, 0x54, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x31, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x22, 0x63, 0x0a, 0x24, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x27, 0x0a, 0x25, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xcc, 0x05, 0x0a, 0x13, 0x50, 0x65, 0x65, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0d, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x3e, 0x0a, 0x05, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3f, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5b, 0x0a, 0x0c, 0x49, 0x63, 0x65, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x11, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22,
	0x93, 0x01, 0x0a, 0x0e, 0x43, 0x41, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x11, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x44, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x0f, 0x43, 0x41, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x44, 0x0a, 0x15, 0x67, 0x67, 0x2e, 0x73,
	0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x70, 0x70, 0x73, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x65,
	0x6d, 0x65, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x70, 0x73, 0x70, 0x70, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0xba, 0x02, 0x02, 0x50, 0x42, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vpn_proto_rawDescOnce sync.Once
	file_vpn_proto_rawDescData = file_vpn_proto_rawDesc
)

func file_vpn_proto_rawDescGZIP() []byte {
	file_vpn_proto_rawDescOnce.Do(func() {
		file_vpn_proto_rawDescData = protoimpl.X.CompressGZIP(file_vpn_proto_rawDescData)
	})
	return file_vpn_proto_rawDescData
}

var file_vpn_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_vpn_proto_goTypes = []interface{}{
	(*StartVPNRequest)(nil),                             // 0: StartVPNRequest
	(*StartVPNResponse)(nil),                            // 1: StartVPNResponse
	(*StopVPNRequest)(nil),                              // 2: StopVPNRequest
	(*StopVPNResponse)(nil),                             // 3: StopVPNResponse
	(*NetworkEvent)(nil),                                // 4: NetworkEvent
	(*NetworkAddress)(nil),                              // 5: NetworkAddress
	(*PeerInit)(nil),                                    // 6: PeerInit
	(*NetworkHandshake)(nil),                            // 7: NetworkHandshake
	(*BrokerProxyRequest)(nil),                          // 8: BrokerProxyRequest
	(*BrokerProxyEvent)(nil),                            // 9: BrokerProxyEvent
	(*BrokerProxySendKeysRequest)(nil),                  // 10: BrokerProxySendKeysRequest
	(*BrokerProxySendKeysResponse)(nil),                 // 11: BrokerProxySendKeysResponse
	(*BrokerProxyReceiveKeysRequest)(nil),               // 12: BrokerProxyReceiveKeysRequest
	(*BrokerProxyReceiveKeysResponse)(nil),              // 13: BrokerProxyReceiveKeysResponse
	(*BrokerProxyDataRequest)(nil),                      // 14: BrokerProxyDataRequest
	(*BrokerProxyDataResponse)(nil),                     // 15: BrokerProxyDataResponse
	(*BrokerProxyCloseRequest)(nil),                     // 16: BrokerProxyCloseRequest
	(*BrokerProxyCloseResponse)(nil),                    // 17: BrokerProxyCloseResponse
	(*BootstrapClient)(nil),                             // 18: BootstrapClient
	(*BootstrapClientWebSocketOptions)(nil),             // 19: BootstrapClientWebSocketOptions
	(*CreateBootstrapClientRequest)(nil),                // 20: CreateBootstrapClientRequest
	(*CreateBootstrapClientResponse)(nil),               // 21: CreateBootstrapClientResponse
	(*UpdateBootstrapClientRequest)(nil),                // 22: UpdateBootstrapClientRequest
	(*UpdateBootstrapClientResponse)(nil),               // 23: UpdateBootstrapClientResponse
	(*DeleteBootstrapClientRequest)(nil),                // 24: DeleteBootstrapClientRequest
	(*DeleteBootstrapClientResponse)(nil),               // 25: DeleteBootstrapClientResponse
	(*GetBootstrapClientRequest)(nil),                   // 26: GetBootstrapClientRequest
	(*GetBootstrapClientResponse)(nil),                  // 27: GetBootstrapClientResponse
	(*ListBootstrapClientsRequest)(nil),                 // 28: ListBootstrapClientsRequest
	(*ListBootstrapClientsResponse)(nil),                // 29: ListBootstrapClientsResponse
	(*ListBootstrapPeersRequest)(nil),                   // 30: ListBootstrapPeersRequest
	(*ListBootstrapPeersResponse)(nil),                  // 31: ListBootstrapPeersResponse
	(*BootstrapPeer)(nil),                               // 32: BootstrapPeer
	(*BootstrapServiceMessage)(nil),                     // 33: BootstrapServiceMessage
	(*PublishNetworkToBootstrapPeerRequest)(nil),        // 34: PublishNetworkToBootstrapPeerRequest
	(*PublishNetworkToBootstrapPeerResponse)(nil),       // 35: PublishNetworkToBootstrapPeerResponse
	(*PeerExchangeMessage)(nil),                         // 36: PeerExchangeMessage
	(*CARenewRequest)(nil),                              // 37: CARenewRequest
	(*CARenewResponse)(nil),                             // 38: CARenewResponse
	(*NetworkEvent_NetworkOpen)(nil),                    // 39: NetworkEvent.NetworkOpen
	(*NetworkEvent_NetworkClose)(nil),                   // 40: NetworkEvent.NetworkClose
	(*NetworkHandshake_Init)(nil),                       // 41: NetworkHandshake.Init
	(*NetworkHandshake_NetworkBinding)(nil),             // 42: NetworkHandshake.NetworkBinding
	(*NetworkHandshake_NetworkBindings)(nil),            // 43: NetworkHandshake.NetworkBindings
	(*NetworkHandshake_CertificateUpgradeOffer)(nil),    // 44: NetworkHandshake.CertificateUpgradeOffer
	(*NetworkHandshake_CertificateUpgradeRequest)(nil),  // 45: NetworkHandshake.CertificateUpgradeRequest
	(*NetworkHandshake_CertificateUpgradeResponse)(nil), // 46: NetworkHandshake.CertificateUpgradeResponse
	(*NetworkHandshake_CertificateUpdate)(nil),          // 47: NetworkHandshake.CertificateUpdate
	(*BrokerProxyEvent_Open)(nil),                       // 48: BrokerProxyEvent.Open
	(*BrokerProxyEvent_Data)(nil),                       // 49: BrokerProxyEvent.Data
	(*BrokerProxyEvent_Read)(nil),                       // 50: BrokerProxyEvent.Read
	(*BootstrapServiceMessage_BrokerOffer)(nil),         // 51: BootstrapServiceMessage.BrokerOffer
	(*BootstrapServiceMessage_PublishRequest)(nil),      // 52: BootstrapServiceMessage.PublishRequest
	(*BootstrapServiceMessage_PublishResponse)(nil),     // 53: BootstrapServiceMessage.PublishResponse
	(*PeerExchangeMessage_Request)(nil),                 // 54: PeerExchangeMessage.Request
	(*PeerExchangeMessage_Response)(nil),                // 55: PeerExchangeMessage.Response
	(*PeerExchangeMessage_Offer)(nil),                   // 56: PeerExchangeMessage.Offer
	(*PeerExchangeMessage_Answer)(nil),                  // 57: PeerExchangeMessage.Answer
	(*PeerExchangeMessage_IceCandidate)(nil),            // 58: PeerExchangeMessage.IceCandidate
	(*PeerExchangeMessage_CallbackRequest)(nil),         // 59: PeerExchangeMessage.CallbackRequest
	(*Certificate)(nil),                                 // 60: Certificate
	(*Network)(nil),                                     // 61: Network
	(*CertificateRequest)(nil),                          // 62: CertificateRequest
}
var file_vpn_proto_depIdxs = []int32{
	39, // 0: NetworkEvent.network_open:type_name -> NetworkEvent.NetworkOpen
	40, // 1: NetworkEvent.network_close:type_name -> NetworkEvent.NetworkClose
	60, // 2: PeerInit.certificate:type_name -> Certificate
	41, // 3: NetworkHandshake.init:type_name -> NetworkHandshake.Init
	43, // 4: NetworkHandshake.network_bindings:type_name -> NetworkHandshake.NetworkBindings
	44, // 5: NetworkHandshake.certificate_upgrade_offer:type_name -> NetworkHandshake.CertificateUpgradeOffer
	45, // 6: NetworkHandshake.certificate_upgrade_request:type_name -> NetworkHandshake.CertificateUpgradeRequest
	46, // 7: NetworkHandshake.certificate_upgrade_response:type_name -> NetworkHandshake.CertificateUpgradeResponse
	47, // 8: NetworkHandshake.certificate_update:type_name -> NetworkHandshake.CertificateUpdate
	48, // 9: BrokerProxyEvent.open:type_name -> BrokerProxyEvent.Open
	49, // 10: BrokerProxyEvent.data:type_name -> BrokerProxyEvent.Data
	50, // 11: BrokerProxyEvent.read:type_name -> BrokerProxyEvent.Read
	19, // 12: BootstrapClient.websocket_options:type_name -> BootstrapClientWebSocketOptions
	19, // 13: CreateBootstrapClientRequest.websocket_options:type_name -> BootstrapClientWebSocketOptions
	18, // 14: CreateBootstrapClientResponse.bootstrap_client:type_name -> BootstrapClient
	19, // 15: UpdateBootstrapClientRequest.websocket_options:type_name -> BootstrapClientWebSocketOptions
	18, // 16: UpdateBootstrapClientResponse.bootstrap_client:type_name -> BootstrapClient
	18, // 17: GetBootstrapClientResponse.bootstrap_client:type_name -> BootstrapClient
	18, // 18: ListBootstrapClientsResponse.bootstrap_clients:type_name -> BootstrapClient
	32, // 19: ListBootstrapPeersResponse.peers:type_name -> BootstrapPeer
	51, // 20: BootstrapServiceMessage.broker_offer:type_name -> BootstrapServiceMessage.BrokerOffer
	52, // 21: BootstrapServiceMessage.publish_request:type_name -> BootstrapServiceMessage.PublishRequest
	53, // 22: BootstrapServiceMessage.publish_response:type_name -> BootstrapServiceMessage.PublishResponse
	61, // 23: PublishNetworkToBootstrapPeerRequest.network:type_name -> Network
	54, // 24: PeerExchangeMessage.request:type_name -> PeerExchangeMessage.Request
	55, // 25: PeerExchangeMessage.response:type_name -> PeerExchangeMessage.Response
	56, // 26: PeerExchangeMessage.offer:type_name -> PeerExchangeMessage.Offer
	57, // 27: PeerExchangeMessage.answer:type_name -> PeerExchangeMessage.Answer
	58, // 28: PeerExchangeMessage.ice_candidate:type_name -> PeerExchangeMessage.IceCandidate
	59, // 29: PeerExchangeMessage.callback_request:type_name -> PeerExchangeMessage.CallbackRequest
	60, // 30: CARenewRequest.invite_certificate:type_name -> Certificate
	62, // 31: CARenewRequest.certificate_request:type_name -> CertificateRequest
	60, // 32: CARenewResponse.certificate:type_name -> Certificate
	60, // 33: NetworkHandshake.NetworkBinding.certificate:type_name -> Certificate
	42, // 34: NetworkHandshake.NetworkBindings.network_bindings:type_name -> NetworkHandshake.NetworkBinding
	60, // 35: NetworkHandshake.CertificateUpgradeRequest.network_keys:type_name -> Certificate
	60, // 36: NetworkHandshake.CertificateUpgradeResponse.certificates:type_name -> Certificate
	60, // 37: NetworkHandshake.CertificateUpdate.certificates:type_name -> Certificate
	60, // 38: BootstrapServiceMessage.PublishRequest.certificate:type_name -> Certificate
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_vpn_proto_init() }
func file_vpn_proto_init() {
	if File_vpn_proto != nil {
		return
	}
	file_profile_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vpn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartVPNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartVPNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopVPNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopVPNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkHandshake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxySendKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxySendKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxyReceiveKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxyReceiveKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxyDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxyDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxyCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxyCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapClientWebSocketOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBootstrapClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBootstrapClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBootstrapClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBootstrapClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBootstrapClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBootstrapClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBootstrapClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBootstrapClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBootstrapClientsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBootstrapClientsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBootstrapPeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBootstrapPeersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapServiceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishNetworkToBootstrapPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishNetworkToBootstrapPeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerExchangeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CARenewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CARenewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkEvent_NetworkOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkEvent_NetworkClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkHandshake_Init); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkHandshake_NetworkBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkHandshake_NetworkBindings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkHandshake_CertificateUpgradeOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkHandshake_CertificateUpgradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkHandshake_CertificateUpgradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkHandshake_CertificateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxyEvent_Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxyEvent_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerProxyEvent_Read); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapServiceMessage_BrokerOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapServiceMessage_PublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapServiceMessage_PublishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerExchangeMessage_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerExchangeMessage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerExchangeMessage_Offer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerExchangeMessage_Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerExchangeMessage_IceCandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerExchangeMessage_CallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vpn_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*NetworkEvent_NetworkOpen_)(nil),
		(*NetworkEvent_NetworkClose_)(nil),
	}
	file_vpn_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*NetworkHandshake_Init_)(nil),
		(*NetworkHandshake_NetworkBindings_)(nil),
		(*NetworkHandshake_CertificateUpgradeOffer_)(nil),
		(*NetworkHandshake_CertificateUpgradeRequest_)(nil),
		(*NetworkHandshake_CertificateUpgradeResponse_)(nil),
		(*NetworkHandshake_CertificateUpdate_)(nil),
	}
	file_vpn_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*BrokerProxyEvent_Open_)(nil),
		(*BrokerProxyEvent_Data_)(nil),
		(*BrokerProxyEvent_Read_)(nil),
	}
	file_vpn_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*BootstrapClient_WebsocketOptions)(nil),
	}
	file_vpn_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*CreateBootstrapClientRequest_WebsocketOptions)(nil),
	}
	file_vpn_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*UpdateBootstrapClientRequest_WebsocketOptions)(nil),
	}
	file_vpn_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*BootstrapServiceMessage_BrokerOffer_)(nil),
		(*BootstrapServiceMessage_PublishRequest_)(nil),
		(*BootstrapServiceMessage_PublishResponse_)(nil),
	}
	file_vpn_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*PeerExchangeMessage_Request_)(nil),
		(*PeerExchangeMessage_Response_)(nil),
		(*PeerExchangeMessage_Offer_)(nil),
		(*PeerExchangeMessage_Answer_)(nil),
		(*PeerExchangeMessage_IceCandidate_)(nil),
		(*PeerExchangeMessage_CallbackRequest_)(nil),
	}
	file_vpn_proto_msgTypes[53].OneofWrappers = []interface{}{
		(*BootstrapServiceMessage_PublishResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vpn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vpn_proto_goTypes,
		DependencyIndexes: file_vpn_proto_depIdxs,
		MessageInfos:      file_vpn_proto_msgTypes,
	}.Build()
	File_vpn_proto = out.File
	file_vpn_proto_rawDesc = nil
	file_vpn_proto_goTypes = nil
	file_vpn_proto_depIdxs = nil
}
