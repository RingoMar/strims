// Copyright 2022 Strims contributors
// SPDX-License-Identifier: AGPL-3.0-only

package mpc

import (
	"encoding/binary"
	"testing"

	"lukechampine.com/uint128"
)

func TestClmulBlock(t *testing.T) {
	cs := []struct {
		a, b     Block
		expected [2]Block
	}{
		{
			Block{0x72, 0x79, 0xca, 0xcd, 0x58, 0xc8, 0x29, 0x1, 0x99, 0x5f, 0xd1, 0xa7, 0x94, 0x73, 0xe8, 0xcc},
			Block{0xe4, 0xb, 0xd4, 0x1, 0x6, 0x1d, 0x55, 0xf6, 0xdc, 0xa6, 0xb8, 0x74, 0xf, 0x1d, 0x90, 0x6c},
			[2]Block{
				{0x8, 0x28, 0xec, 0xf1, 0x6e, 0x94, 0x2, 0x2d, 0x18, 0x76, 0xb0, 0xb9, 0x75, 0x35, 0xe2, 0x77},
				{0x4, 0x69, 0x89, 0xe0, 0x58, 0xb9, 0x74, 0xd3, 0x90, 0xc0, 0x5b, 0x10, 0x29, 0x43, 0x99, 0x2f},
			},
		},
		{
			Block{0x6c, 0x99, 0xc, 0x52, 0x68, 0xa6, 0xb7, 0x79, 0xb8, 0x55, 0x7e, 0x4c, 0xa5, 0xee, 0x45, 0x28},
			Block{0xfc, 0x8d, 0x47, 0x89, 0x7e, 0x69, 0xa8, 0x55, 0x14, 0xfc, 0xdf, 0xa6, 0x9c, 0xbe, 0x2b, 0x28},
			[2]Block{
				{0x90, 0x44, 0xe3, 0xb3, 0x70, 0xe4, 0xd1, 0xd2, 0x1d, 0x5d, 0x67, 0xe1, 0xa, 0x9f, 0xbd, 0xed},
				{0x8b, 0xb6, 0x93, 0x16, 0xeb, 0xd0, 0xfc, 0x37, 0xcb, 0x3b, 0xa9, 0xe2, 0xf7, 0xb2, 0x4e, 0x4},
			},
		},
	}
	for _, c := range cs {
		res := clmulBlock(c.a, c.b)
		if c.expected != res {
			t.Errorf("expected %x got %x", c.expected, res)
			t.FailNow()
		}
	}

}

func BenchmarkClmulBlock(b *testing.B) {
	x := Block{0x5a, 0x3f, 0x18, 0x11, 0x79, 0xa2, 0xae, 0x56, 0x4a, 0x8f, 0xa2, 0x4a, 0x68, 0x6, 0x3b, 0x4d}
	y := Block{0xf9, 0xed, 0xa, 0x8f, 0x11, 0xd7, 0x54, 0x6d, 0x21, 0x34, 0x3c, 0xed, 0xf8, 0x82, 0x8e, 0x28}
	for i := 0; i < b.N; i++ {
		clmulBlock(x, y)
	}
}

func BenchmarkClmulU128(b *testing.B) {
	v := Block{0x5a, 0x3f, 0x18, 0x11, 0x79, 0xa2, 0xae, 0x56, 0x4a, 0x8f, 0xa2, 0x4a, 0x68, 0x6, 0x3b, 0x4d}

	y := uint128.From64(binary.LittleEndian.Uint64(v[:8]))
	x := uint128.From64(binary.LittleEndian.Uint64(v[8:]))

	for i := 0; i < b.N; i++ {
		clmulUint128(x, y)
	}
}
